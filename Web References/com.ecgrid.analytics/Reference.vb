'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace com.ecgrid.analytics
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="#ecgrid:analytics v1Soap", [Namespace]:="http://ecgrid.com/")>  _
    Partial Public Class ecgridanalyticsv1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private TransactionConfirmOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TransactionConfirmByInterchangeIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private VersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.ECGridOSMailboxIO.My.MySettings.Default.ECGridOSMailboxIO_com_ecgrid_analytics__x0023_ecgrid_x003A_analytics_x0020_v1
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event TransactionConfirmCompleted As TransactionConfirmCompletedEventHandler
        
        '''<remarks/>
        Public Event TransactionConfirmByInterchangeIdCompleted As TransactionConfirmByInterchangeIdCompletedEventHandler
        
        '''<remarks/>
        Public Event VersionCompleted As VersionCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/TransactionConfirm", RequestNamespace:="http://ecgrid.com/", ResponseNamespace:="http://ecgrid.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TransactionConfirm(ByVal APIKey As String, ByVal [Event] As ConfirmationEvent, ByVal SenderQualifier As String, ByVal SenderId As String, ByVal ReceiverQualifier As String, ByVal ReceiverId As String, ByVal TransactionType As String, ByVal TransactionId As String, ByVal TransactionDate As Date) As TransStatus
            Dim results() As Object = Me.Invoke("TransactionConfirm", New Object() {APIKey, [Event], SenderQualifier, SenderId, ReceiverQualifier, ReceiverId, TransactionType, TransactionId, TransactionDate})
            Return CType(results(0),TransStatus)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TransactionConfirmAsync(ByVal APIKey As String, ByVal [Event] As ConfirmationEvent, ByVal SenderQualifier As String, ByVal SenderId As String, ByVal ReceiverQualifier As String, ByVal ReceiverId As String, ByVal TransactionType As String, ByVal TransactionId As String, ByVal TransactionDate As Date)
            Me.TransactionConfirmAsync(APIKey, [Event], SenderQualifier, SenderId, ReceiverQualifier, ReceiverId, TransactionType, TransactionId, TransactionDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TransactionConfirmAsync(ByVal APIKey As String, ByVal [Event] As ConfirmationEvent, ByVal SenderQualifier As String, ByVal SenderId As String, ByVal ReceiverQualifier As String, ByVal ReceiverId As String, ByVal TransactionType As String, ByVal TransactionId As String, ByVal TransactionDate As Date, ByVal userState As Object)
            If (Me.TransactionConfirmOperationCompleted Is Nothing) Then
                Me.TransactionConfirmOperationCompleted = AddressOf Me.OnTransactionConfirmOperationCompleted
            End If
            Me.InvokeAsync("TransactionConfirm", New Object() {APIKey, [Event], SenderQualifier, SenderId, ReceiverQualifier, ReceiverId, TransactionType, TransactionId, TransactionDate}, Me.TransactionConfirmOperationCompleted, userState)
        End Sub
        
        Private Sub OnTransactionConfirmOperationCompleted(ByVal arg As Object)
            If (Not (Me.TransactionConfirmCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TransactionConfirmCompleted(Me, New TransactionConfirmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/TransactionConfirmByInterchangeId", RequestNamespace:="http://ecgrid.com/", ResponseNamespace:="http://ecgrid.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TransactionConfirmByInterchangeId(ByVal APIKey As String, ByVal InterchangeId As Integer, ByVal [Event] As ConfirmationEvent, ByVal TransactionId As String) As TransStatus
            Dim results() As Object = Me.Invoke("TransactionConfirmByInterchangeId", New Object() {APIKey, InterchangeId, [Event], TransactionId})
            Return CType(results(0),TransStatus)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TransactionConfirmByInterchangeIdAsync(ByVal APIKey As String, ByVal InterchangeId As Integer, ByVal [Event] As ConfirmationEvent, ByVal TransactionId As String)
            Me.TransactionConfirmByInterchangeIdAsync(APIKey, InterchangeId, [Event], TransactionId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TransactionConfirmByInterchangeIdAsync(ByVal APIKey As String, ByVal InterchangeId As Integer, ByVal [Event] As ConfirmationEvent, ByVal TransactionId As String, ByVal userState As Object)
            If (Me.TransactionConfirmByInterchangeIdOperationCompleted Is Nothing) Then
                Me.TransactionConfirmByInterchangeIdOperationCompleted = AddressOf Me.OnTransactionConfirmByInterchangeIdOperationCompleted
            End If
            Me.InvokeAsync("TransactionConfirmByInterchangeId", New Object() {APIKey, InterchangeId, [Event], TransactionId}, Me.TransactionConfirmByInterchangeIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnTransactionConfirmByInterchangeIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.TransactionConfirmByInterchangeIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TransactionConfirmByInterchangeIdCompleted(Me, New TransactionConfirmByInterchangeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgrid.com/Version", RequestNamespace:="http://ecgrid.com/", ResponseNamespace:="http://ecgrid.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Version() As String
            Dim results() As Object = Me.Invoke("Version", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VersionAsync()
            Me.VersionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VersionAsync(ByVal userState As Object)
            If (Me.VersionOperationCompleted Is Nothing) Then
                Me.VersionOperationCompleted = AddressOf Me.OnVersionOperationCompleted
            End If
            Me.InvokeAsync("Version", New Object(-1) {}, Me.VersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.VersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VersionCompleted(Me, New VersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgrid.com/")>  _
    Public Enum ConfirmationEvent
        
        '''<remarks/>
        MailboxDelivered
        
        '''<remarks/>
        MailboxPickedUp
        
        '''<remarks/>
        Translated
        
        '''<remarks/>
        Imported
        
        '''<remarks/>
        ReadyToView
        
        '''<remarks/>
        ReadyToProcess
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgrid.com/")>  _
    Public Enum TransStatus
        
        '''<remarks/>
        Erred
        
        '''<remarks/>
        Ignored
        
        '''<remarks/>
        Pending
        
        '''<remarks/>
        Confirmed
        
        '''<remarks/>
        Duplicate
        
        '''<remarks/>
        Completed
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TransactionConfirmCompletedEventHandler(ByVal sender As Object, ByVal e As TransactionConfirmCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TransactionConfirmCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TransStatus
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TransStatus)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TransactionConfirmByInterchangeIdCompletedEventHandler(ByVal sender As Object, ByVal e As TransactionConfirmByInterchangeIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TransactionConfirmByInterchangeIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TransStatus
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TransStatus)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub VersionCompletedEventHandler(ByVal sender As Object, ByVal e As VersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
