'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace net.ecgridos
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ECGridOS API v3Soap", [Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class ECGridOSAPIv3
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AS2PairOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2UpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2ListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2ListExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2FindOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CommListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CommListExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CommFindOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2InfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CommInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2SetStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2TerminateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2CertAddPublicOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2CertAddPrivateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2CertCreatePrivateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2CertTerminateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2DefaultMailboxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GISBListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GISBListExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GISBFindOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GISBInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NowUTCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private VersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private X400FormatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PricelistInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContractAddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContractListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContractInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InvoiceInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InvoiceCalculateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InvoiceCalculateLineItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InvoiceSetStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InvoiceListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeInBoxExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeInBoxArchiveExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeOutBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeOutBoxArchiveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeOutBoxExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeOutBoxArchiveExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeOutBoxPendingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeOutBoxPendingExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeInBoxPendingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeInBoxPendingExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeHeaderInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeHeaderInfoBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeOutBoxNoRouteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeOutBoxNoRouteExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeResendOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeCancelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CallBackEventInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CallBackEventListExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CallBackAddExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CallBackQueueInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CallBackTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CallBackInvokeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CallBackPendingListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CallBackPendingListExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CallBackFailedListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CallBackFailedListExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReportMonthlyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReportMonthlyExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReportTrafficStatsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReportTrafficStatsExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReportTrafficStatsPublicOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReportInstantStatsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReportInstantStatsExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2AddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CommAddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AS2SetPairOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterconnectCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterconnectCountExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CarbonCopyAddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CarbonCopyAddExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CarbonCopyActivateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CarbonCopySuspendOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CarbonCopyTerminateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CarbonCopyInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CarbonCopyListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CarbonCopyListExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelInBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelInBoxExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelDownloadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelDownloadNoUpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelDownloadGZipOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelDownloadInnerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelDownloadConfirmOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelAcknowledgmentNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelDownloadCancelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelDownloadConfirmPendingAckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelDownloadResetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelResendOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelUploadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelUploadExAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelUploadGZipOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelUpdateStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelUpdateLocalStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelUploadExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelUploadDirectedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelUploadGZipExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelUploadDirectedGZipOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelSetMailbagControlIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelManifestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelInterchangeManifestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeManifestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelNoteListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelInBoxArchiveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelInBoxArchiveExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelOutBoxArchiveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelOutBoxArchiveExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelOutBoxErrorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelOutBoxErrorExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelOutBoxInProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParcelOutBoxInProcessExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeInBoxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterchangeInBoxArchiveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkBackupAllConfigsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxAddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxAddExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxActivateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxSuspendOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxTerminateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxManagedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxSetContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxOwnerContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxErrorsContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxInterconnectsContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxNoticesContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxX12DelimitersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxInBoxTimeoutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxDescriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxUseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MailboxListExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPAddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPAddVANOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPAddExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPMoveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPMoveMailboxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPMoveExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPUpdateDescriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPUpdateDataEMailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPActivateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPSuspendOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPTerminateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPSetRoutingGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPSearchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPSearchExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPListExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPListExPagedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPListByOwnerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPFindExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPGetMailboxDefaultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPSetMailboxDefaultOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TPSetOwnerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterconnectAddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterconnectUpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterconnectNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterconnectCancelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterconnectInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterconnectInfoGUIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterconnectNoteListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterconnectListByECGridIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterconnectListByStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterconnectListByStatusExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InterconnectAssignNetOpsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GenerateAPIKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GeneratePasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogoutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangePasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WhoAmIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private JSONWhoAmIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserAddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserAddExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserUpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserActivateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserSuspendOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserTerminateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserSendSMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserResetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserResetAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserListExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserListLockedOutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserListLockedOutExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserSetNetworkMailboxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserSetAuthLevelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserGetAPIKeyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SessionLogCurrentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SessionLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SessionLogExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private KeyGetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private KeyListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private KeySetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private KeyRemoveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkInfoWithLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkStatusSummaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkOutageListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkStartOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkStopOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkRestartOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkSetStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkAddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkSetContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkGetContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkOwnerContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkErrorsContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkInterconnectsContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkNoticesContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkBillingContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkReportsContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NetworkSetWebsiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.ECGridOSMailboxIO.My.MySettings.Default.ECGridOSMailboxIO_ecgridos_ECGridOS_x0020_API_x0020_v2
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AS2PairCompleted As AS2PairCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2UpdateCompleted As AS2UpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2ListCompleted As AS2ListCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2ListExCompleted As AS2ListExCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2FindCompleted As AS2FindCompletedEventHandler
        
        '''<remarks/>
        Public Event CommListCompleted As CommListCompletedEventHandler
        
        '''<remarks/>
        Public Event CommListExCompleted As CommListExCompletedEventHandler
        
        '''<remarks/>
        Public Event CommFindCompleted As CommFindCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2InfoCompleted As AS2InfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CommInfoCompleted As CommInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2SetStatusCompleted As AS2SetStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2TerminateCompleted As AS2TerminateCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2CertAddPublicCompleted As AS2CertAddPublicCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2CertAddPrivateCompleted As AS2CertAddPrivateCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2CertCreatePrivateCompleted As AS2CertCreatePrivateCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2CertTerminateCompleted As AS2CertTerminateCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2DefaultMailboxCompleted As AS2DefaultMailboxCompletedEventHandler
        
        '''<remarks/>
        Public Event GISBListCompleted As GISBListCompletedEventHandler
        
        '''<remarks/>
        Public Event GISBListExCompleted As GISBListExCompletedEventHandler
        
        '''<remarks/>
        Public Event GISBFindCompleted As GISBFindCompletedEventHandler
        
        '''<remarks/>
        Public Event GISBInfoCompleted As GISBInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event NowUTCCompleted As NowUTCCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeDateCompleted As InterchangeDateCompletedEventHandler
        
        '''<remarks/>
        Public Event VersionCompleted As VersionCompletedEventHandler
        
        '''<remarks/>
        Public Event X400FormatCompleted As X400FormatCompletedEventHandler
        
        '''<remarks/>
        Public Event PricelistInfoCompleted As PricelistInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event ContractAddCompleted As ContractAddCompletedEventHandler
        
        '''<remarks/>
        Public Event ContractListCompleted As ContractListCompletedEventHandler
        
        '''<remarks/>
        Public Event ContractInfoCompleted As ContractInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event InvoiceInfoCompleted As InvoiceInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event InvoiceCalculateCompleted As InvoiceCalculateCompletedEventHandler
        
        '''<remarks/>
        Public Event InvoiceCalculateLineItemCompleted As InvoiceCalculateLineItemCompletedEventHandler
        
        '''<remarks/>
        Public Event InvoiceSetStatusCompleted As InvoiceSetStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event InvoiceListCompleted As InvoiceListCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeInBoxExCompleted As InterchangeInBoxExCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeInBoxArchiveExCompleted As InterchangeInBoxArchiveExCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeOutBoxCompleted As InterchangeOutBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeOutBoxArchiveCompleted As InterchangeOutBoxArchiveCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeOutBoxExCompleted As InterchangeOutBoxExCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeOutBoxArchiveExCompleted As InterchangeOutBoxArchiveExCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeOutBoxPendingCompleted As InterchangeOutBoxPendingCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeOutBoxPendingExCompleted As InterchangeOutBoxPendingExCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeInBoxPendingCompleted As InterchangeInBoxPendingCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeInBoxPendingExCompleted As InterchangeInBoxPendingExCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeHeaderInfoCompleted As InterchangeHeaderInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeHeaderInfoBCompleted As InterchangeHeaderInfoBCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeOutBoxNoRouteCompleted As InterchangeOutBoxNoRouteCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeOutBoxNoRouteExCompleted As InterchangeOutBoxNoRouteExCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeResendCompleted As InterchangeResendCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeCancelCompleted As InterchangeCancelCompletedEventHandler
        
        '''<remarks/>
        Public Event CallBackEventInfoCompleted As CallBackEventInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CallBackEventListExCompleted As CallBackEventListExCompletedEventHandler
        
        '''<remarks/>
        Public Event CallBackAddExCompleted As CallBackAddExCompletedEventHandler
        
        '''<remarks/>
        Public Event CallBackQueueInfoCompleted As CallBackQueueInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CallBackTestCompleted As CallBackTestCompletedEventHandler
        
        '''<remarks/>
        Public Event CallBackInvokeCompleted As CallBackInvokeCompletedEventHandler
        
        '''<remarks/>
        Public Event CallBackPendingListCompleted As CallBackPendingListCompletedEventHandler
        
        '''<remarks/>
        Public Event CallBackPendingListExCompleted As CallBackPendingListExCompletedEventHandler
        
        '''<remarks/>
        Public Event CallBackFailedListCompleted As CallBackFailedListCompletedEventHandler
        
        '''<remarks/>
        Public Event CallBackFailedListExCompleted As CallBackFailedListExCompletedEventHandler
        
        '''<remarks/>
        Public Event ReportMonthlyCompleted As ReportMonthlyCompletedEventHandler
        
        '''<remarks/>
        Public Event ReportMonthlyExCompleted As ReportMonthlyExCompletedEventHandler
        
        '''<remarks/>
        Public Event ReportTrafficStatsCompleted As ReportTrafficStatsCompletedEventHandler
        
        '''<remarks/>
        Public Event ReportTrafficStatsExCompleted As ReportTrafficStatsExCompletedEventHandler
        
        '''<remarks/>
        Public Event ReportTrafficStatsPublicCompleted As ReportTrafficStatsPublicCompletedEventHandler
        
        '''<remarks/>
        Public Event ReportInstantStatsCompleted As ReportInstantStatsCompletedEventHandler
        
        '''<remarks/>
        Public Event ReportInstantStatsExCompleted As ReportInstantStatsExCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2AddCompleted As AS2AddCompletedEventHandler
        
        '''<remarks/>
        Public Event CommAddCompleted As CommAddCompletedEventHandler
        
        '''<remarks/>
        Public Event AS2SetPairCompleted As AS2SetPairCompletedEventHandler
        
        '''<remarks/>
        Public Event InterconnectCountCompleted As InterconnectCountCompletedEventHandler
        
        '''<remarks/>
        Public Event InterconnectCountExCompleted As InterconnectCountExCompletedEventHandler
        
        '''<remarks/>
        Public Event CarbonCopyAddCompleted As CarbonCopyAddCompletedEventHandler
        
        '''<remarks/>
        Public Event CarbonCopyAddExCompleted As CarbonCopyAddExCompletedEventHandler
        
        '''<remarks/>
        Public Event CarbonCopyActivateCompleted As CarbonCopyActivateCompletedEventHandler
        
        '''<remarks/>
        Public Event CarbonCopySuspendCompleted As CarbonCopySuspendCompletedEventHandler
        
        '''<remarks/>
        Public Event CarbonCopyTerminateCompleted As CarbonCopyTerminateCompletedEventHandler
        
        '''<remarks/>
        Public Event CarbonCopyInfoCompleted As CarbonCopyInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CarbonCopyListCompleted As CarbonCopyListCompletedEventHandler
        
        '''<remarks/>
        Public Event CarbonCopyListExCompleted As CarbonCopyListExCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelInBoxCompleted As ParcelInBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelInBoxExCompleted As ParcelInBoxExCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelInfoCompleted As ParcelInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelDownloadCompleted As ParcelDownloadCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelDownloadNoUpdateCompleted As ParcelDownloadNoUpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelDownloadGZipCompleted As ParcelDownloadGZipCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelDownloadInnerCompleted As ParcelDownloadInnerCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelDownloadConfirmCompleted As ParcelDownloadConfirmCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelAcknowledgmentNoteCompleted As ParcelAcknowledgmentNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelDownloadCancelCompleted As ParcelDownloadCancelCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelDownloadConfirmPendingAckCompleted As ParcelDownloadConfirmPendingAckCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelDownloadResetCompleted As ParcelDownloadResetCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelResendCompleted As ParcelResendCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelUploadCompleted As ParcelUploadCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelUploadExACompleted As ParcelUploadExACompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelUploadGZipCompleted As ParcelUploadGZipCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelUpdateStatusCompleted As ParcelUpdateStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelUpdateLocalStatusCompleted As ParcelUpdateLocalStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelUploadExCompleted As ParcelUploadExCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelUploadDirectedCompleted As ParcelUploadDirectedCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelUploadGZipExCompleted As ParcelUploadGZipExCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelUploadDirectedGZipCompleted As ParcelUploadDirectedGZipCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelTestCompleted As ParcelTestCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelSetMailbagControlIDCompleted As ParcelSetMailbagControlIDCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelManifestCompleted As ParcelManifestCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelInterchangeManifestCompleted As ParcelInterchangeManifestCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeManifestCompleted As InterchangeManifestCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelNoteListCompleted As ParcelNoteListCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelInBoxArchiveCompleted As ParcelInBoxArchiveCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelInBoxArchiveExCompleted As ParcelInBoxArchiveExCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelOutBoxArchiveCompleted As ParcelOutBoxArchiveCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelOutBoxArchiveExCompleted As ParcelOutBoxArchiveExCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelOutBoxErrorCompleted As ParcelOutBoxErrorCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelOutBoxErrorExCompleted As ParcelOutBoxErrorExCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelOutBoxInProcessCompleted As ParcelOutBoxInProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event ParcelOutBoxInProcessExCompleted As ParcelOutBoxInProcessExCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeInfoCompleted As InterchangeInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeInBoxCompleted As InterchangeInBoxCompletedEventHandler
        
        '''<remarks/>
        Public Event InterchangeInBoxArchiveCompleted As InterchangeInBoxArchiveCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkBackupAllConfigsCompleted As NetworkBackupAllConfigsCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxAddCompleted As MailboxAddCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxAddExCompleted As MailboxAddExCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxActivateCompleted As MailboxActivateCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxSuspendCompleted As MailboxSuspendCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxTerminateCompleted As MailboxTerminateCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxManagedCompleted As MailboxManagedCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxInfoCompleted As MailboxInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxNameCompleted As MailboxNameCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxSetContactCompleted As MailboxSetContactCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxOwnerContactCompleted As MailboxOwnerContactCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxErrorsContactCompleted As MailboxErrorsContactCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxInterconnectsContactCompleted As MailboxInterconnectsContactCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxNoticesContactCompleted As MailboxNoticesContactCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxX12DelimitersCompleted As MailboxX12DelimitersCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxInBoxTimeoutCompleted As MailboxInBoxTimeoutCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxDescriptionCompleted As MailboxDescriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxUseCompleted As MailboxUseCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxListCompleted As MailboxListCompletedEventHandler
        
        '''<remarks/>
        Public Event MailboxListExCompleted As MailboxListExCompletedEventHandler
        
        '''<remarks/>
        Public Event TPAddCompleted As TPAddCompletedEventHandler
        
        '''<remarks/>
        Public Event TPAddVANCompleted As TPAddVANCompletedEventHandler
        
        '''<remarks/>
        Public Event TPAddExCompleted As TPAddExCompletedEventHandler
        
        '''<remarks/>
        Public Event TPMoveCompleted As TPMoveCompletedEventHandler
        
        '''<remarks/>
        Public Event TPMoveMailboxCompleted As TPMoveMailboxCompletedEventHandler
        
        '''<remarks/>
        Public Event TPMoveExCompleted As TPMoveExCompletedEventHandler
        
        '''<remarks/>
        Public Event TPUpdateDescriptionCompleted As TPUpdateDescriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event TPUpdateDataEMailCompleted As TPUpdateDataEMailCompletedEventHandler
        
        '''<remarks/>
        Public Event TPActivateCompleted As TPActivateCompletedEventHandler
        
        '''<remarks/>
        Public Event TPSuspendCompleted As TPSuspendCompletedEventHandler
        
        '''<remarks/>
        Public Event TPTerminateCompleted As TPTerminateCompletedEventHandler
        
        '''<remarks/>
        Public Event TPSetRoutingGroupCompleted As TPSetRoutingGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event TPInfoCompleted As TPInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event TPSearchCompleted As TPSearchCompletedEventHandler
        
        '''<remarks/>
        Public Event TPSearchExCompleted As TPSearchExCompletedEventHandler
        
        '''<remarks/>
        Public Event TPListCompleted As TPListCompletedEventHandler
        
        '''<remarks/>
        Public Event TPListExCompleted As TPListExCompletedEventHandler
        
        '''<remarks/>
        Public Event TPListExPagedCompleted As TPListExPagedCompletedEventHandler
        
        '''<remarks/>
        Public Event TPListByOwnerCompleted As TPListByOwnerCompletedEventHandler
        
        '''<remarks/>
        Public Event TPFindExCompleted As TPFindExCompletedEventHandler
        
        '''<remarks/>
        Public Event TPGetMailboxDefaultCompleted As TPGetMailboxDefaultCompletedEventHandler
        
        '''<remarks/>
        Public Event TPSetMailboxDefaultCompleted As TPSetMailboxDefaultCompletedEventHandler
        
        '''<remarks/>
        Public Event TPSetOwnerCompleted As TPSetOwnerCompletedEventHandler
        
        '''<remarks/>
        Public Event InterconnectAddCompleted As InterconnectAddCompletedEventHandler
        
        '''<remarks/>
        Public Event InterconnectUpdateCompleted As InterconnectUpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event InterconnectNoteCompleted As InterconnectNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event InterconnectCancelCompleted As InterconnectCancelCompletedEventHandler
        
        '''<remarks/>
        Public Event InterconnectInfoCompleted As InterconnectInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event InterconnectInfoGUIDCompleted As InterconnectInfoGUIDCompletedEventHandler
        
        '''<remarks/>
        Public Event InterconnectNoteListCompleted As InterconnectNoteListCompletedEventHandler
        
        '''<remarks/>
        Public Event InterconnectListByECGridIDCompleted As InterconnectListByECGridIDCompletedEventHandler
        
        '''<remarks/>
        Public Event InterconnectListByStatusCompleted As InterconnectListByStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event InterconnectListByStatusExCompleted As InterconnectListByStatusExCompletedEventHandler
        
        '''<remarks/>
        Public Event InterconnectAssignNetOpsCompleted As InterconnectAssignNetOpsCompletedEventHandler
        
        '''<remarks/>
        Public Event LoginCompleted As LoginCompletedEventHandler
        
        '''<remarks/>
        Public Event GenerateAPIKeyCompleted As GenerateAPIKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event GeneratePasswordCompleted As GeneratePasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event LogoutCompleted As LogoutCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangePasswordCompleted As ChangePasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event WhoAmICompleted As WhoAmICompletedEventHandler
        
        '''<remarks/>
        Public Event JSONWhoAmICompleted As JSONWhoAmICompletedEventHandler
        
        '''<remarks/>
        Public Event UserAddCompleted As UserAddCompletedEventHandler
        
        '''<remarks/>
        Public Event UserAddExCompleted As UserAddExCompletedEventHandler
        
        '''<remarks/>
        Public Event UserInfoCompleted As UserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UserUpdateCompleted As UserUpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event UserPasswordCompleted As UserPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event UserActivateCompleted As UserActivateCompletedEventHandler
        
        '''<remarks/>
        Public Event UserSuspendCompleted As UserSuspendCompletedEventHandler
        
        '''<remarks/>
        Public Event UserTerminateCompleted As UserTerminateCompletedEventHandler
        
        '''<remarks/>
        Public Event UserSendSMSCompleted As UserSendSMSCompletedEventHandler
        
        '''<remarks/>
        Public Event UserResetCompleted As UserResetCompletedEventHandler
        
        '''<remarks/>
        Public Event UserResetAllCompleted As UserResetAllCompletedEventHandler
        
        '''<remarks/>
        Public Event UserListCompleted As UserListCompletedEventHandler
        
        '''<remarks/>
        Public Event UserListExCompleted As UserListExCompletedEventHandler
        
        '''<remarks/>
        Public Event UserListLockedOutCompleted As UserListLockedOutCompletedEventHandler
        
        '''<remarks/>
        Public Event UserListLockedOutExCompleted As UserListLockedOutExCompletedEventHandler
        
        '''<remarks/>
        Public Event UserSetNetworkMailboxCompleted As UserSetNetworkMailboxCompletedEventHandler
        
        '''<remarks/>
        Public Event UserSetAuthLevelCompleted As UserSetAuthLevelCompletedEventHandler
        
        '''<remarks/>
        Public Event UserGetAPIKeyCompleted As UserGetAPIKeyCompletedEventHandler
        
        '''<remarks/>
        Public Event SessionLogCurrentCompleted As SessionLogCurrentCompletedEventHandler
        
        '''<remarks/>
        Public Event SessionLogCompleted As SessionLogCompletedEventHandler
        
        '''<remarks/>
        Public Event SessionLogExCompleted As SessionLogExCompletedEventHandler
        
        '''<remarks/>
        Public Event KeyGetCompleted As KeyGetCompletedEventHandler
        
        '''<remarks/>
        Public Event KeyListCompleted As KeyListCompletedEventHandler
        
        '''<remarks/>
        Public Event KeySetCompleted As KeySetCompletedEventHandler
        
        '''<remarks/>
        Public Event KeyRemoveCompleted As KeyRemoveCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkInfoCompleted As NetworkInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkInfoWithLogCompleted As NetworkInfoWithLogCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkListCompleted As NetworkListCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkStatusSummaryCompleted As NetworkStatusSummaryCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkOutageListCompleted As NetworkOutageListCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkStartCompleted As NetworkStartCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkStopCompleted As NetworkStopCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkRestartCompleted As NetworkRestartCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkSetStatusCompleted As NetworkSetStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkAddCompleted As NetworkAddCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkSetContactCompleted As NetworkSetContactCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkGetContactCompleted As NetworkGetContactCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkOwnerContactCompleted As NetworkOwnerContactCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkErrorsContactCompleted As NetworkErrorsContactCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkInterconnectsContactCompleted As NetworkInterconnectsContactCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkNoticesContactCompleted As NetworkNoticesContactCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkBillingContactCompleted As NetworkBillingContactCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkReportsContactCompleted As NetworkReportsContactCompletedEventHandler
        
        '''<remarks/>
        Public Event NetworkSetWebsiteCompleted As NetworkSetWebsiteCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2Pair", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2Pair(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal DefaultAS2ID As String) As as2CommInfo()
            Dim results() As Object = Me.Invoke("AS2Pair", New Object() {SessionID, ECGridIDFrom, ECGridIDTo, DefaultAS2ID})
            Return CType(results(0),as2CommInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2PairAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal DefaultAS2ID As String)
            Me.AS2PairAsync(SessionID, ECGridIDFrom, ECGridIDTo, DefaultAS2ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2PairAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal DefaultAS2ID As String, ByVal userState As Object)
            If (Me.AS2PairOperationCompleted Is Nothing) Then
                Me.AS2PairOperationCompleted = AddressOf Me.OnAS2PairOperationCompleted
            End If
            Me.InvokeAsync("AS2Pair", New Object() {SessionID, ECGridIDFrom, ECGridIDTo, DefaultAS2ID}, Me.AS2PairOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2PairOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2PairCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2PairCompleted(Me, New AS2PairCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2Update", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2Update(ByVal SessionID As String, ByVal CommID As Integer, ByVal OwnerUserID As Integer, ByVal AS2Identifier As String, ByVal URL As String, ByVal SignData As Boolean, ByVal EncryptData As Boolean, ByVal CompressData As Boolean, ByVal ReceiptType As ReceiptType, ByVal HTTPAuthentication As HTTPAuthType, ByVal HTTPUser As String, ByVal HTTPPassword As String, ByVal UseType As UseType, ByVal BeginUsage As Date, ByVal EndUsage As Date) As Boolean
            Dim results() As Object = Me.Invoke("AS2Update", New Object() {SessionID, CommID, OwnerUserID, AS2Identifier, URL, SignData, EncryptData, CompressData, ReceiptType, HTTPAuthentication, HTTPUser, HTTPPassword, UseType, BeginUsage, EndUsage})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2UpdateAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal OwnerUserID As Integer, ByVal AS2Identifier As String, ByVal URL As String, ByVal SignData As Boolean, ByVal EncryptData As Boolean, ByVal CompressData As Boolean, ByVal ReceiptType As ReceiptType, ByVal HTTPAuthentication As HTTPAuthType, ByVal HTTPUser As String, ByVal HTTPPassword As String, ByVal UseType As UseType, ByVal BeginUsage As Date, ByVal EndUsage As Date)
            Me.AS2UpdateAsync(SessionID, CommID, OwnerUserID, AS2Identifier, URL, SignData, EncryptData, CompressData, ReceiptType, HTTPAuthentication, HTTPUser, HTTPPassword, UseType, BeginUsage, EndUsage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2UpdateAsync( _
                    ByVal SessionID As String,  _
                    ByVal CommID As Integer,  _
                    ByVal OwnerUserID As Integer,  _
                    ByVal AS2Identifier As String,  _
                    ByVal URL As String,  _
                    ByVal SignData As Boolean,  _
                    ByVal EncryptData As Boolean,  _
                    ByVal CompressData As Boolean,  _
                    ByVal ReceiptType As ReceiptType,  _
                    ByVal HTTPAuthentication As HTTPAuthType,  _
                    ByVal HTTPUser As String,  _
                    ByVal HTTPPassword As String,  _
                    ByVal UseType As UseType,  _
                    ByVal BeginUsage As Date,  _
                    ByVal EndUsage As Date,  _
                    ByVal userState As Object)
            If (Me.AS2UpdateOperationCompleted Is Nothing) Then
                Me.AS2UpdateOperationCompleted = AddressOf Me.OnAS2UpdateOperationCompleted
            End If
            Me.InvokeAsync("AS2Update", New Object() {SessionID, CommID, OwnerUserID, AS2Identifier, URL, SignData, EncryptData, CompressData, ReceiptType, HTTPAuthentication, HTTPUser, HTTPPassword, UseType, BeginUsage, EndUsage}, Me.AS2UpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2UpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2UpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2UpdateCompleted(Me, New AS2UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2List", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2List(ByVal SessionID As String, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal WithCerts As Boolean) As as2CommInfo()
            Dim results() As Object = Me.Invoke("AS2List", New Object() {SessionID, PrivateKeyRequired, UseType, ShowInactive, WithCerts})
            Return CType(results(0),as2CommInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2ListAsync(ByVal SessionID As String, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal WithCerts As Boolean)
            Me.AS2ListAsync(SessionID, PrivateKeyRequired, UseType, ShowInactive, WithCerts, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2ListAsync(ByVal SessionID As String, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal WithCerts As Boolean, ByVal userState As Object)
            If (Me.AS2ListOperationCompleted Is Nothing) Then
                Me.AS2ListOperationCompleted = AddressOf Me.OnAS2ListOperationCompleted
            End If
            Me.InvokeAsync("AS2List", New Object() {SessionID, PrivateKeyRequired, UseType, ShowInactive, WithCerts}, Me.AS2ListOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2ListOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2ListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2ListCompleted(Me, New AS2ListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2ListEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2ListEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal WithCerts As Boolean) As as2CommInfo()
            Dim results() As Object = Me.Invoke("AS2ListEx", New Object() {SessionID, NetworkID, MailboxID, PrivateKeyRequired, UseType, ShowInactive, WithCerts})
            Return CType(results(0),as2CommInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2ListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal WithCerts As Boolean)
            Me.AS2ListExAsync(SessionID, NetworkID, MailboxID, PrivateKeyRequired, UseType, ShowInactive, WithCerts, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2ListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal WithCerts As Boolean, ByVal userState As Object)
            If (Me.AS2ListExOperationCompleted Is Nothing) Then
                Me.AS2ListExOperationCompleted = AddressOf Me.OnAS2ListExOperationCompleted
            End If
            Me.InvokeAsync("AS2ListEx", New Object() {SessionID, NetworkID, MailboxID, PrivateKeyRequired, UseType, ShowInactive, WithCerts}, Me.AS2ListExOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2ListExOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2ListExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2ListExCompleted(Me, New AS2ListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2Find", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2Find(ByVal SessionID As String, ByVal Identifier As String, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean) As as2CommInfo()
            Dim results() As Object = Me.Invoke("AS2Find", New Object() {SessionID, Identifier, PrivateKeyRequired, UseType, ShowInactive})
            Return CType(results(0),as2CommInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2FindAsync(ByVal SessionID As String, ByVal Identifier As String, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean)
            Me.AS2FindAsync(SessionID, Identifier, PrivateKeyRequired, UseType, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2FindAsync(ByVal SessionID As String, ByVal Identifier As String, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.AS2FindOperationCompleted Is Nothing) Then
                Me.AS2FindOperationCompleted = AddressOf Me.OnAS2FindOperationCompleted
            End If
            Me.InvokeAsync("AS2Find", New Object() {SessionID, Identifier, PrivateKeyRequired, UseType, ShowInactive}, Me.AS2FindOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2FindOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2FindCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2FindCompleted(Me, New AS2FindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CommList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CommList(ByVal SessionID As String, ByVal CommType As NetworkGatewayCommChannel, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal WithCerts As Boolean) As CommIDInfo()
            Dim results() As Object = Me.Invoke("CommList", New Object() {SessionID, CommType, PrivateKeyRequired, UseType, ShowInactive, WithCerts})
            Return CType(results(0),CommIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CommListAsync(ByVal SessionID As String, ByVal CommType As NetworkGatewayCommChannel, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal WithCerts As Boolean)
            Me.CommListAsync(SessionID, CommType, PrivateKeyRequired, UseType, ShowInactive, WithCerts, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CommListAsync(ByVal SessionID As String, ByVal CommType As NetworkGatewayCommChannel, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal WithCerts As Boolean, ByVal userState As Object)
            If (Me.CommListOperationCompleted Is Nothing) Then
                Me.CommListOperationCompleted = AddressOf Me.OnCommListOperationCompleted
            End If
            Me.InvokeAsync("CommList", New Object() {SessionID, CommType, PrivateKeyRequired, UseType, ShowInactive, WithCerts}, Me.CommListOperationCompleted, userState)
        End Sub
        
        Private Sub OnCommListOperationCompleted(ByVal arg As Object)
            If (Not (Me.CommListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CommListCompleted(Me, New CommListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CommListEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CommListEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal CommType As NetworkGatewayCommChannel, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal WithCerts As Boolean) As CommIDInfo()
            Dim results() As Object = Me.Invoke("CommListEx", New Object() {SessionID, NetworkID, MailboxID, CommType, PrivateKeyRequired, UseType, ShowInactive, WithCerts})
            Return CType(results(0),CommIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CommListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal CommType As NetworkGatewayCommChannel, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal WithCerts As Boolean)
            Me.CommListExAsync(SessionID, NetworkID, MailboxID, CommType, PrivateKeyRequired, UseType, ShowInactive, WithCerts, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CommListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal CommType As NetworkGatewayCommChannel, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal WithCerts As Boolean, ByVal userState As Object)
            If (Me.CommListExOperationCompleted Is Nothing) Then
                Me.CommListExOperationCompleted = AddressOf Me.OnCommListExOperationCompleted
            End If
            Me.InvokeAsync("CommListEx", New Object() {SessionID, NetworkID, MailboxID, CommType, PrivateKeyRequired, UseType, ShowInactive, WithCerts}, Me.CommListExOperationCompleted, userState)
        End Sub
        
        Private Sub OnCommListExOperationCompleted(ByVal arg As Object)
            If (Not (Me.CommListExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CommListExCompleted(Me, New CommListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CommFind", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CommFind(ByVal SessionID As String, ByVal Identifier As String, ByVal CommType As NetworkGatewayCommChannel, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean) As CommIDInfo()
            Dim results() As Object = Me.Invoke("CommFind", New Object() {SessionID, Identifier, CommType, PrivateKeyRequired, UseType, ShowInactive})
            Return CType(results(0),CommIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CommFindAsync(ByVal SessionID As String, ByVal Identifier As String, ByVal CommType As NetworkGatewayCommChannel, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean)
            Me.CommFindAsync(SessionID, Identifier, CommType, PrivateKeyRequired, UseType, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CommFindAsync(ByVal SessionID As String, ByVal Identifier As String, ByVal CommType As NetworkGatewayCommChannel, ByVal PrivateKeyRequired As Boolean, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.CommFindOperationCompleted Is Nothing) Then
                Me.CommFindOperationCompleted = AddressOf Me.OnCommFindOperationCompleted
            End If
            Me.InvokeAsync("CommFind", New Object() {SessionID, Identifier, CommType, PrivateKeyRequired, UseType, ShowInactive}, Me.CommFindOperationCompleted, userState)
        End Sub
        
        Private Sub OnCommFindOperationCompleted(ByVal arg As Object)
            If (Not (Me.CommFindCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CommFindCompleted(Me, New CommFindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2Info", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2Info(ByVal SessionID As String, ByVal CommID As Integer) As as2CommInfo
            Dim results() As Object = Me.Invoke("AS2Info", New Object() {SessionID, CommID})
            Return CType(results(0),as2CommInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2InfoAsync(ByVal SessionID As String, ByVal CommID As Integer)
            Me.AS2InfoAsync(SessionID, CommID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2InfoAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal userState As Object)
            If (Me.AS2InfoOperationCompleted Is Nothing) Then
                Me.AS2InfoOperationCompleted = AddressOf Me.OnAS2InfoOperationCompleted
            End If
            Me.InvokeAsync("AS2Info", New Object() {SessionID, CommID}, Me.AS2InfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2InfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2InfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2InfoCompleted(Me, New AS2InfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CommInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CommInfo(ByVal SessionID As String, ByVal CommID As Integer) As CommIDInfo
            Dim results() As Object = Me.Invoke("CommInfo", New Object() {SessionID, CommID})
            Return CType(results(0),CommIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CommInfoAsync(ByVal SessionID As String, ByVal CommID As Integer)
            Me.CommInfoAsync(SessionID, CommID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CommInfoAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal userState As Object)
            If (Me.CommInfoOperationCompleted Is Nothing) Then
                Me.CommInfoOperationCompleted = AddressOf Me.OnCommInfoOperationCompleted
            End If
            Me.InvokeAsync("CommInfo", New Object() {SessionID, CommID}, Me.CommInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCommInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CommInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CommInfoCompleted(Me, New CommInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2SetStatus", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2SetStatus(ByVal SessionID As String, ByVal CommID As Integer, ByVal Status As Status) As Boolean
            Dim results() As Object = Me.Invoke("AS2SetStatus", New Object() {SessionID, CommID, Status})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2SetStatusAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal Status As Status)
            Me.AS2SetStatusAsync(SessionID, CommID, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2SetStatusAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal Status As Status, ByVal userState As Object)
            If (Me.AS2SetStatusOperationCompleted Is Nothing) Then
                Me.AS2SetStatusOperationCompleted = AddressOf Me.OnAS2SetStatusOperationCompleted
            End If
            Me.InvokeAsync("AS2SetStatus", New Object() {SessionID, CommID, Status}, Me.AS2SetStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2SetStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2SetStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2SetStatusCompleted(Me, New AS2SetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2Terminate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2Terminate(ByVal SessionID As String, ByVal CommID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("AS2Terminate", New Object() {SessionID, CommID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2TerminateAsync(ByVal SessionID As String, ByVal CommID As Integer)
            Me.AS2TerminateAsync(SessionID, CommID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2TerminateAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal userState As Object)
            If (Me.AS2TerminateOperationCompleted Is Nothing) Then
                Me.AS2TerminateOperationCompleted = AddressOf Me.OnAS2TerminateOperationCompleted
            End If
            Me.InvokeAsync("AS2Terminate", New Object() {SessionID, CommID}, Me.AS2TerminateOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2TerminateOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2TerminateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2TerminateCompleted(Me, New AS2TerminateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2CertAddPublic", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2CertAddPublic(ByVal SessionID As String, ByVal CommID As Integer, ByVal BeginUsage As Date, ByVal Usage As CertificateUsage, ByVal PartnerAS2ID As String, ByVal PartnerURL As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Cert() As Byte) As as2CommInfo
            Dim results() As Object = Me.Invoke("AS2CertAddPublic", New Object() {SessionID, CommID, BeginUsage, Usage, PartnerAS2ID, PartnerURL, Cert})
            Return CType(results(0),as2CommInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2CertAddPublicAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal BeginUsage As Date, ByVal Usage As CertificateUsage, ByVal PartnerAS2ID As String, ByVal PartnerURL As String, ByVal Cert() As Byte)
            Me.AS2CertAddPublicAsync(SessionID, CommID, BeginUsage, Usage, PartnerAS2ID, PartnerURL, Cert, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2CertAddPublicAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal BeginUsage As Date, ByVal Usage As CertificateUsage, ByVal PartnerAS2ID As String, ByVal PartnerURL As String, ByVal Cert() As Byte, ByVal userState As Object)
            If (Me.AS2CertAddPublicOperationCompleted Is Nothing) Then
                Me.AS2CertAddPublicOperationCompleted = AddressOf Me.OnAS2CertAddPublicOperationCompleted
            End If
            Me.InvokeAsync("AS2CertAddPublic", New Object() {SessionID, CommID, BeginUsage, Usage, PartnerAS2ID, PartnerURL, Cert}, Me.AS2CertAddPublicOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2CertAddPublicOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2CertAddPublicCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2CertAddPublicCompleted(Me, New AS2CertAddPublicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2CertAddPrivate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2CertAddPrivate(ByVal SessionID As String, ByVal CommID As Integer, ByVal BeginUsage As Date, ByVal Usage As CertificateUsage, ByVal PartnerAS2ID As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Cert() As Byte, ByVal Password As String) As as2CommInfo
            Dim results() As Object = Me.Invoke("AS2CertAddPrivate", New Object() {SessionID, CommID, BeginUsage, Usage, PartnerAS2ID, Cert, Password})
            Return CType(results(0),as2CommInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2CertAddPrivateAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal BeginUsage As Date, ByVal Usage As CertificateUsage, ByVal PartnerAS2ID As String, ByVal Cert() As Byte, ByVal Password As String)
            Me.AS2CertAddPrivateAsync(SessionID, CommID, BeginUsage, Usage, PartnerAS2ID, Cert, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2CertAddPrivateAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal BeginUsage As Date, ByVal Usage As CertificateUsage, ByVal PartnerAS2ID As String, ByVal Cert() As Byte, ByVal Password As String, ByVal userState As Object)
            If (Me.AS2CertAddPrivateOperationCompleted Is Nothing) Then
                Me.AS2CertAddPrivateOperationCompleted = AddressOf Me.OnAS2CertAddPrivateOperationCompleted
            End If
            Me.InvokeAsync("AS2CertAddPrivate", New Object() {SessionID, CommID, BeginUsage, Usage, PartnerAS2ID, Cert, Password}, Me.AS2CertAddPrivateOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2CertAddPrivateOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2CertAddPrivateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2CertAddPrivateCompleted(Me, New AS2CertAddPrivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2CertCreatePrivate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2CertCreatePrivate(ByVal SessionID As String, ByVal CommID As Integer, ByVal BeginUsage As Date, ByVal Usage As CertificateUsage, ByVal SecureHashAlgorithm As CertificateSecureHashAlgorithm, ByVal PartnerAS2ID As String, ByVal Expires As Date) As as2CommInfo
            Dim results() As Object = Me.Invoke("AS2CertCreatePrivate", New Object() {SessionID, CommID, BeginUsage, Usage, SecureHashAlgorithm, PartnerAS2ID, Expires})
            Return CType(results(0),as2CommInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2CertCreatePrivateAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal BeginUsage As Date, ByVal Usage As CertificateUsage, ByVal SecureHashAlgorithm As CertificateSecureHashAlgorithm, ByVal PartnerAS2ID As String, ByVal Expires As Date)
            Me.AS2CertCreatePrivateAsync(SessionID, CommID, BeginUsage, Usage, SecureHashAlgorithm, PartnerAS2ID, Expires, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2CertCreatePrivateAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal BeginUsage As Date, ByVal Usage As CertificateUsage, ByVal SecureHashAlgorithm As CertificateSecureHashAlgorithm, ByVal PartnerAS2ID As String, ByVal Expires As Date, ByVal userState As Object)
            If (Me.AS2CertCreatePrivateOperationCompleted Is Nothing) Then
                Me.AS2CertCreatePrivateOperationCompleted = AddressOf Me.OnAS2CertCreatePrivateOperationCompleted
            End If
            Me.InvokeAsync("AS2CertCreatePrivate", New Object() {SessionID, CommID, BeginUsage, Usage, SecureHashAlgorithm, PartnerAS2ID, Expires}, Me.AS2CertCreatePrivateOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2CertCreatePrivateOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2CertCreatePrivateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2CertCreatePrivateCompleted(Me, New AS2CertCreatePrivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2CertTerminate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2CertTerminate(ByVal SessionID As String, ByVal CommID As Integer, ByVal CertKeyID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("AS2CertTerminate", New Object() {SessionID, CommID, CertKeyID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2CertTerminateAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal CertKeyID As Integer)
            Me.AS2CertTerminateAsync(SessionID, CommID, CertKeyID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2CertTerminateAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal CertKeyID As Integer, ByVal userState As Object)
            If (Me.AS2CertTerminateOperationCompleted Is Nothing) Then
                Me.AS2CertTerminateOperationCompleted = AddressOf Me.OnAS2CertTerminateOperationCompleted
            End If
            Me.InvokeAsync("AS2CertTerminate", New Object() {SessionID, CommID, CertKeyID}, Me.AS2CertTerminateOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2CertTerminateOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2CertTerminateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2CertTerminateCompleted(Me, New AS2CertTerminateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2DefaultMailbox", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2DefaultMailbox(ByVal SessionID As String, ByVal CommID As Integer, ByVal MailboxID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("AS2DefaultMailbox", New Object() {SessionID, CommID, MailboxID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2DefaultMailboxAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal MailboxID As Integer)
            Me.AS2DefaultMailboxAsync(SessionID, CommID, MailboxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2DefaultMailboxAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal MailboxID As Integer, ByVal userState As Object)
            If (Me.AS2DefaultMailboxOperationCompleted Is Nothing) Then
                Me.AS2DefaultMailboxOperationCompleted = AddressOf Me.OnAS2DefaultMailboxOperationCompleted
            End If
            Me.InvokeAsync("AS2DefaultMailbox", New Object() {SessionID, CommID, MailboxID}, Me.AS2DefaultMailboxOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2DefaultMailboxOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2DefaultMailboxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2DefaultMailboxCompleted(Me, New AS2DefaultMailboxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/GISBList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GISBList(ByVal SessionID As String, ByVal ShowInactive As Boolean) As GISBCommInfo()
            Dim results() As Object = Me.Invoke("GISBList", New Object() {SessionID, ShowInactive})
            Return CType(results(0),GISBCommInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GISBListAsync(ByVal SessionID As String, ByVal ShowInactive As Boolean)
            Me.GISBListAsync(SessionID, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GISBListAsync(ByVal SessionID As String, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.GISBListOperationCompleted Is Nothing) Then
                Me.GISBListOperationCompleted = AddressOf Me.OnGISBListOperationCompleted
            End If
            Me.InvokeAsync("GISBList", New Object() {SessionID, ShowInactive}, Me.GISBListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGISBListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GISBListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GISBListCompleted(Me, New GISBListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/GISBListEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GISBListEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ShowInactive As Boolean) As GISBCommInfo()
            Dim results() As Object = Me.Invoke("GISBListEx", New Object() {SessionID, NetworkID, MailboxID, ShowInactive})
            Return CType(results(0),GISBCommInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GISBListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ShowInactive As Boolean)
            Me.GISBListExAsync(SessionID, NetworkID, MailboxID, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GISBListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.GISBListExOperationCompleted Is Nothing) Then
                Me.GISBListExOperationCompleted = AddressOf Me.OnGISBListExOperationCompleted
            End If
            Me.InvokeAsync("GISBListEx", New Object() {SessionID, NetworkID, MailboxID, ShowInactive}, Me.GISBListExOperationCompleted, userState)
        End Sub
        
        Private Sub OnGISBListExOperationCompleted(ByVal arg As Object)
            If (Not (Me.GISBListExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GISBListExCompleted(Me, New GISBListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/GISBFind", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GISBFind(ByVal SessionID As String, ByVal Identifier As String, ByVal UseType As UseType, ByVal ShowInactive As Boolean) As GISBCommInfo()
            Dim results() As Object = Me.Invoke("GISBFind", New Object() {SessionID, Identifier, UseType, ShowInactive})
            Return CType(results(0),GISBCommInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GISBFindAsync(ByVal SessionID As String, ByVal Identifier As String, ByVal UseType As UseType, ByVal ShowInactive As Boolean)
            Me.GISBFindAsync(SessionID, Identifier, UseType, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GISBFindAsync(ByVal SessionID As String, ByVal Identifier As String, ByVal UseType As UseType, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.GISBFindOperationCompleted Is Nothing) Then
                Me.GISBFindOperationCompleted = AddressOf Me.OnGISBFindOperationCompleted
            End If
            Me.InvokeAsync("GISBFind", New Object() {SessionID, Identifier, UseType, ShowInactive}, Me.GISBFindOperationCompleted, userState)
        End Sub
        
        Private Sub OnGISBFindOperationCompleted(ByVal arg As Object)
            If (Not (Me.GISBFindCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GISBFindCompleted(Me, New GISBFindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/GISBInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GISBInfo(ByVal SessionID As String, ByVal CommID As Integer) As GISBCommInfo
            Dim results() As Object = Me.Invoke("GISBInfo", New Object() {SessionID, CommID})
            Return CType(results(0),GISBCommInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GISBInfoAsync(ByVal SessionID As String, ByVal CommID As Integer)
            Me.GISBInfoAsync(SessionID, CommID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GISBInfoAsync(ByVal SessionID As String, ByVal CommID As Integer, ByVal userState As Object)
            If (Me.GISBInfoOperationCompleted Is Nothing) Then
                Me.GISBInfoOperationCompleted = AddressOf Me.OnGISBInfoOperationCompleted
            End If
            Me.InvokeAsync("GISBInfo", New Object() {SessionID, CommID}, Me.GISBInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGISBInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GISBInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GISBInfoCompleted(Me, New GISBInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NowUTC", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NowUTC() As Date
            Dim results() As Object = Me.Invoke("NowUTC", New Object(-1) {})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NowUTCAsync()
            Me.NowUTCAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NowUTCAsync(ByVal userState As Object)
            If (Me.NowUTCOperationCompleted Is Nothing) Then
                Me.NowUTCOperationCompleted = AddressOf Me.OnNowUTCOperationCompleted
            End If
            Me.InvokeAsync("NowUTC", New Object(-1) {}, Me.NowUTCOperationCompleted, userState)
        End Sub
        
        Private Sub OnNowUTCOperationCompleted(ByVal arg As Object)
            If (Not (Me.NowUTCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NowUTCCompleted(Me, New NowUTCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeDate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeDate(ByVal InterchangeHeader As String) As Date
            Dim results() As Object = Me.Invoke("InterchangeDate", New Object() {InterchangeHeader})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeDateAsync(ByVal InterchangeHeader As String)
            Me.InterchangeDateAsync(InterchangeHeader, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeDateAsync(ByVal InterchangeHeader As String, ByVal userState As Object)
            If (Me.InterchangeDateOperationCompleted Is Nothing) Then
                Me.InterchangeDateOperationCompleted = AddressOf Me.OnInterchangeDateOperationCompleted
            End If
            Me.InvokeAsync("InterchangeDate", New Object() {InterchangeHeader}, Me.InterchangeDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeDateCompleted(Me, New InterchangeDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/Version", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Version() As String
            Dim results() As Object = Me.Invoke("Version", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VersionAsync()
            Me.VersionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VersionAsync(ByVal userState As Object)
            If (Me.VersionOperationCompleted Is Nothing) Then
                Me.VersionOperationCompleted = AddressOf Me.OnVersionOperationCompleted
            End If
            Me.InvokeAsync("Version", New Object(-1) {}, Me.VersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.VersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VersionCompleted(Me, New VersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/X400Format", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function X400Format( _
                    ByVal Country As String,  _
                    ByVal ADMD As String,  _
                    ByVal PRMD As String,  _
                    ByVal Organization As String,  _
                    ByVal OrganizationalUnit1 As String,  _
                    ByVal OrganizationalUnit2 As String,  _
                    ByVal OrganizationalUnit3 As String,  _
                    ByVal OrganizationalUnit4 As String,  _
                    ByVal Surname As String,  _
                    ByVal GivenName As String,  _
                    ByVal Initials As String,  _
                    ByVal Generation As String,  _
                    ByVal CommonName As String,  _
                    ByVal DDA As String,  _
                    ByVal X_121 As String,  _
                    ByVal N_ID As String,  _
                    ByVal T_TY As String,  _
                    ByVal T_ID As String) As String
            Dim results() As Object = Me.Invoke("X400Format", New Object() {Country, ADMD, PRMD, Organization, OrganizationalUnit1, OrganizationalUnit2, OrganizationalUnit3, OrganizationalUnit4, Surname, GivenName, Initials, Generation, CommonName, DDA, X_121, N_ID, T_TY, T_ID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub X400FormatAsync( _
                    ByVal Country As String,  _
                    ByVal ADMD As String,  _
                    ByVal PRMD As String,  _
                    ByVal Organization As String,  _
                    ByVal OrganizationalUnit1 As String,  _
                    ByVal OrganizationalUnit2 As String,  _
                    ByVal OrganizationalUnit3 As String,  _
                    ByVal OrganizationalUnit4 As String,  _
                    ByVal Surname As String,  _
                    ByVal GivenName As String,  _
                    ByVal Initials As String,  _
                    ByVal Generation As String,  _
                    ByVal CommonName As String,  _
                    ByVal DDA As String,  _
                    ByVal X_121 As String,  _
                    ByVal N_ID As String,  _
                    ByVal T_TY As String,  _
                    ByVal T_ID As String)
            Me.X400FormatAsync(Country, ADMD, PRMD, Organization, OrganizationalUnit1, OrganizationalUnit2, OrganizationalUnit3, OrganizationalUnit4, Surname, GivenName, Initials, Generation, CommonName, DDA, X_121, N_ID, T_TY, T_ID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub X400FormatAsync( _
                    ByVal Country As String,  _
                    ByVal ADMD As String,  _
                    ByVal PRMD As String,  _
                    ByVal Organization As String,  _
                    ByVal OrganizationalUnit1 As String,  _
                    ByVal OrganizationalUnit2 As String,  _
                    ByVal OrganizationalUnit3 As String,  _
                    ByVal OrganizationalUnit4 As String,  _
                    ByVal Surname As String,  _
                    ByVal GivenName As String,  _
                    ByVal Initials As String,  _
                    ByVal Generation As String,  _
                    ByVal CommonName As String,  _
                    ByVal DDA As String,  _
                    ByVal X_121 As String,  _
                    ByVal N_ID As String,  _
                    ByVal T_TY As String,  _
                    ByVal T_ID As String,  _
                    ByVal userState As Object)
            If (Me.X400FormatOperationCompleted Is Nothing) Then
                Me.X400FormatOperationCompleted = AddressOf Me.OnX400FormatOperationCompleted
            End If
            Me.InvokeAsync("X400Format", New Object() {Country, ADMD, PRMD, Organization, OrganizationalUnit1, OrganizationalUnit2, OrganizationalUnit3, OrganizationalUnit4, Surname, GivenName, Initials, Generation, CommonName, DDA, X_121, N_ID, T_TY, T_ID}, Me.X400FormatOperationCompleted, userState)
        End Sub
        
        Private Sub OnX400FormatOperationCompleted(ByVal arg As Object)
            If (Not (Me.X400FormatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent X400FormatCompleted(Me, New X400FormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/PricelistInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PricelistInfo(ByVal SessionID As String, ByVal PricelistID As Integer) As Pricelist
            Dim results() As Object = Me.Invoke("PricelistInfo", New Object() {SessionID, PricelistID})
            Return CType(results(0),Pricelist)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PricelistInfoAsync(ByVal SessionID As String, ByVal PricelistID As Integer)
            Me.PricelistInfoAsync(SessionID, PricelistID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PricelistInfoAsync(ByVal SessionID As String, ByVal PricelistID As Integer, ByVal userState As Object)
            If (Me.PricelistInfoOperationCompleted Is Nothing) Then
                Me.PricelistInfoOperationCompleted = AddressOf Me.OnPricelistInfoOperationCompleted
            End If
            Me.InvokeAsync("PricelistInfo", New Object() {SessionID, PricelistID}, Me.PricelistInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnPricelistInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.PricelistInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PricelistInfoCompleted(Me, New PricelistInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ContractAdd", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ContractAdd(ByVal SessionID As String, ByVal OwnerUserID As Integer, ByVal ContractNumber As String, ByVal CompanyName As String, ByVal BillingAddress As String, ByVal ContractDate As Date, ByVal EffectiveDate As Date, ByVal Expires As Date, ByVal RenewalDays As Short, ByVal OptionTerms As Short, ByVal AggregateNetworks As Boolean, ByVal AdministratorUserID As Integer, ByVal AccountingUserID As Integer, ByVal AccountingCCUserID As Integer, ByVal PONumber As String) As Contract
            Dim results() As Object = Me.Invoke("ContractAdd", New Object() {SessionID, OwnerUserID, ContractNumber, CompanyName, BillingAddress, ContractDate, EffectiveDate, Expires, RenewalDays, OptionTerms, AggregateNetworks, AdministratorUserID, AccountingUserID, AccountingCCUserID, PONumber})
            Return CType(results(0),Contract)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContractAddAsync(ByVal SessionID As String, ByVal OwnerUserID As Integer, ByVal ContractNumber As String, ByVal CompanyName As String, ByVal BillingAddress As String, ByVal ContractDate As Date, ByVal EffectiveDate As Date, ByVal Expires As Date, ByVal RenewalDays As Short, ByVal OptionTerms As Short, ByVal AggregateNetworks As Boolean, ByVal AdministratorUserID As Integer, ByVal AccountingUserID As Integer, ByVal AccountingCCUserID As Integer, ByVal PONumber As String)
            Me.ContractAddAsync(SessionID, OwnerUserID, ContractNumber, CompanyName, BillingAddress, ContractDate, EffectiveDate, Expires, RenewalDays, OptionTerms, AggregateNetworks, AdministratorUserID, AccountingUserID, AccountingCCUserID, PONumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContractAddAsync( _
                    ByVal SessionID As String,  _
                    ByVal OwnerUserID As Integer,  _
                    ByVal ContractNumber As String,  _
                    ByVal CompanyName As String,  _
                    ByVal BillingAddress As String,  _
                    ByVal ContractDate As Date,  _
                    ByVal EffectiveDate As Date,  _
                    ByVal Expires As Date,  _
                    ByVal RenewalDays As Short,  _
                    ByVal OptionTerms As Short,  _
                    ByVal AggregateNetworks As Boolean,  _
                    ByVal AdministratorUserID As Integer,  _
                    ByVal AccountingUserID As Integer,  _
                    ByVal AccountingCCUserID As Integer,  _
                    ByVal PONumber As String,  _
                    ByVal userState As Object)
            If (Me.ContractAddOperationCompleted Is Nothing) Then
                Me.ContractAddOperationCompleted = AddressOf Me.OnContractAddOperationCompleted
            End If
            Me.InvokeAsync("ContractAdd", New Object() {SessionID, OwnerUserID, ContractNumber, CompanyName, BillingAddress, ContractDate, EffectiveDate, Expires, RenewalDays, OptionTerms, AggregateNetworks, AdministratorUserID, AccountingUserID, AccountingCCUserID, PONumber}, Me.ContractAddOperationCompleted, userState)
        End Sub
        
        Private Sub OnContractAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContractAddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContractAddCompleted(Me, New ContractAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ContractList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ContractList(ByVal SessionID As String, ByVal ActiveDate As Date, ByVal ShowInactive As Boolean) As Contract()
            Dim results() As Object = Me.Invoke("ContractList", New Object() {SessionID, ActiveDate, ShowInactive})
            Return CType(results(0),Contract())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContractListAsync(ByVal SessionID As String, ByVal ActiveDate As Date, ByVal ShowInactive As Boolean)
            Me.ContractListAsync(SessionID, ActiveDate, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContractListAsync(ByVal SessionID As String, ByVal ActiveDate As Date, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.ContractListOperationCompleted Is Nothing) Then
                Me.ContractListOperationCompleted = AddressOf Me.OnContractListOperationCompleted
            End If
            Me.InvokeAsync("ContractList", New Object() {SessionID, ActiveDate, ShowInactive}, Me.ContractListOperationCompleted, userState)
        End Sub
        
        Private Sub OnContractListOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContractListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContractListCompleted(Me, New ContractListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ContractInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ContractInfo(ByVal SessionID As String, ByVal ContractID As Integer) As Contract
            Dim results() As Object = Me.Invoke("ContractInfo", New Object() {SessionID, ContractID})
            Return CType(results(0),Contract)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContractInfoAsync(ByVal SessionID As String, ByVal ContractID As Integer)
            Me.ContractInfoAsync(SessionID, ContractID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContractInfoAsync(ByVal SessionID As String, ByVal ContractID As Integer, ByVal userState As Object)
            If (Me.ContractInfoOperationCompleted Is Nothing) Then
                Me.ContractInfoOperationCompleted = AddressOf Me.OnContractInfoOperationCompleted
            End If
            Me.InvokeAsync("ContractInfo", New Object() {SessionID, ContractID}, Me.ContractInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnContractInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContractInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContractInfoCompleted(Me, New ContractInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InvoiceInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InvoiceInfo(ByVal SessionID As String, ByVal InvoiceID As Integer) As Invoice
            Dim results() As Object = Me.Invoke("InvoiceInfo", New Object() {SessionID, InvoiceID})
            Return CType(results(0),Invoice)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InvoiceInfoAsync(ByVal SessionID As String, ByVal InvoiceID As Integer)
            Me.InvoiceInfoAsync(SessionID, InvoiceID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InvoiceInfoAsync(ByVal SessionID As String, ByVal InvoiceID As Integer, ByVal userState As Object)
            If (Me.InvoiceInfoOperationCompleted Is Nothing) Then
                Me.InvoiceInfoOperationCompleted = AddressOf Me.OnInvoiceInfoOperationCompleted
            End If
            Me.InvokeAsync("InvoiceInfo", New Object() {SessionID, InvoiceID}, Me.InvoiceInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInvoiceInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.InvoiceInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InvoiceInfoCompleted(Me, New InvoiceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InvoiceCalculate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InvoiceCalculate(ByVal SessionID As String, ByVal ContractID As Integer, ByVal ReportingMonth As Date, ByVal Include As InvoiceInclude, ByVal InvoiceDate As Date, ByVal InvoiceNumber As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Notice As String, ByVal SpecialNotice As String, ByVal Message As String, ByVal Save As Boolean) As Invoice
            Dim results() As Object = Me.Invoke("InvoiceCalculate", New Object() {SessionID, ContractID, ReportingMonth, Include, InvoiceDate, InvoiceNumber, NetworkID, MailboxID, Notice, SpecialNotice, Message, Save})
            Return CType(results(0),Invoice)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InvoiceCalculateAsync(ByVal SessionID As String, ByVal ContractID As Integer, ByVal ReportingMonth As Date, ByVal Include As InvoiceInclude, ByVal InvoiceDate As Date, ByVal InvoiceNumber As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Notice As String, ByVal SpecialNotice As String, ByVal Message As String, ByVal Save As Boolean)
            Me.InvoiceCalculateAsync(SessionID, ContractID, ReportingMonth, Include, InvoiceDate, InvoiceNumber, NetworkID, MailboxID, Notice, SpecialNotice, Message, Save, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InvoiceCalculateAsync(ByVal SessionID As String, ByVal ContractID As Integer, ByVal ReportingMonth As Date, ByVal Include As InvoiceInclude, ByVal InvoiceDate As Date, ByVal InvoiceNumber As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Notice As String, ByVal SpecialNotice As String, ByVal Message As String, ByVal Save As Boolean, ByVal userState As Object)
            If (Me.InvoiceCalculateOperationCompleted Is Nothing) Then
                Me.InvoiceCalculateOperationCompleted = AddressOf Me.OnInvoiceCalculateOperationCompleted
            End If
            Me.InvokeAsync("InvoiceCalculate", New Object() {SessionID, ContractID, ReportingMonth, Include, InvoiceDate, InvoiceNumber, NetworkID, MailboxID, Notice, SpecialNotice, Message, Save}, Me.InvoiceCalculateOperationCompleted, userState)
        End Sub
        
        Private Sub OnInvoiceCalculateOperationCompleted(ByVal arg As Object)
            If (Not (Me.InvoiceCalculateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InvoiceCalculateCompleted(Me, New InvoiceCalculateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InvoiceCalculateLineItem", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InvoiceCalculateLineItem(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ReportingMonth As Date, ByVal AccountReport As PricelistAccountReports, ByVal MeasureField As PricelistMeasureField) As LineItem
            Dim results() As Object = Me.Invoke("InvoiceCalculateLineItem", New Object() {SessionID, NetworkID, MailboxID, ReportingMonth, AccountReport, MeasureField})
            Return CType(results(0),LineItem)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InvoiceCalculateLineItemAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ReportingMonth As Date, ByVal AccountReport As PricelistAccountReports, ByVal MeasureField As PricelistMeasureField)
            Me.InvoiceCalculateLineItemAsync(SessionID, NetworkID, MailboxID, ReportingMonth, AccountReport, MeasureField, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InvoiceCalculateLineItemAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ReportingMonth As Date, ByVal AccountReport As PricelistAccountReports, ByVal MeasureField As PricelistMeasureField, ByVal userState As Object)
            If (Me.InvoiceCalculateLineItemOperationCompleted Is Nothing) Then
                Me.InvoiceCalculateLineItemOperationCompleted = AddressOf Me.OnInvoiceCalculateLineItemOperationCompleted
            End If
            Me.InvokeAsync("InvoiceCalculateLineItem", New Object() {SessionID, NetworkID, MailboxID, ReportingMonth, AccountReport, MeasureField}, Me.InvoiceCalculateLineItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnInvoiceCalculateLineItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.InvoiceCalculateLineItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InvoiceCalculateLineItemCompleted(Me, New InvoiceCalculateLineItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InvoiceSetStatus", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InvoiceSetStatus(ByVal SessionID As String, ByVal InvoiceID As Integer, ByVal Status As InvoiceStatus) As Boolean
            Dim results() As Object = Me.Invoke("InvoiceSetStatus", New Object() {SessionID, InvoiceID, Status})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InvoiceSetStatusAsync(ByVal SessionID As String, ByVal InvoiceID As Integer, ByVal Status As InvoiceStatus)
            Me.InvoiceSetStatusAsync(SessionID, InvoiceID, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InvoiceSetStatusAsync(ByVal SessionID As String, ByVal InvoiceID As Integer, ByVal Status As InvoiceStatus, ByVal userState As Object)
            If (Me.InvoiceSetStatusOperationCompleted Is Nothing) Then
                Me.InvoiceSetStatusOperationCompleted = AddressOf Me.OnInvoiceSetStatusOperationCompleted
            End If
            Me.InvokeAsync("InvoiceSetStatus", New Object() {SessionID, InvoiceID, Status}, Me.InvoiceSetStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnInvoiceSetStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.InvoiceSetStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InvoiceSetStatusCompleted(Me, New InvoiceSetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InvoiceList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InvoiceList(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ContractID As Integer, ByVal Status As InvoiceStatus) As Invoice()
            Dim results() As Object = Me.Invoke("InvoiceList", New Object() {SessionID, BeginDate, EndDate, ContractID, Status})
            Return CType(results(0),Invoice())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InvoiceListAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ContractID As Integer, ByVal Status As InvoiceStatus)
            Me.InvoiceListAsync(SessionID, BeginDate, EndDate, ContractID, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InvoiceListAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ContractID As Integer, ByVal Status As InvoiceStatus, ByVal userState As Object)
            If (Me.InvoiceListOperationCompleted Is Nothing) Then
                Me.InvoiceListOperationCompleted = AddressOf Me.OnInvoiceListOperationCompleted
            End If
            Me.InvokeAsync("InvoiceList", New Object() {SessionID, BeginDate, EndDate, ContractID, Status}, Me.InvoiceListOperationCompleted, userState)
        End Sub
        
        Private Sub OnInvoiceListOperationCompleted(ByVal arg As Object)
            If (Not (Me.InvoiceListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InvoiceListCompleted(Me, New InvoiceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeInBoxEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeInBoxEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String) As InterchangeIDInfo()
            Dim results() As Object = Me.Invoke("InterchangeInBoxEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID})
            Return CType(results(0),InterchangeIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeInBoxExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String)
            Me.InterchangeInBoxExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeInBoxExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal userState As Object)
            If (Me.InterchangeInBoxExOperationCompleted Is Nothing) Then
                Me.InterchangeInBoxExOperationCompleted = AddressOf Me.OnInterchangeInBoxExOperationCompleted
            End If
            Me.InvokeAsync("InterchangeInBoxEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID}, Me.InterchangeInBoxExOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeInBoxExOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeInBoxExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeInBoxExCompleted(Me, New InterchangeInBoxExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeInBoxArchiveEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeInBoxArchiveEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short) As InterchangeIDInfoCollection
            Dim results() As Object = Me.Invoke("InterchangeInBoxArchiveEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage})
            Return CType(results(0),InterchangeIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeInBoxArchiveExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short)
            Me.InterchangeInBoxArchiveExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeInBoxArchiveExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short, ByVal userState As Object)
            If (Me.InterchangeInBoxArchiveExOperationCompleted Is Nothing) Then
                Me.InterchangeInBoxArchiveExOperationCompleted = AddressOf Me.OnInterchangeInBoxArchiveExOperationCompleted
            End If
            Me.InvokeAsync("InterchangeInBoxArchiveEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage}, Me.InterchangeInBoxArchiveExOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeInBoxArchiveExOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeInBoxArchiveExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeInBoxArchiveExCompleted(Me, New InterchangeInBoxArchiveExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeOutBox", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeOutBox(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String) As InterchangeIDInfo()
            Dim results() As Object = Me.Invoke("InterchangeOutBox", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID})
            Return CType(results(0),InterchangeIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String)
            Me.InterchangeOutBoxAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal userState As Object)
            If (Me.InterchangeOutBoxOperationCompleted Is Nothing) Then
                Me.InterchangeOutBoxOperationCompleted = AddressOf Me.OnInterchangeOutBoxOperationCompleted
            End If
            Me.InvokeAsync("InterchangeOutBox", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID}, Me.InterchangeOutBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeOutBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeOutBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeOutBoxCompleted(Me, New InterchangeOutBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeOutBoxArchive", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeOutBoxArchive(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short) As InterchangeIDInfoCollection
            Dim results() As Object = Me.Invoke("InterchangeOutBoxArchive", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage})
            Return CType(results(0),InterchangeIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxArchiveAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short)
            Me.InterchangeOutBoxArchiveAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxArchiveAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short, ByVal userState As Object)
            If (Me.InterchangeOutBoxArchiveOperationCompleted Is Nothing) Then
                Me.InterchangeOutBoxArchiveOperationCompleted = AddressOf Me.OnInterchangeOutBoxArchiveOperationCompleted
            End If
            Me.InvokeAsync("InterchangeOutBoxArchive", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage}, Me.InterchangeOutBoxArchiveOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeOutBoxArchiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeOutBoxArchiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeOutBoxArchiveCompleted(Me, New InterchangeOutBoxArchiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeOutBoxEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeOutBoxEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String) As InterchangeIDInfo()
            Dim results() As Object = Me.Invoke("InterchangeOutBoxEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID})
            Return CType(results(0),InterchangeIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String)
            Me.InterchangeOutBoxExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal userState As Object)
            If (Me.InterchangeOutBoxExOperationCompleted Is Nothing) Then
                Me.InterchangeOutBoxExOperationCompleted = AddressOf Me.OnInterchangeOutBoxExOperationCompleted
            End If
            Me.InvokeAsync("InterchangeOutBoxEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID}, Me.InterchangeOutBoxExOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeOutBoxExOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeOutBoxExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeOutBoxExCompleted(Me, New InterchangeOutBoxExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeOutBoxArchiveEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeOutBoxArchiveEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short) As InterchangeIDInfoCollection
            Dim results() As Object = Me.Invoke("InterchangeOutBoxArchiveEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage})
            Return CType(results(0),InterchangeIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxArchiveExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short)
            Me.InterchangeOutBoxArchiveExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxArchiveExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short, ByVal userState As Object)
            If (Me.InterchangeOutBoxArchiveExOperationCompleted Is Nothing) Then
                Me.InterchangeOutBoxArchiveExOperationCompleted = AddressOf Me.OnInterchangeOutBoxArchiveExOperationCompleted
            End If
            Me.InvokeAsync("InterchangeOutBoxArchiveEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage}, Me.InterchangeOutBoxArchiveExOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeOutBoxArchiveExOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeOutBoxArchiveExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeOutBoxArchiveExCompleted(Me, New InterchangeOutBoxArchiveExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeOutBoxPending", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeOutBoxPending(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer) As InterchangeIDInfo()
            Dim results() As Object = Me.Invoke("InterchangeOutBoxPending", New Object() {SessionID, ECGridIDFrom, ECGridIDTo})
            Return CType(results(0),InterchangeIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxPendingAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer)
            Me.InterchangeOutBoxPendingAsync(SessionID, ECGridIDFrom, ECGridIDTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxPendingAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal userState As Object)
            If (Me.InterchangeOutBoxPendingOperationCompleted Is Nothing) Then
                Me.InterchangeOutBoxPendingOperationCompleted = AddressOf Me.OnInterchangeOutBoxPendingOperationCompleted
            End If
            Me.InvokeAsync("InterchangeOutBoxPending", New Object() {SessionID, ECGridIDFrom, ECGridIDTo}, Me.InterchangeOutBoxPendingOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeOutBoxPendingOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeOutBoxPendingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeOutBoxPendingCompleted(Me, New InterchangeOutBoxPendingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeOutBoxPendingEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeOutBoxPendingEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer) As InterchangeIDInfo()
            Dim results() As Object = Me.Invoke("InterchangeOutBoxPendingEx", New Object() {SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo})
            Return CType(results(0),InterchangeIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxPendingExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer)
            Me.InterchangeOutBoxPendingExAsync(SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxPendingExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal userState As Object)
            If (Me.InterchangeOutBoxPendingExOperationCompleted Is Nothing) Then
                Me.InterchangeOutBoxPendingExOperationCompleted = AddressOf Me.OnInterchangeOutBoxPendingExOperationCompleted
            End If
            Me.InvokeAsync("InterchangeOutBoxPendingEx", New Object() {SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo}, Me.InterchangeOutBoxPendingExOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeOutBoxPendingExOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeOutBoxPendingExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeOutBoxPendingExCompleted(Me, New InterchangeOutBoxPendingExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeInBoxPending", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeInBoxPending(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer) As InterchangeIDInfo()
            Dim results() As Object = Me.Invoke("InterchangeInBoxPending", New Object() {SessionID, ECGridIDFrom, ECGridIDTo})
            Return CType(results(0),InterchangeIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeInBoxPendingAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer)
            Me.InterchangeInBoxPendingAsync(SessionID, ECGridIDFrom, ECGridIDTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeInBoxPendingAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal userState As Object)
            If (Me.InterchangeInBoxPendingOperationCompleted Is Nothing) Then
                Me.InterchangeInBoxPendingOperationCompleted = AddressOf Me.OnInterchangeInBoxPendingOperationCompleted
            End If
            Me.InvokeAsync("InterchangeInBoxPending", New Object() {SessionID, ECGridIDFrom, ECGridIDTo}, Me.InterchangeInBoxPendingOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeInBoxPendingOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeInBoxPendingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeInBoxPendingCompleted(Me, New InterchangeInBoxPendingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeInBoxPendingEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeInBoxPendingEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer) As InterchangeIDInfo()
            Dim results() As Object = Me.Invoke("InterchangeInBoxPendingEx", New Object() {SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo})
            Return CType(results(0),InterchangeIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeInBoxPendingExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer)
            Me.InterchangeInBoxPendingExAsync(SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeInBoxPendingExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal userState As Object)
            If (Me.InterchangeInBoxPendingExOperationCompleted Is Nothing) Then
                Me.InterchangeInBoxPendingExOperationCompleted = AddressOf Me.OnInterchangeInBoxPendingExOperationCompleted
            End If
            Me.InvokeAsync("InterchangeInBoxPendingEx", New Object() {SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo}, Me.InterchangeInBoxPendingExOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeInBoxPendingExOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeInBoxPendingExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeInBoxPendingExCompleted(Me, New InterchangeInBoxPendingExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeHeaderInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeHeaderInfo(ByVal SessionID As String, ByVal InterchangeHeader As String) As InterchangeIDInfo
            Dim results() As Object = Me.Invoke("InterchangeHeaderInfo", New Object() {SessionID, InterchangeHeader})
            Return CType(results(0),InterchangeIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeHeaderInfoAsync(ByVal SessionID As String, ByVal InterchangeHeader As String)
            Me.InterchangeHeaderInfoAsync(SessionID, InterchangeHeader, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeHeaderInfoAsync(ByVal SessionID As String, ByVal InterchangeHeader As String, ByVal userState As Object)
            If (Me.InterchangeHeaderInfoOperationCompleted Is Nothing) Then
                Me.InterchangeHeaderInfoOperationCompleted = AddressOf Me.OnInterchangeHeaderInfoOperationCompleted
            End If
            Me.InvokeAsync("InterchangeHeaderInfo", New Object() {SessionID, InterchangeHeader}, Me.InterchangeHeaderInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeHeaderInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeHeaderInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeHeaderInfoCompleted(Me, New InterchangeHeaderInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeHeaderInfoB", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeHeaderInfoB(ByVal SessionID As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal InterchangeHeader() As Byte) As InterchangeIDInfo
            Dim results() As Object = Me.Invoke("InterchangeHeaderInfoB", New Object() {SessionID, InterchangeHeader})
            Return CType(results(0),InterchangeIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeHeaderInfoBAsync(ByVal SessionID As String, ByVal InterchangeHeader() As Byte)
            Me.InterchangeHeaderInfoBAsync(SessionID, InterchangeHeader, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeHeaderInfoBAsync(ByVal SessionID As String, ByVal InterchangeHeader() As Byte, ByVal userState As Object)
            If (Me.InterchangeHeaderInfoBOperationCompleted Is Nothing) Then
                Me.InterchangeHeaderInfoBOperationCompleted = AddressOf Me.OnInterchangeHeaderInfoBOperationCompleted
            End If
            Me.InvokeAsync("InterchangeHeaderInfoB", New Object() {SessionID, InterchangeHeader}, Me.InterchangeHeaderInfoBOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeHeaderInfoBOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeHeaderInfoBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeHeaderInfoBCompleted(Me, New InterchangeHeaderInfoBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeOutBoxNoRoute", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeOutBoxNoRoute(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer) As InterchangeIDInfo()
            Dim results() As Object = Me.Invoke("InterchangeOutBoxNoRoute", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo})
            Return CType(results(0),InterchangeIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxNoRouteAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer)
            Me.InterchangeOutBoxNoRouteAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxNoRouteAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal userState As Object)
            If (Me.InterchangeOutBoxNoRouteOperationCompleted Is Nothing) Then
                Me.InterchangeOutBoxNoRouteOperationCompleted = AddressOf Me.OnInterchangeOutBoxNoRouteOperationCompleted
            End If
            Me.InvokeAsync("InterchangeOutBoxNoRoute", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo}, Me.InterchangeOutBoxNoRouteOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeOutBoxNoRouteOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeOutBoxNoRouteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeOutBoxNoRouteCompleted(Me, New InterchangeOutBoxNoRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeOutBoxNoRouteEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeOutBoxNoRouteEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer) As InterchangeIDInfo()
            Dim results() As Object = Me.Invoke("InterchangeOutBoxNoRouteEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo})
            Return CType(results(0),InterchangeIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxNoRouteExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer)
            Me.InterchangeOutBoxNoRouteExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeOutBoxNoRouteExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal userState As Object)
            If (Me.InterchangeOutBoxNoRouteExOperationCompleted Is Nothing) Then
                Me.InterchangeOutBoxNoRouteExOperationCompleted = AddressOf Me.OnInterchangeOutBoxNoRouteExOperationCompleted
            End If
            Me.InvokeAsync("InterchangeOutBoxNoRouteEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo}, Me.InterchangeOutBoxNoRouteExOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeOutBoxNoRouteExOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeOutBoxNoRouteExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeOutBoxNoRouteExCompleted(Me, New InterchangeOutBoxNoRouteExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeResend", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeResend(ByVal SessionID As String, ByVal InterchangeID As Long) As Boolean
            Dim results() As Object = Me.Invoke("InterchangeResend", New Object() {SessionID, InterchangeID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeResendAsync(ByVal SessionID As String, ByVal InterchangeID As Long)
            Me.InterchangeResendAsync(SessionID, InterchangeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeResendAsync(ByVal SessionID As String, ByVal InterchangeID As Long, ByVal userState As Object)
            If (Me.InterchangeResendOperationCompleted Is Nothing) Then
                Me.InterchangeResendOperationCompleted = AddressOf Me.OnInterchangeResendOperationCompleted
            End If
            Me.InvokeAsync("InterchangeResend", New Object() {SessionID, InterchangeID}, Me.InterchangeResendOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeResendOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeResendCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeResendCompleted(Me, New InterchangeResendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeCancel", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeCancel(ByVal SessionID As String, ByVal InterchangeID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("InterchangeCancel", New Object() {SessionID, InterchangeID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeCancelAsync(ByVal SessionID As String, ByVal InterchangeID As Integer)
            Me.InterchangeCancelAsync(SessionID, InterchangeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeCancelAsync(ByVal SessionID As String, ByVal InterchangeID As Integer, ByVal userState As Object)
            If (Me.InterchangeCancelOperationCompleted Is Nothing) Then
                Me.InterchangeCancelOperationCompleted = AddressOf Me.OnInterchangeCancelOperationCompleted
            End If
            Me.InvokeAsync("InterchangeCancel", New Object() {SessionID, InterchangeID}, Me.InterchangeCancelOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeCancelOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeCancelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeCancelCompleted(Me, New InterchangeCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CallBackEventInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallBackEventInfo(ByVal SessionID As String, ByVal CallBackEventID As Integer, ByVal QueueCount As Short) As CallBackEventIDInfo
            Dim results() As Object = Me.Invoke("CallBackEventInfo", New Object() {SessionID, CallBackEventID, QueueCount})
            Return CType(results(0),CallBackEventIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallBackEventInfoAsync(ByVal SessionID As String, ByVal CallBackEventID As Integer, ByVal QueueCount As Short)
            Me.CallBackEventInfoAsync(SessionID, CallBackEventID, QueueCount, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallBackEventInfoAsync(ByVal SessionID As String, ByVal CallBackEventID As Integer, ByVal QueueCount As Short, ByVal userState As Object)
            If (Me.CallBackEventInfoOperationCompleted Is Nothing) Then
                Me.CallBackEventInfoOperationCompleted = AddressOf Me.OnCallBackEventInfoOperationCompleted
            End If
            Me.InvokeAsync("CallBackEventInfo", New Object() {SessionID, CallBackEventID, QueueCount}, Me.CallBackEventInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallBackEventInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallBackEventInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallBackEventInfoCompleted(Me, New CallBackEventInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CallBackEventListEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallBackEventListEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ShowInactive As Boolean) As CallBackEventIDInfo()
            Dim results() As Object = Me.Invoke("CallBackEventListEx", New Object() {SessionID, NetworkID, MailboxID, ShowInactive})
            Return CType(results(0),CallBackEventIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallBackEventListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ShowInactive As Boolean)
            Me.CallBackEventListExAsync(SessionID, NetworkID, MailboxID, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallBackEventListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.CallBackEventListExOperationCompleted Is Nothing) Then
                Me.CallBackEventListExOperationCompleted = AddressOf Me.OnCallBackEventListExOperationCompleted
            End If
            Me.InvokeAsync("CallBackEventListEx", New Object() {SessionID, NetworkID, MailboxID, ShowInactive}, Me.CallBackEventListExOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallBackEventListExOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallBackEventListExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallBackEventListExCompleted(Me, New CallBackEventListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CallBackAddEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallBackAddEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal UserID As Integer, ByVal SystemObject As Objects, ByVal ObjectStatus As Short, ByVal Direction As Direction, ByVal Frequency As Short, ByVal MaxRetries As Short, ByVal URL As String, ByVal HTTPAuthentication As HTTPAuthType, ByVal HTTPUser As String, ByVal HTTPPassword As String, ByVal Status As Status) As CallBackEventIDInfo
            Dim results() As Object = Me.Invoke("CallBackAddEx", New Object() {SessionID, NetworkID, MailboxID, UserID, SystemObject, ObjectStatus, Direction, Frequency, MaxRetries, URL, HTTPAuthentication, HTTPUser, HTTPPassword, Status})
            Return CType(results(0),CallBackEventIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallBackAddExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal UserID As Integer, ByVal SystemObject As Objects, ByVal ObjectStatus As Short, ByVal Direction As Direction, ByVal Frequency As Short, ByVal MaxRetries As Short, ByVal URL As String, ByVal HTTPAuthentication As HTTPAuthType, ByVal HTTPUser As String, ByVal HTTPPassword As String, ByVal Status As Status)
            Me.CallBackAddExAsync(SessionID, NetworkID, MailboxID, UserID, SystemObject, ObjectStatus, Direction, Frequency, MaxRetries, URL, HTTPAuthentication, HTTPUser, HTTPPassword, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallBackAddExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal UserID As Integer, ByVal SystemObject As Objects, ByVal ObjectStatus As Short, ByVal Direction As Direction, ByVal Frequency As Short, ByVal MaxRetries As Short, ByVal URL As String, ByVal HTTPAuthentication As HTTPAuthType, ByVal HTTPUser As String, ByVal HTTPPassword As String, ByVal Status As Status, ByVal userState As Object)
            If (Me.CallBackAddExOperationCompleted Is Nothing) Then
                Me.CallBackAddExOperationCompleted = AddressOf Me.OnCallBackAddExOperationCompleted
            End If
            Me.InvokeAsync("CallBackAddEx", New Object() {SessionID, NetworkID, MailboxID, UserID, SystemObject, ObjectStatus, Direction, Frequency, MaxRetries, URL, HTTPAuthentication, HTTPUser, HTTPPassword, Status}, Me.CallBackAddExOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallBackAddExOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallBackAddExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallBackAddExCompleted(Me, New CallBackAddExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CallBackQueueInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallBackQueueInfo(ByVal SessionID As String, ByVal CallBackQueueID As Integer) As CallBackQueueIDInfo
            Dim results() As Object = Me.Invoke("CallBackQueueInfo", New Object() {SessionID, CallBackQueueID})
            Return CType(results(0),CallBackQueueIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallBackQueueInfoAsync(ByVal SessionID As String, ByVal CallBackQueueID As Integer)
            Me.CallBackQueueInfoAsync(SessionID, CallBackQueueID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallBackQueueInfoAsync(ByVal SessionID As String, ByVal CallBackQueueID As Integer, ByVal userState As Object)
            If (Me.CallBackQueueInfoOperationCompleted Is Nothing) Then
                Me.CallBackQueueInfoOperationCompleted = AddressOf Me.OnCallBackQueueInfoOperationCompleted
            End If
            Me.InvokeAsync("CallBackQueueInfo", New Object() {SessionID, CallBackQueueID}, Me.CallBackQueueInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallBackQueueInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallBackQueueInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallBackQueueInfoCompleted(Me, New CallBackQueueInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CallBackTest", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallBackTest(ByVal SessionID As String, ByVal CallBackEventID As Integer, ByVal ParcelID As Integer, ByVal InterchangeID As Integer, ByVal UserID As Integer) As CallBackQueueIDInfo
            Dim results() As Object = Me.Invoke("CallBackTest", New Object() {SessionID, CallBackEventID, ParcelID, InterchangeID, UserID})
            Return CType(results(0),CallBackQueueIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallBackTestAsync(ByVal SessionID As String, ByVal CallBackEventID As Integer, ByVal ParcelID As Integer, ByVal InterchangeID As Integer, ByVal UserID As Integer)
            Me.CallBackTestAsync(SessionID, CallBackEventID, ParcelID, InterchangeID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallBackTestAsync(ByVal SessionID As String, ByVal CallBackEventID As Integer, ByVal ParcelID As Integer, ByVal InterchangeID As Integer, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.CallBackTestOperationCompleted Is Nothing) Then
                Me.CallBackTestOperationCompleted = AddressOf Me.OnCallBackTestOperationCompleted
            End If
            Me.InvokeAsync("CallBackTest", New Object() {SessionID, CallBackEventID, ParcelID, InterchangeID, UserID}, Me.CallBackTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallBackTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallBackTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallBackTestCompleted(Me, New CallBackTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CallBackInvoke", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallBackInvoke(ByVal SessionID As String, ByVal CallBackQueueID As Integer) As CallBackQueueIDInfo
            Dim results() As Object = Me.Invoke("CallBackInvoke", New Object() {SessionID, CallBackQueueID})
            Return CType(results(0),CallBackQueueIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallBackInvokeAsync(ByVal SessionID As String, ByVal CallBackQueueID As Integer)
            Me.CallBackInvokeAsync(SessionID, CallBackQueueID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallBackInvokeAsync(ByVal SessionID As String, ByVal CallBackQueueID As Integer, ByVal userState As Object)
            If (Me.CallBackInvokeOperationCompleted Is Nothing) Then
                Me.CallBackInvokeOperationCompleted = AddressOf Me.OnCallBackInvokeOperationCompleted
            End If
            Me.InvokeAsync("CallBackInvoke", New Object() {SessionID, CallBackQueueID}, Me.CallBackInvokeOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallBackInvokeOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallBackInvokeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallBackInvokeCompleted(Me, New CallBackInvokeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CallBackPendingList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallBackPendingList(ByVal SessionID As String) As CallBackQueueIDInfo()
            Dim results() As Object = Me.Invoke("CallBackPendingList", New Object() {SessionID})
            Return CType(results(0),CallBackQueueIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallBackPendingListAsync(ByVal SessionID As String)
            Me.CallBackPendingListAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallBackPendingListAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.CallBackPendingListOperationCompleted Is Nothing) Then
                Me.CallBackPendingListOperationCompleted = AddressOf Me.OnCallBackPendingListOperationCompleted
            End If
            Me.InvokeAsync("CallBackPendingList", New Object() {SessionID}, Me.CallBackPendingListOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallBackPendingListOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallBackPendingListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallBackPendingListCompleted(Me, New CallBackPendingListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CallBackPendingListEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallBackPendingListEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer) As CallBackQueueIDInfo()
            Dim results() As Object = Me.Invoke("CallBackPendingListEx", New Object() {SessionID, NetworkID, MailboxID})
            Return CType(results(0),CallBackQueueIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallBackPendingListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer)
            Me.CallBackPendingListExAsync(SessionID, NetworkID, MailboxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallBackPendingListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal userState As Object)
            If (Me.CallBackPendingListExOperationCompleted Is Nothing) Then
                Me.CallBackPendingListExOperationCompleted = AddressOf Me.OnCallBackPendingListExOperationCompleted
            End If
            Me.InvokeAsync("CallBackPendingListEx", New Object() {SessionID, NetworkID, MailboxID}, Me.CallBackPendingListExOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallBackPendingListExOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallBackPendingListExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallBackPendingListExCompleted(Me, New CallBackPendingListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CallBackFailedList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallBackFailedList(ByVal SessionID As String, ByVal MaxDays As Short) As CallBackQueueIDInfo()
            Dim results() As Object = Me.Invoke("CallBackFailedList", New Object() {SessionID, MaxDays})
            Return CType(results(0),CallBackQueueIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallBackFailedListAsync(ByVal SessionID As String, ByVal MaxDays As Short)
            Me.CallBackFailedListAsync(SessionID, MaxDays, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallBackFailedListAsync(ByVal SessionID As String, ByVal MaxDays As Short, ByVal userState As Object)
            If (Me.CallBackFailedListOperationCompleted Is Nothing) Then
                Me.CallBackFailedListOperationCompleted = AddressOf Me.OnCallBackFailedListOperationCompleted
            End If
            Me.InvokeAsync("CallBackFailedList", New Object() {SessionID, MaxDays}, Me.CallBackFailedListOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallBackFailedListOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallBackFailedListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallBackFailedListCompleted(Me, New CallBackFailedListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CallBackFailedListEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallBackFailedListEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal MaxDays As Short) As CallBackQueueIDInfo()
            Dim results() As Object = Me.Invoke("CallBackFailedListEx", New Object() {SessionID, NetworkID, MailboxID, MaxDays})
            Return CType(results(0),CallBackQueueIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallBackFailedListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal MaxDays As Short)
            Me.CallBackFailedListExAsync(SessionID, NetworkID, MailboxID, MaxDays, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallBackFailedListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal MaxDays As Short, ByVal userState As Object)
            If (Me.CallBackFailedListExOperationCompleted Is Nothing) Then
                Me.CallBackFailedListExOperationCompleted = AddressOf Me.OnCallBackFailedListExOperationCompleted
            End If
            Me.InvokeAsync("CallBackFailedListEx", New Object() {SessionID, NetworkID, MailboxID, MaxDays}, Me.CallBackFailedListExOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallBackFailedListExOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallBackFailedListExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallBackFailedListExCompleted(Me, New CallBackFailedListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ReportMonthly", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReportMonthly(ByVal SessionID As String, ByVal Report As Short, ByVal Month As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReportMonthly", New Object() {SessionID, Report, Month})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReportMonthlyAsync(ByVal SessionID As String, ByVal Report As Short, ByVal Month As Date)
            Me.ReportMonthlyAsync(SessionID, Report, Month, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReportMonthlyAsync(ByVal SessionID As String, ByVal Report As Short, ByVal Month As Date, ByVal userState As Object)
            If (Me.ReportMonthlyOperationCompleted Is Nothing) Then
                Me.ReportMonthlyOperationCompleted = AddressOf Me.OnReportMonthlyOperationCompleted
            End If
            Me.InvokeAsync("ReportMonthly", New Object() {SessionID, Report, Month}, Me.ReportMonthlyOperationCompleted, userState)
        End Sub
        
        Private Sub OnReportMonthlyOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReportMonthlyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReportMonthlyCompleted(Me, New ReportMonthlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ReportMonthlyEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReportMonthlyEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Report As Short, ByVal Month As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReportMonthlyEx", New Object() {SessionID, NetworkID, MailboxID, Report, Month})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReportMonthlyExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Report As Short, ByVal Month As Date)
            Me.ReportMonthlyExAsync(SessionID, NetworkID, MailboxID, Report, Month, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReportMonthlyExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Report As Short, ByVal Month As Date, ByVal userState As Object)
            If (Me.ReportMonthlyExOperationCompleted Is Nothing) Then
                Me.ReportMonthlyExOperationCompleted = AddressOf Me.OnReportMonthlyExOperationCompleted
            End If
            Me.InvokeAsync("ReportMonthlyEx", New Object() {SessionID, NetworkID, MailboxID, Report, Month}, Me.ReportMonthlyExOperationCompleted, userState)
        End Sub
        
        Private Sub OnReportMonthlyExOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReportMonthlyExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReportMonthlyExCompleted(Me, New ReportMonthlyExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ReportTrafficStats", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReportTrafficStats(ByVal SessionID As String, ByVal TargetTime As Date, ByVal NumPeriods As Short, ByVal Period As StatisticsPeriod) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReportTrafficStats", New Object() {SessionID, TargetTime, NumPeriods, Period})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReportTrafficStatsAsync(ByVal SessionID As String, ByVal TargetTime As Date, ByVal NumPeriods As Short, ByVal Period As StatisticsPeriod)
            Me.ReportTrafficStatsAsync(SessionID, TargetTime, NumPeriods, Period, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReportTrafficStatsAsync(ByVal SessionID As String, ByVal TargetTime As Date, ByVal NumPeriods As Short, ByVal Period As StatisticsPeriod, ByVal userState As Object)
            If (Me.ReportTrafficStatsOperationCompleted Is Nothing) Then
                Me.ReportTrafficStatsOperationCompleted = AddressOf Me.OnReportTrafficStatsOperationCompleted
            End If
            Me.InvokeAsync("ReportTrafficStats", New Object() {SessionID, TargetTime, NumPeriods, Period}, Me.ReportTrafficStatsOperationCompleted, userState)
        End Sub
        
        Private Sub OnReportTrafficStatsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReportTrafficStatsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReportTrafficStatsCompleted(Me, New ReportTrafficStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ReportTrafficStatsEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReportTrafficStatsEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal TargetTime As Date, ByVal NumPeriods As Short, ByVal Period As StatisticsPeriod) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReportTrafficStatsEx", New Object() {SessionID, NetworkID, MailboxID, TargetTime, NumPeriods, Period})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReportTrafficStatsExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal TargetTime As Date, ByVal NumPeriods As Short, ByVal Period As StatisticsPeriod)
            Me.ReportTrafficStatsExAsync(SessionID, NetworkID, MailboxID, TargetTime, NumPeriods, Period, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReportTrafficStatsExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal TargetTime As Date, ByVal NumPeriods As Short, ByVal Period As StatisticsPeriod, ByVal userState As Object)
            If (Me.ReportTrafficStatsExOperationCompleted Is Nothing) Then
                Me.ReportTrafficStatsExOperationCompleted = AddressOf Me.OnReportTrafficStatsExOperationCompleted
            End If
            Me.InvokeAsync("ReportTrafficStatsEx", New Object() {SessionID, NetworkID, MailboxID, TargetTime, NumPeriods, Period}, Me.ReportTrafficStatsExOperationCompleted, userState)
        End Sub
        
        Private Sub OnReportTrafficStatsExOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReportTrafficStatsExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReportTrafficStatsExCompleted(Me, New ReportTrafficStatsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ReportTrafficStatsPublic", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReportTrafficStatsPublic() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReportTrafficStatsPublic", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReportTrafficStatsPublicAsync()
            Me.ReportTrafficStatsPublicAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReportTrafficStatsPublicAsync(ByVal userState As Object)
            If (Me.ReportTrafficStatsPublicOperationCompleted Is Nothing) Then
                Me.ReportTrafficStatsPublicOperationCompleted = AddressOf Me.OnReportTrafficStatsPublicOperationCompleted
            End If
            Me.InvokeAsync("ReportTrafficStatsPublic", New Object(-1) {}, Me.ReportTrafficStatsPublicOperationCompleted, userState)
        End Sub
        
        Private Sub OnReportTrafficStatsPublicOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReportTrafficStatsPublicCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReportTrafficStatsPublicCompleted(Me, New ReportTrafficStatsPublicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ReportInstantStats", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReportInstantStats(ByVal SessionID As String, ByVal Minutes1 As Short, ByVal Minutes2 As Short) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReportInstantStats", New Object() {SessionID, Minutes1, Minutes2})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReportInstantStatsAsync(ByVal SessionID As String, ByVal Minutes1 As Short, ByVal Minutes2 As Short)
            Me.ReportInstantStatsAsync(SessionID, Minutes1, Minutes2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReportInstantStatsAsync(ByVal SessionID As String, ByVal Minutes1 As Short, ByVal Minutes2 As Short, ByVal userState As Object)
            If (Me.ReportInstantStatsOperationCompleted Is Nothing) Then
                Me.ReportInstantStatsOperationCompleted = AddressOf Me.OnReportInstantStatsOperationCompleted
            End If
            Me.InvokeAsync("ReportInstantStats", New Object() {SessionID, Minutes1, Minutes2}, Me.ReportInstantStatsOperationCompleted, userState)
        End Sub
        
        Private Sub OnReportInstantStatsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReportInstantStatsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReportInstantStatsCompleted(Me, New ReportInstantStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ReportInstantStatsEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReportInstantStatsEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridID As Integer, ByVal Minutes1 As Short, ByVal Minutes2 As Short) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("ReportInstantStatsEx", New Object() {SessionID, NetworkID, MailboxID, ECGridID, Minutes1, Minutes2})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReportInstantStatsExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridID As Integer, ByVal Minutes1 As Short, ByVal Minutes2 As Short)
            Me.ReportInstantStatsExAsync(SessionID, NetworkID, MailboxID, ECGridID, Minutes1, Minutes2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReportInstantStatsExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridID As Integer, ByVal Minutes1 As Short, ByVal Minutes2 As Short, ByVal userState As Object)
            If (Me.ReportInstantStatsExOperationCompleted Is Nothing) Then
                Me.ReportInstantStatsExOperationCompleted = AddressOf Me.OnReportInstantStatsExOperationCompleted
            End If
            Me.InvokeAsync("ReportInstantStatsEx", New Object() {SessionID, NetworkID, MailboxID, ECGridID, Minutes1, Minutes2}, Me.ReportInstantStatsExOperationCompleted, userState)
        End Sub
        
        Private Sub OnReportInstantStatsExOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReportInstantStatsExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReportInstantStatsExCompleted(Me, New ReportInstantStatsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2Add", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2Add( _
                    ByVal SessionID As String,  _
                    ByVal NetworkID As Integer,  _
                    ByVal MailboxID As Integer,  _
                    ByVal OwnerUserID As Integer,  _
                    ByVal ECGridHosted As Boolean,  _
                    ByVal AS2Identifier As String,  _
                    ByVal URL As String,  _
                    ByVal SignData As Boolean,  _
                    ByVal EncryptData As Boolean,  _
                    ByVal CompressData As Boolean,  _
                    ByVal ReceiptType As ReceiptType,  _
                    ByVal HTTPAuthentication As HTTPAuthType,  _
                    ByVal HTTPUser As String,  _
                    ByVal HTTPPassword As String,  _
                    ByVal UseType As UseType,  _
                    ByVal BeginUsage As Date,  _
                    ByVal EndUsage As Date,  _
                    ByVal Status As Status) As as2CommInfo
            Dim results() As Object = Me.Invoke("AS2Add", New Object() {SessionID, NetworkID, MailboxID, OwnerUserID, ECGridHosted, AS2Identifier, URL, SignData, EncryptData, CompressData, ReceiptType, HTTPAuthentication, HTTPUser, HTTPPassword, UseType, BeginUsage, EndUsage, Status})
            Return CType(results(0),as2CommInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2AddAsync( _
                    ByVal SessionID As String,  _
                    ByVal NetworkID As Integer,  _
                    ByVal MailboxID As Integer,  _
                    ByVal OwnerUserID As Integer,  _
                    ByVal ECGridHosted As Boolean,  _
                    ByVal AS2Identifier As String,  _
                    ByVal URL As String,  _
                    ByVal SignData As Boolean,  _
                    ByVal EncryptData As Boolean,  _
                    ByVal CompressData As Boolean,  _
                    ByVal ReceiptType As ReceiptType,  _
                    ByVal HTTPAuthentication As HTTPAuthType,  _
                    ByVal HTTPUser As String,  _
                    ByVal HTTPPassword As String,  _
                    ByVal UseType As UseType,  _
                    ByVal BeginUsage As Date,  _
                    ByVal EndUsage As Date,  _
                    ByVal Status As Status)
            Me.AS2AddAsync(SessionID, NetworkID, MailboxID, OwnerUserID, ECGridHosted, AS2Identifier, URL, SignData, EncryptData, CompressData, ReceiptType, HTTPAuthentication, HTTPUser, HTTPPassword, UseType, BeginUsage, EndUsage, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2AddAsync( _
                    ByVal SessionID As String,  _
                    ByVal NetworkID As Integer,  _
                    ByVal MailboxID As Integer,  _
                    ByVal OwnerUserID As Integer,  _
                    ByVal ECGridHosted As Boolean,  _
                    ByVal AS2Identifier As String,  _
                    ByVal URL As String,  _
                    ByVal SignData As Boolean,  _
                    ByVal EncryptData As Boolean,  _
                    ByVal CompressData As Boolean,  _
                    ByVal ReceiptType As ReceiptType,  _
                    ByVal HTTPAuthentication As HTTPAuthType,  _
                    ByVal HTTPUser As String,  _
                    ByVal HTTPPassword As String,  _
                    ByVal UseType As UseType,  _
                    ByVal BeginUsage As Date,  _
                    ByVal EndUsage As Date,  _
                    ByVal Status As Status,  _
                    ByVal userState As Object)
            If (Me.AS2AddOperationCompleted Is Nothing) Then
                Me.AS2AddOperationCompleted = AddressOf Me.OnAS2AddOperationCompleted
            End If
            Me.InvokeAsync("AS2Add", New Object() {SessionID, NetworkID, MailboxID, OwnerUserID, ECGridHosted, AS2Identifier, URL, SignData, EncryptData, CompressData, ReceiptType, HTTPAuthentication, HTTPUser, HTTPPassword, UseType, BeginUsage, EndUsage, Status}, Me.AS2AddOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2AddOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2AddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2AddCompleted(Me, New AS2AddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CommAdd", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CommAdd( _
                    ByVal SessionID As String,  _
                    ByVal NetworkID As Integer,  _
                    ByVal MailboxID As Integer,  _
                    ByVal CommType As NetworkGatewayCommChannel,  _
                    ByVal OwnerUserID As Integer,  _
                    ByVal ECGridHosted As Boolean,  _
                    ByVal Identifier As String,  _
                    ByVal URL As String,  _
                    ByVal SignData As Boolean,  _
                    ByVal EncryptData As Boolean,  _
                    ByVal CompressData As Boolean,  _
                    ByVal ReceiptType As ReceiptType,  _
                    ByVal HTTPAuthentication As HTTPAuthType,  _
                    ByVal HTTPUser As String,  _
                    ByVal HTTPPassword As String,  _
                    ByVal UseType As UseType,  _
                    ByVal BeginUsage As Date,  _
                    ByVal EndUsage As Date,  _
                    ByVal Status As Status) As CommIDInfo
            Dim results() As Object = Me.Invoke("CommAdd", New Object() {SessionID, NetworkID, MailboxID, CommType, OwnerUserID, ECGridHosted, Identifier, URL, SignData, EncryptData, CompressData, ReceiptType, HTTPAuthentication, HTTPUser, HTTPPassword, UseType, BeginUsage, EndUsage, Status})
            Return CType(results(0),CommIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CommAddAsync( _
                    ByVal SessionID As String,  _
                    ByVal NetworkID As Integer,  _
                    ByVal MailboxID As Integer,  _
                    ByVal CommType As NetworkGatewayCommChannel,  _
                    ByVal OwnerUserID As Integer,  _
                    ByVal ECGridHosted As Boolean,  _
                    ByVal Identifier As String,  _
                    ByVal URL As String,  _
                    ByVal SignData As Boolean,  _
                    ByVal EncryptData As Boolean,  _
                    ByVal CompressData As Boolean,  _
                    ByVal ReceiptType As ReceiptType,  _
                    ByVal HTTPAuthentication As HTTPAuthType,  _
                    ByVal HTTPUser As String,  _
                    ByVal HTTPPassword As String,  _
                    ByVal UseType As UseType,  _
                    ByVal BeginUsage As Date,  _
                    ByVal EndUsage As Date,  _
                    ByVal Status As Status)
            Me.CommAddAsync(SessionID, NetworkID, MailboxID, CommType, OwnerUserID, ECGridHosted, Identifier, URL, SignData, EncryptData, CompressData, ReceiptType, HTTPAuthentication, HTTPUser, HTTPPassword, UseType, BeginUsage, EndUsage, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CommAddAsync( _
                    ByVal SessionID As String,  _
                    ByVal NetworkID As Integer,  _
                    ByVal MailboxID As Integer,  _
                    ByVal CommType As NetworkGatewayCommChannel,  _
                    ByVal OwnerUserID As Integer,  _
                    ByVal ECGridHosted As Boolean,  _
                    ByVal Identifier As String,  _
                    ByVal URL As String,  _
                    ByVal SignData As Boolean,  _
                    ByVal EncryptData As Boolean,  _
                    ByVal CompressData As Boolean,  _
                    ByVal ReceiptType As ReceiptType,  _
                    ByVal HTTPAuthentication As HTTPAuthType,  _
                    ByVal HTTPUser As String,  _
                    ByVal HTTPPassword As String,  _
                    ByVal UseType As UseType,  _
                    ByVal BeginUsage As Date,  _
                    ByVal EndUsage As Date,  _
                    ByVal Status As Status,  _
                    ByVal userState As Object)
            If (Me.CommAddOperationCompleted Is Nothing) Then
                Me.CommAddOperationCompleted = AddressOf Me.OnCommAddOperationCompleted
            End If
            Me.InvokeAsync("CommAdd", New Object() {SessionID, NetworkID, MailboxID, CommType, OwnerUserID, ECGridHosted, Identifier, URL, SignData, EncryptData, CompressData, ReceiptType, HTTPAuthentication, HTTPUser, HTTPPassword, UseType, BeginUsage, EndUsage, Status}, Me.CommAddOperationCompleted, userState)
        End Sub
        
        Private Sub OnCommAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.CommAddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CommAddCompleted(Me, New CommAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/AS2SetPair", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AS2SetPair(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal AS2ID1 As String, ByVal AS2ID2 As String) As as2CommInfo()
            Dim results() As Object = Me.Invoke("AS2SetPair", New Object() {SessionID, ECGridIDFrom, ECGridIDTo, AS2ID1, AS2ID2})
            Return CType(results(0),as2CommInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub AS2SetPairAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal AS2ID1 As String, ByVal AS2ID2 As String)
            Me.AS2SetPairAsync(SessionID, ECGridIDFrom, ECGridIDTo, AS2ID1, AS2ID2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AS2SetPairAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal AS2ID1 As String, ByVal AS2ID2 As String, ByVal userState As Object)
            If (Me.AS2SetPairOperationCompleted Is Nothing) Then
                Me.AS2SetPairOperationCompleted = AddressOf Me.OnAS2SetPairOperationCompleted
            End If
            Me.InvokeAsync("AS2SetPair", New Object() {SessionID, ECGridIDFrom, ECGridIDTo, AS2ID1, AS2ID2}, Me.AS2SetPairOperationCompleted, userState)
        End Sub
        
        Private Sub OnAS2SetPairOperationCompleted(ByVal arg As Object)
            If (Not (Me.AS2SetPairCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AS2SetPairCompleted(Me, New AS2SetPairCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterconnectCount", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterconnectCount(ByVal SessionID As String, ByVal MaxDays As Short) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("InterconnectCount", New Object() {SessionID, MaxDays})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterconnectCountAsync(ByVal SessionID As String, ByVal MaxDays As Short)
            Me.InterconnectCountAsync(SessionID, MaxDays, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterconnectCountAsync(ByVal SessionID As String, ByVal MaxDays As Short, ByVal userState As Object)
            If (Me.InterconnectCountOperationCompleted Is Nothing) Then
                Me.InterconnectCountOperationCompleted = AddressOf Me.OnInterconnectCountOperationCompleted
            End If
            Me.InvokeAsync("InterconnectCount", New Object() {SessionID, MaxDays}, Me.InterconnectCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterconnectCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterconnectCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterconnectCountCompleted(Me, New InterconnectCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterconnectCountEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterconnectCountEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridID As Integer, ByVal MaxDays As Short) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("InterconnectCountEx", New Object() {SessionID, NetworkID, MailboxID, ECGridID, MaxDays})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterconnectCountExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridID As Integer, ByVal MaxDays As Short)
            Me.InterconnectCountExAsync(SessionID, NetworkID, MailboxID, ECGridID, MaxDays, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterconnectCountExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridID As Integer, ByVal MaxDays As Short, ByVal userState As Object)
            If (Me.InterconnectCountExOperationCompleted Is Nothing) Then
                Me.InterconnectCountExOperationCompleted = AddressOf Me.OnInterconnectCountExOperationCompleted
            End If
            Me.InvokeAsync("InterconnectCountEx", New Object() {SessionID, NetworkID, MailboxID, ECGridID, MaxDays}, Me.InterconnectCountExOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterconnectCountExOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterconnectCountExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterconnectCountExCompleted(Me, New InterconnectCountExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CarbonCopyAdd", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CarbonCopyAdd(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal ECGridIDCCFrom As Integer, ByVal ECGridIDCCTo As Integer, ByVal TransactionSet As String) As Integer
            Dim results() As Object = Me.Invoke("CarbonCopyAdd", New Object() {SessionID, ECGridIDFrom, ECGridIDTo, ECGridIDCCFrom, ECGridIDCCTo, TransactionSet})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyAddAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal ECGridIDCCFrom As Integer, ByVal ECGridIDCCTo As Integer, ByVal TransactionSet As String)
            Me.CarbonCopyAddAsync(SessionID, ECGridIDFrom, ECGridIDTo, ECGridIDCCFrom, ECGridIDCCTo, TransactionSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyAddAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal ECGridIDCCFrom As Integer, ByVal ECGridIDCCTo As Integer, ByVal TransactionSet As String, ByVal userState As Object)
            If (Me.CarbonCopyAddOperationCompleted Is Nothing) Then
                Me.CarbonCopyAddOperationCompleted = AddressOf Me.OnCarbonCopyAddOperationCompleted
            End If
            Me.InvokeAsync("CarbonCopyAdd", New Object() {SessionID, ECGridIDFrom, ECGridIDTo, ECGridIDCCFrom, ECGridIDCCTo, TransactionSet}, Me.CarbonCopyAddOperationCompleted, userState)
        End Sub
        
        Private Sub OnCarbonCopyAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.CarbonCopyAddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CarbonCopyAddCompleted(Me, New CarbonCopyAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CarbonCopyAddEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CarbonCopyAddEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal ECGridIDCCFrom As Integer, ByVal ECGridIDCCTo As Integer, ByVal TransactionSet As String) As Integer
            Dim results() As Object = Me.Invoke("CarbonCopyAddEx", New Object() {SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, ECGridIDCCFrom, ECGridIDCCTo, TransactionSet})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyAddExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal ECGridIDCCFrom As Integer, ByVal ECGridIDCCTo As Integer, ByVal TransactionSet As String)
            Me.CarbonCopyAddExAsync(SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, ECGridIDCCFrom, ECGridIDCCTo, TransactionSet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyAddExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal ECGridIDCCFrom As Integer, ByVal ECGridIDCCTo As Integer, ByVal TransactionSet As String, ByVal userState As Object)
            If (Me.CarbonCopyAddExOperationCompleted Is Nothing) Then
                Me.CarbonCopyAddExOperationCompleted = AddressOf Me.OnCarbonCopyAddExOperationCompleted
            End If
            Me.InvokeAsync("CarbonCopyAddEx", New Object() {SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, ECGridIDCCFrom, ECGridIDCCTo, TransactionSet}, Me.CarbonCopyAddExOperationCompleted, userState)
        End Sub
        
        Private Sub OnCarbonCopyAddExOperationCompleted(ByVal arg As Object)
            If (Not (Me.CarbonCopyAddExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CarbonCopyAddExCompleted(Me, New CarbonCopyAddExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CarbonCopyActivate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CarbonCopyActivate(ByVal SessionID As String, ByVal CarbonCopyID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("CarbonCopyActivate", New Object() {SessionID, CarbonCopyID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyActivateAsync(ByVal SessionID As String, ByVal CarbonCopyID As Integer)
            Me.CarbonCopyActivateAsync(SessionID, CarbonCopyID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyActivateAsync(ByVal SessionID As String, ByVal CarbonCopyID As Integer, ByVal userState As Object)
            If (Me.CarbonCopyActivateOperationCompleted Is Nothing) Then
                Me.CarbonCopyActivateOperationCompleted = AddressOf Me.OnCarbonCopyActivateOperationCompleted
            End If
            Me.InvokeAsync("CarbonCopyActivate", New Object() {SessionID, CarbonCopyID}, Me.CarbonCopyActivateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCarbonCopyActivateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CarbonCopyActivateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CarbonCopyActivateCompleted(Me, New CarbonCopyActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CarbonCopySuspend", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CarbonCopySuspend(ByVal SessionID As String, ByVal CarbonCopyID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("CarbonCopySuspend", New Object() {SessionID, CarbonCopyID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CarbonCopySuspendAsync(ByVal SessionID As String, ByVal CarbonCopyID As Integer)
            Me.CarbonCopySuspendAsync(SessionID, CarbonCopyID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CarbonCopySuspendAsync(ByVal SessionID As String, ByVal CarbonCopyID As Integer, ByVal userState As Object)
            If (Me.CarbonCopySuspendOperationCompleted Is Nothing) Then
                Me.CarbonCopySuspendOperationCompleted = AddressOf Me.OnCarbonCopySuspendOperationCompleted
            End If
            Me.InvokeAsync("CarbonCopySuspend", New Object() {SessionID, CarbonCopyID}, Me.CarbonCopySuspendOperationCompleted, userState)
        End Sub
        
        Private Sub OnCarbonCopySuspendOperationCompleted(ByVal arg As Object)
            If (Not (Me.CarbonCopySuspendCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CarbonCopySuspendCompleted(Me, New CarbonCopySuspendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CarbonCopyTerminate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CarbonCopyTerminate(ByVal SessionID As String, ByVal CarbonCopyID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("CarbonCopyTerminate", New Object() {SessionID, CarbonCopyID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyTerminateAsync(ByVal SessionID As String, ByVal CarbonCopyID As Integer)
            Me.CarbonCopyTerminateAsync(SessionID, CarbonCopyID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyTerminateAsync(ByVal SessionID As String, ByVal CarbonCopyID As Integer, ByVal userState As Object)
            If (Me.CarbonCopyTerminateOperationCompleted Is Nothing) Then
                Me.CarbonCopyTerminateOperationCompleted = AddressOf Me.OnCarbonCopyTerminateOperationCompleted
            End If
            Me.InvokeAsync("CarbonCopyTerminate", New Object() {SessionID, CarbonCopyID}, Me.CarbonCopyTerminateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCarbonCopyTerminateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CarbonCopyTerminateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CarbonCopyTerminateCompleted(Me, New CarbonCopyTerminateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CarbonCopyInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CarbonCopyInfo(ByVal SessionID As String, ByVal CarbonCopyID As Integer) As CarbonCopyIDInfo
            Dim results() As Object = Me.Invoke("CarbonCopyInfo", New Object() {SessionID, CarbonCopyID})
            Return CType(results(0),CarbonCopyIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyInfoAsync(ByVal SessionID As String, ByVal CarbonCopyID As Integer)
            Me.CarbonCopyInfoAsync(SessionID, CarbonCopyID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyInfoAsync(ByVal SessionID As String, ByVal CarbonCopyID As Integer, ByVal userState As Object)
            If (Me.CarbonCopyInfoOperationCompleted Is Nothing) Then
                Me.CarbonCopyInfoOperationCompleted = AddressOf Me.OnCarbonCopyInfoOperationCompleted
            End If
            Me.InvokeAsync("CarbonCopyInfo", New Object() {SessionID, CarbonCopyID}, Me.CarbonCopyInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCarbonCopyInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CarbonCopyInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CarbonCopyInfoCompleted(Me, New CarbonCopyInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CarbonCopyList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CarbonCopyList(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal ShowInactive As Boolean) As CarbonCopyIDInfo()
            Dim results() As Object = Me.Invoke("CarbonCopyList", New Object() {SessionID, ECGridIDFrom, ECGridIDTo, ShowInactive})
            Return CType(results(0),CarbonCopyIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyListAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal ShowInactive As Boolean)
            Me.CarbonCopyListAsync(SessionID, ECGridIDFrom, ECGridIDTo, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyListAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.CarbonCopyListOperationCompleted Is Nothing) Then
                Me.CarbonCopyListOperationCompleted = AddressOf Me.OnCarbonCopyListOperationCompleted
            End If
            Me.InvokeAsync("CarbonCopyList", New Object() {SessionID, ECGridIDFrom, ECGridIDTo, ShowInactive}, Me.CarbonCopyListOperationCompleted, userState)
        End Sub
        
        Private Sub OnCarbonCopyListOperationCompleted(ByVal arg As Object)
            If (Not (Me.CarbonCopyListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CarbonCopyListCompleted(Me, New CarbonCopyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/CarbonCopyListEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CarbonCopyListEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal ShowInactive As Boolean) As CarbonCopyIDInfo()
            Dim results() As Object = Me.Invoke("CarbonCopyListEx", New Object() {SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, ShowInactive})
            Return CType(results(0),CarbonCopyIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal ShowInactive As Boolean)
            Me.CarbonCopyListExAsync(SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CarbonCopyListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.CarbonCopyListExOperationCompleted Is Nothing) Then
                Me.CarbonCopyListExOperationCompleted = AddressOf Me.OnCarbonCopyListExOperationCompleted
            End If
            Me.InvokeAsync("CarbonCopyListEx", New Object() {SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, ShowInactive}, Me.CarbonCopyListExOperationCompleted, userState)
        End Sub
        
        Private Sub OnCarbonCopyListExOperationCompleted(ByVal arg As Object)
            If (Not (Me.CarbonCopyListExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CarbonCopyListExCompleted(Me, New CarbonCopyListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelInBox", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelInBox(ByVal SessionID As String) As ParcelIDInfoCollection
            Dim results() As Object = Me.Invoke("ParcelInBox", New Object() {SessionID})
            Return CType(results(0),ParcelIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelInBoxAsync(ByVal SessionID As String)
            Me.ParcelInBoxAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelInBoxAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.ParcelInBoxOperationCompleted Is Nothing) Then
                Me.ParcelInBoxOperationCompleted = AddressOf Me.OnParcelInBoxOperationCompleted
            End If
            Me.InvokeAsync("ParcelInBox", New Object() {SessionID}, Me.ParcelInBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelInBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelInBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelInBoxCompleted(Me, New ParcelInBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelInBoxEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelInBoxEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer) As ParcelIDInfoCollection
            Dim results() As Object = Me.Invoke("ParcelInBoxEx", New Object() {SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo})
            Return CType(results(0),ParcelIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelInBoxExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer)
            Me.ParcelInBoxExAsync(SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelInBoxExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal userState As Object)
            If (Me.ParcelInBoxExOperationCompleted Is Nothing) Then
                Me.ParcelInBoxExOperationCompleted = AddressOf Me.OnParcelInBoxExOperationCompleted
            End If
            Me.InvokeAsync("ParcelInBoxEx", New Object() {SessionID, NetworkID, MailboxID, ECGridIDFrom, ECGridIDTo}, Me.ParcelInBoxExOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelInBoxExOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelInBoxExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelInBoxExCompleted(Me, New ParcelInBoxExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelInfo(ByVal SessionID As String, ByVal ParcelID As Long) As ParcelIDInfo
            Dim results() As Object = Me.Invoke("ParcelInfo", New Object() {SessionID, ParcelID})
            Return CType(results(0),ParcelIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelInfoAsync(ByVal SessionID As String, ByVal ParcelID As Long)
            Me.ParcelInfoAsync(SessionID, ParcelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelInfoAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal userState As Object)
            If (Me.ParcelInfoOperationCompleted Is Nothing) Then
                Me.ParcelInfoOperationCompleted = AddressOf Me.OnParcelInfoOperationCompleted
            End If
            Me.InvokeAsync("ParcelInfo", New Object() {SessionID, ParcelID}, Me.ParcelInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelInfoCompleted(Me, New ParcelInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelDownload", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelDownload(ByVal SessionID As String, ByVal ParcelID As Long) As FileInfo
            Dim results() As Object = Me.Invoke("ParcelDownload", New Object() {SessionID, ParcelID})
            Return CType(results(0),FileInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadAsync(ByVal SessionID As String, ByVal ParcelID As Long)
            Me.ParcelDownloadAsync(SessionID, ParcelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal userState As Object)
            If (Me.ParcelDownloadOperationCompleted Is Nothing) Then
                Me.ParcelDownloadOperationCompleted = AddressOf Me.OnParcelDownloadOperationCompleted
            End If
            Me.InvokeAsync("ParcelDownload", New Object() {SessionID, ParcelID}, Me.ParcelDownloadOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelDownloadOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelDownloadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelDownloadCompleted(Me, New ParcelDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelDownloadNoUpdate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelDownloadNoUpdate(ByVal SessionID As String, ByVal ParcelID As Long) As FileInfo
            Dim results() As Object = Me.Invoke("ParcelDownloadNoUpdate", New Object() {SessionID, ParcelID})
            Return CType(results(0),FileInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadNoUpdateAsync(ByVal SessionID As String, ByVal ParcelID As Long)
            Me.ParcelDownloadNoUpdateAsync(SessionID, ParcelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadNoUpdateAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal userState As Object)
            If (Me.ParcelDownloadNoUpdateOperationCompleted Is Nothing) Then
                Me.ParcelDownloadNoUpdateOperationCompleted = AddressOf Me.OnParcelDownloadNoUpdateOperationCompleted
            End If
            Me.InvokeAsync("ParcelDownloadNoUpdate", New Object() {SessionID, ParcelID}, Me.ParcelDownloadNoUpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelDownloadNoUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelDownloadNoUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelDownloadNoUpdateCompleted(Me, New ParcelDownloadNoUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelDownloadGZip", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelDownloadGZip(ByVal SessionID As String, ByVal ParcelID As Long) As FileInfo
            Dim results() As Object = Me.Invoke("ParcelDownloadGZip", New Object() {SessionID, ParcelID})
            Return CType(results(0),FileInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadGZipAsync(ByVal SessionID As String, ByVal ParcelID As Long)
            Me.ParcelDownloadGZipAsync(SessionID, ParcelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadGZipAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal userState As Object)
            If (Me.ParcelDownloadGZipOperationCompleted Is Nothing) Then
                Me.ParcelDownloadGZipOperationCompleted = AddressOf Me.OnParcelDownloadGZipOperationCompleted
            End If
            Me.InvokeAsync("ParcelDownloadGZip", New Object() {SessionID, ParcelID}, Me.ParcelDownloadGZipOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelDownloadGZipOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelDownloadGZipCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelDownloadGZipCompleted(Me, New ParcelDownloadGZipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelDownloadInner", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelDownloadInner(ByVal SessionID As String, ByVal ParcelID As Long) As FileInfo
            Dim results() As Object = Me.Invoke("ParcelDownloadInner", New Object() {SessionID, ParcelID})
            Return CType(results(0),FileInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadInnerAsync(ByVal SessionID As String, ByVal ParcelID As Long)
            Me.ParcelDownloadInnerAsync(SessionID, ParcelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadInnerAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal userState As Object)
            If (Me.ParcelDownloadInnerOperationCompleted Is Nothing) Then
                Me.ParcelDownloadInnerOperationCompleted = AddressOf Me.OnParcelDownloadInnerOperationCompleted
            End If
            Me.InvokeAsync("ParcelDownloadInner", New Object() {SessionID, ParcelID}, Me.ParcelDownloadInnerOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelDownloadInnerOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelDownloadInnerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelDownloadInnerCompleted(Me, New ParcelDownloadInnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelDownloadConfirm", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelDownloadConfirm(ByVal SessionID As String, ByVal ParcelID As Long) As Boolean
            Dim results() As Object = Me.Invoke("ParcelDownloadConfirm", New Object() {SessionID, ParcelID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadConfirmAsync(ByVal SessionID As String, ByVal ParcelID As Long)
            Me.ParcelDownloadConfirmAsync(SessionID, ParcelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadConfirmAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal userState As Object)
            If (Me.ParcelDownloadConfirmOperationCompleted Is Nothing) Then
                Me.ParcelDownloadConfirmOperationCompleted = AddressOf Me.OnParcelDownloadConfirmOperationCompleted
            End If
            Me.InvokeAsync("ParcelDownloadConfirm", New Object() {SessionID, ParcelID}, Me.ParcelDownloadConfirmOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelDownloadConfirmOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelDownloadConfirmCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelDownloadConfirmCompleted(Me, New ParcelDownloadConfirmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelAcknowledgmentNote", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelAcknowledgmentNote(ByVal SessionID As String, ByVal ParcelID As Long, ByVal Subject As String, ByVal Note As String) As Boolean
            Dim results() As Object = Me.Invoke("ParcelAcknowledgmentNote", New Object() {SessionID, ParcelID, Subject, Note})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelAcknowledgmentNoteAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal Subject As String, ByVal Note As String)
            Me.ParcelAcknowledgmentNoteAsync(SessionID, ParcelID, Subject, Note, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelAcknowledgmentNoteAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal Subject As String, ByVal Note As String, ByVal userState As Object)
            If (Me.ParcelAcknowledgmentNoteOperationCompleted Is Nothing) Then
                Me.ParcelAcknowledgmentNoteOperationCompleted = AddressOf Me.OnParcelAcknowledgmentNoteOperationCompleted
            End If
            Me.InvokeAsync("ParcelAcknowledgmentNote", New Object() {SessionID, ParcelID, Subject, Note}, Me.ParcelAcknowledgmentNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelAcknowledgmentNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelAcknowledgmentNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelAcknowledgmentNoteCompleted(Me, New ParcelAcknowledgmentNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelDownloadCancel", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelDownloadCancel(ByVal SessionID As String, ByVal ParcelID As Long) As Boolean
            Dim results() As Object = Me.Invoke("ParcelDownloadCancel", New Object() {SessionID, ParcelID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadCancelAsync(ByVal SessionID As String, ByVal ParcelID As Long)
            Me.ParcelDownloadCancelAsync(SessionID, ParcelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadCancelAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal userState As Object)
            If (Me.ParcelDownloadCancelOperationCompleted Is Nothing) Then
                Me.ParcelDownloadCancelOperationCompleted = AddressOf Me.OnParcelDownloadCancelOperationCompleted
            End If
            Me.InvokeAsync("ParcelDownloadCancel", New Object() {SessionID, ParcelID}, Me.ParcelDownloadCancelOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelDownloadCancelOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelDownloadCancelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelDownloadCancelCompleted(Me, New ParcelDownloadCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelDownloadConfirmPendingAck", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelDownloadConfirmPendingAck(ByVal SessionID As String, ByVal ParcelID As Long, ByVal Status As ParcelStatus) As Boolean
            Dim results() As Object = Me.Invoke("ParcelDownloadConfirmPendingAck", New Object() {SessionID, ParcelID, Status})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadConfirmPendingAckAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal Status As ParcelStatus)
            Me.ParcelDownloadConfirmPendingAckAsync(SessionID, ParcelID, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadConfirmPendingAckAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal Status As ParcelStatus, ByVal userState As Object)
            If (Me.ParcelDownloadConfirmPendingAckOperationCompleted Is Nothing) Then
                Me.ParcelDownloadConfirmPendingAckOperationCompleted = AddressOf Me.OnParcelDownloadConfirmPendingAckOperationCompleted
            End If
            Me.InvokeAsync("ParcelDownloadConfirmPendingAck", New Object() {SessionID, ParcelID, Status}, Me.ParcelDownloadConfirmPendingAckOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelDownloadConfirmPendingAckOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelDownloadConfirmPendingAckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelDownloadConfirmPendingAckCompleted(Me, New ParcelDownloadConfirmPendingAckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelDownloadReset", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelDownloadReset(ByVal SessionID As String, ByVal ParcelID As Long) As Boolean
            Dim results() As Object = Me.Invoke("ParcelDownloadReset", New Object() {SessionID, ParcelID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadResetAsync(ByVal SessionID As String, ByVal ParcelID As Long)
            Me.ParcelDownloadResetAsync(SessionID, ParcelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelDownloadResetAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal userState As Object)
            If (Me.ParcelDownloadResetOperationCompleted Is Nothing) Then
                Me.ParcelDownloadResetOperationCompleted = AddressOf Me.OnParcelDownloadResetOperationCompleted
            End If
            Me.InvokeAsync("ParcelDownloadReset", New Object() {SessionID, ParcelID}, Me.ParcelDownloadResetOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelDownloadResetOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelDownloadResetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelDownloadResetCompleted(Me, New ParcelDownloadResetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelResend", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelResend(ByVal SessionID As String, ByVal ParcelID As Long) As Boolean
            Dim results() As Object = Me.Invoke("ParcelResend", New Object() {SessionID, ParcelID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelResendAsync(ByVal SessionID As String, ByVal ParcelID As Long)
            Me.ParcelResendAsync(SessionID, ParcelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelResendAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal userState As Object)
            If (Me.ParcelResendOperationCompleted Is Nothing) Then
                Me.ParcelResendOperationCompleted = AddressOf Me.OnParcelResendOperationCompleted
            End If
            Me.InvokeAsync("ParcelResend", New Object() {SessionID, ParcelID}, Me.ParcelResendOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelResendOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelResendCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelResendCompleted(Me, New ParcelResendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelUpload", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelUpload(ByVal SessionID As String, ByVal FileName As String, ByVal Bytes As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Content() As Byte) As Integer
            Dim results() As Object = Me.Invoke("ParcelUpload", New Object() {SessionID, FileName, Bytes, Content})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadAsync(ByVal SessionID As String, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte)
            Me.ParcelUploadAsync(SessionID, FileName, Bytes, Content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadAsync(ByVal SessionID As String, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte, ByVal userState As Object)
            If (Me.ParcelUploadOperationCompleted Is Nothing) Then
                Me.ParcelUploadOperationCompleted = AddressOf Me.OnParcelUploadOperationCompleted
            End If
            Me.InvokeAsync("ParcelUpload", New Object() {SessionID, FileName, Bytes, Content}, Me.ParcelUploadOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelUploadOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelUploadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelUploadCompleted(Me, New ParcelUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelUploadExA", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelUploadExA(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal FileName As String, ByVal Bytes As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Content() As Byte) As Integer
            Dim results() As Object = Me.Invoke("ParcelUploadExA", New Object() {SessionID, NetworkID, MailboxID, FileName, Bytes, Content})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadExAAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte)
            Me.ParcelUploadExAAsync(SessionID, NetworkID, MailboxID, FileName, Bytes, Content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadExAAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte, ByVal userState As Object)
            If (Me.ParcelUploadExAOperationCompleted Is Nothing) Then
                Me.ParcelUploadExAOperationCompleted = AddressOf Me.OnParcelUploadExAOperationCompleted
            End If
            Me.InvokeAsync("ParcelUploadExA", New Object() {SessionID, NetworkID, MailboxID, FileName, Bytes, Content}, Me.ParcelUploadExAOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelUploadExAOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelUploadExACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelUploadExACompleted(Me, New ParcelUploadExACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelUploadGZip", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelUploadGZip(ByVal SessionID As String, ByVal FileName As String, ByVal Bytes As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Content() As Byte) As Integer
            Dim results() As Object = Me.Invoke("ParcelUploadGZip", New Object() {SessionID, FileName, Bytes, Content})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadGZipAsync(ByVal SessionID As String, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte)
            Me.ParcelUploadGZipAsync(SessionID, FileName, Bytes, Content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadGZipAsync(ByVal SessionID As String, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte, ByVal userState As Object)
            If (Me.ParcelUploadGZipOperationCompleted Is Nothing) Then
                Me.ParcelUploadGZipOperationCompleted = AddressOf Me.OnParcelUploadGZipOperationCompleted
            End If
            Me.InvokeAsync("ParcelUploadGZip", New Object() {SessionID, FileName, Bytes, Content}, Me.ParcelUploadGZipOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelUploadGZipOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelUploadGZipCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelUploadGZipCompleted(Me, New ParcelUploadGZipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelUpdateStatus", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelUpdateStatus(ByVal SessionID As String, ByVal ParcelID As Long, ByVal Status As ParcelStatus, ByVal TransLogOnly As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("ParcelUpdateStatus", New Object() {SessionID, ParcelID, Status, TransLogOnly})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelUpdateStatusAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal Status As ParcelStatus, ByVal TransLogOnly As Boolean)
            Me.ParcelUpdateStatusAsync(SessionID, ParcelID, Status, TransLogOnly, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelUpdateStatusAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal Status As ParcelStatus, ByVal TransLogOnly As Boolean, ByVal userState As Object)
            If (Me.ParcelUpdateStatusOperationCompleted Is Nothing) Then
                Me.ParcelUpdateStatusOperationCompleted = AddressOf Me.OnParcelUpdateStatusOperationCompleted
            End If
            Me.InvokeAsync("ParcelUpdateStatus", New Object() {SessionID, ParcelID, Status, TransLogOnly}, Me.ParcelUpdateStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelUpdateStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelUpdateStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelUpdateStatusCompleted(Me, New ParcelUpdateStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelUpdateLocalStatus", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelUpdateLocalStatus(ByVal SessionID As String, ByVal ParcelID As Long, ByVal Status As Short) As Boolean
            Dim results() As Object = Me.Invoke("ParcelUpdateLocalStatus", New Object() {SessionID, ParcelID, Status})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelUpdateLocalStatusAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal Status As Short)
            Me.ParcelUpdateLocalStatusAsync(SessionID, ParcelID, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelUpdateLocalStatusAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal Status As Short, ByVal userState As Object)
            If (Me.ParcelUpdateLocalStatusOperationCompleted Is Nothing) Then
                Me.ParcelUpdateLocalStatusOperationCompleted = AddressOf Me.OnParcelUpdateLocalStatusOperationCompleted
            End If
            Me.InvokeAsync("ParcelUpdateLocalStatus", New Object() {SessionID, ParcelID, Status}, Me.ParcelUpdateLocalStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelUpdateLocalStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelUpdateLocalStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelUpdateLocalStatusCompleted(Me, New ParcelUpdateLocalStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelUploadEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelUploadEx(ByVal SessionID As String, ByVal FileName As String, ByVal Bytes As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Content() As Byte, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer) As Integer
            Dim results() As Object = Me.Invoke("ParcelUploadEx", New Object() {SessionID, FileName, Bytes, Content, ECGridIDFrom, ECGridIDTo})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadExAsync(ByVal SessionID As String, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer)
            Me.ParcelUploadExAsync(SessionID, FileName, Bytes, Content, ECGridIDFrom, ECGridIDTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadExAsync(ByVal SessionID As String, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal userState As Object)
            If (Me.ParcelUploadExOperationCompleted Is Nothing) Then
                Me.ParcelUploadExOperationCompleted = AddressOf Me.OnParcelUploadExOperationCompleted
            End If
            Me.InvokeAsync("ParcelUploadEx", New Object() {SessionID, FileName, Bytes, Content, ECGridIDFrom, ECGridIDTo}, Me.ParcelUploadExOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelUploadExOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelUploadExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelUploadExCompleted(Me, New ParcelUploadExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelUploadDirected", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelUploadDirected(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal FileName As String, ByVal Bytes As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Content() As Byte, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer) As Integer
            Dim results() As Object = Me.Invoke("ParcelUploadDirected", New Object() {SessionID, NetworkID, MailboxID, FileName, Bytes, Content, ECGridIDFrom, ECGridIDTo})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadDirectedAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer)
            Me.ParcelUploadDirectedAsync(SessionID, NetworkID, MailboxID, FileName, Bytes, Content, ECGridIDFrom, ECGridIDTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadDirectedAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal userState As Object)
            If (Me.ParcelUploadDirectedOperationCompleted Is Nothing) Then
                Me.ParcelUploadDirectedOperationCompleted = AddressOf Me.OnParcelUploadDirectedOperationCompleted
            End If
            Me.InvokeAsync("ParcelUploadDirected", New Object() {SessionID, NetworkID, MailboxID, FileName, Bytes, Content, ECGridIDFrom, ECGridIDTo}, Me.ParcelUploadDirectedOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelUploadDirectedOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelUploadDirectedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelUploadDirectedCompleted(Me, New ParcelUploadDirectedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelUploadGZipEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelUploadGZipEx(ByVal SessionID As String, ByVal FileName As String, ByVal Bytes As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Content() As Byte, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer) As Integer
            Dim results() As Object = Me.Invoke("ParcelUploadGZipEx", New Object() {SessionID, FileName, Bytes, Content, ECGridIDFrom, ECGridIDTo})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadGZipExAsync(ByVal SessionID As String, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer)
            Me.ParcelUploadGZipExAsync(SessionID, FileName, Bytes, Content, ECGridIDFrom, ECGridIDTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadGZipExAsync(ByVal SessionID As String, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal userState As Object)
            If (Me.ParcelUploadGZipExOperationCompleted Is Nothing) Then
                Me.ParcelUploadGZipExOperationCompleted = AddressOf Me.OnParcelUploadGZipExOperationCompleted
            End If
            Me.InvokeAsync("ParcelUploadGZipEx", New Object() {SessionID, FileName, Bytes, Content, ECGridIDFrom, ECGridIDTo}, Me.ParcelUploadGZipExOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelUploadGZipExOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelUploadGZipExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelUploadGZipExCompleted(Me, New ParcelUploadGZipExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelUploadDirectedGZip", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelUploadDirectedGZip(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal FileName As String, ByVal Bytes As Integer, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal Content() As Byte, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer) As Integer
            Dim results() As Object = Me.Invoke("ParcelUploadDirectedGZip", New Object() {SessionID, NetworkID, MailboxID, FileName, Bytes, Content, ECGridIDFrom, ECGridIDTo})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadDirectedGZipAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer)
            Me.ParcelUploadDirectedGZipAsync(SessionID, NetworkID, MailboxID, FileName, Bytes, Content, ECGridIDFrom, ECGridIDTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelUploadDirectedGZipAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal FileName As String, ByVal Bytes As Integer, ByVal Content() As Byte, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal userState As Object)
            If (Me.ParcelUploadDirectedGZipOperationCompleted Is Nothing) Then
                Me.ParcelUploadDirectedGZipOperationCompleted = AddressOf Me.OnParcelUploadDirectedGZipOperationCompleted
            End If
            Me.InvokeAsync("ParcelUploadDirectedGZip", New Object() {SessionID, NetworkID, MailboxID, FileName, Bytes, Content, ECGridIDFrom, ECGridIDTo}, Me.ParcelUploadDirectedGZipOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelUploadDirectedGZipOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelUploadDirectedGZipCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelUploadDirectedGZipCompleted(Me, New ParcelUploadDirectedGZipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelTest", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelTest(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal DocumentType As EDIStandard) As Integer
            Dim results() As Object = Me.Invoke("ParcelTest", New Object() {SessionID, ECGridIDFrom, ECGridIDTo, DocumentType})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelTestAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal DocumentType As EDIStandard)
            Me.ParcelTestAsync(SessionID, ECGridIDFrom, ECGridIDTo, DocumentType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelTestAsync(ByVal SessionID As String, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal DocumentType As EDIStandard, ByVal userState As Object)
            If (Me.ParcelTestOperationCompleted Is Nothing) Then
                Me.ParcelTestOperationCompleted = AddressOf Me.OnParcelTestOperationCompleted
            End If
            Me.InvokeAsync("ParcelTest", New Object() {SessionID, ECGridIDFrom, ECGridIDTo, DocumentType}, Me.ParcelTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelTestCompleted(Me, New ParcelTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelSetMailbagControlID", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelSetMailbagControlID(ByVal SessionID As String, ByVal ParcelID As Integer, ByVal MailbagControlID As String) As Boolean
            Dim results() As Object = Me.Invoke("ParcelSetMailbagControlID", New Object() {SessionID, ParcelID, MailbagControlID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelSetMailbagControlIDAsync(ByVal SessionID As String, ByVal ParcelID As Integer, ByVal MailbagControlID As String)
            Me.ParcelSetMailbagControlIDAsync(SessionID, ParcelID, MailbagControlID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelSetMailbagControlIDAsync(ByVal SessionID As String, ByVal ParcelID As Integer, ByVal MailbagControlID As String, ByVal userState As Object)
            If (Me.ParcelSetMailbagControlIDOperationCompleted Is Nothing) Then
                Me.ParcelSetMailbagControlIDOperationCompleted = AddressOf Me.OnParcelSetMailbagControlIDOperationCompleted
            End If
            Me.InvokeAsync("ParcelSetMailbagControlID", New Object() {SessionID, ParcelID, MailbagControlID}, Me.ParcelSetMailbagControlIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelSetMailbagControlIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelSetMailbagControlIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelSetMailbagControlIDCompleted(Me, New ParcelSetMailbagControlIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelManifest", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelManifest(ByVal SessionID As String, ByVal ParcelID As Long) As ManifestInfo()
            Dim results() As Object = Me.Invoke("ParcelManifest", New Object() {SessionID, ParcelID})
            Return CType(results(0),ManifestInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelManifestAsync(ByVal SessionID As String, ByVal ParcelID As Long)
            Me.ParcelManifestAsync(SessionID, ParcelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelManifestAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal userState As Object)
            If (Me.ParcelManifestOperationCompleted Is Nothing) Then
                Me.ParcelManifestOperationCompleted = AddressOf Me.OnParcelManifestOperationCompleted
            End If
            Me.InvokeAsync("ParcelManifest", New Object() {SessionID, ParcelID}, Me.ParcelManifestOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelManifestOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelManifestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelManifestCompleted(Me, New ParcelManifestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelInterchangeManifest", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelInterchangeManifest(ByVal SessionID As String, ByVal InterchangeID As Long) As ManifestInfo()
            Dim results() As Object = Me.Invoke("ParcelInterchangeManifest", New Object() {SessionID, InterchangeID})
            Return CType(results(0),ManifestInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelInterchangeManifestAsync(ByVal SessionID As String, ByVal InterchangeID As Long)
            Me.ParcelInterchangeManifestAsync(SessionID, InterchangeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelInterchangeManifestAsync(ByVal SessionID As String, ByVal InterchangeID As Long, ByVal userState As Object)
            If (Me.ParcelInterchangeManifestOperationCompleted Is Nothing) Then
                Me.ParcelInterchangeManifestOperationCompleted = AddressOf Me.OnParcelInterchangeManifestOperationCompleted
            End If
            Me.InvokeAsync("ParcelInterchangeManifest", New Object() {SessionID, InterchangeID}, Me.ParcelInterchangeManifestOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelInterchangeManifestOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelInterchangeManifestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelInterchangeManifestCompleted(Me, New ParcelInterchangeManifestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeManifest", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeManifest(ByVal SessionID As String, ByVal InterchangeID As Long) As ManifestInfo()
            Dim results() As Object = Me.Invoke("InterchangeManifest", New Object() {SessionID, InterchangeID})
            Return CType(results(0),ManifestInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeManifestAsync(ByVal SessionID As String, ByVal InterchangeID As Long)
            Me.InterchangeManifestAsync(SessionID, InterchangeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeManifestAsync(ByVal SessionID As String, ByVal InterchangeID As Long, ByVal userState As Object)
            If (Me.InterchangeManifestOperationCompleted Is Nothing) Then
                Me.InterchangeManifestOperationCompleted = AddressOf Me.OnInterchangeManifestOperationCompleted
            End If
            Me.InvokeAsync("InterchangeManifest", New Object() {SessionID, InterchangeID}, Me.InterchangeManifestOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeManifestOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeManifestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeManifestCompleted(Me, New InterchangeManifestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelNoteList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelNoteList(ByVal SessionID As String, ByVal ParcelID As Long) As ParcelNote()
            Dim results() As Object = Me.Invoke("ParcelNoteList", New Object() {SessionID, ParcelID})
            Return CType(results(0),ParcelNote())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelNoteListAsync(ByVal SessionID As String, ByVal ParcelID As Long)
            Me.ParcelNoteListAsync(SessionID, ParcelID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelNoteListAsync(ByVal SessionID As String, ByVal ParcelID As Long, ByVal userState As Object)
            If (Me.ParcelNoteListOperationCompleted Is Nothing) Then
                Me.ParcelNoteListOperationCompleted = AddressOf Me.OnParcelNoteListOperationCompleted
            End If
            Me.InvokeAsync("ParcelNoteList", New Object() {SessionID, ParcelID}, Me.ParcelNoteListOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelNoteListOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelNoteListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelNoteListCompleted(Me, New ParcelNoteListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelInBoxArchive", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelInBoxArchive(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal MailbagControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short) As ParcelIDInfoCollection
            Dim results() As Object = Me.Invoke("ParcelInBoxArchive", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage})
            Return CType(results(0),ParcelIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelInBoxArchiveAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal MailbagControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short)
            Me.ParcelInBoxArchiveAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelInBoxArchiveAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal MailbagControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short, ByVal userState As Object)
            If (Me.ParcelInBoxArchiveOperationCompleted Is Nothing) Then
                Me.ParcelInBoxArchiveOperationCompleted = AddressOf Me.OnParcelInBoxArchiveOperationCompleted
            End If
            Me.InvokeAsync("ParcelInBoxArchive", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage}, Me.ParcelInBoxArchiveOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelInBoxArchiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelInBoxArchiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelInBoxArchiveCompleted(Me, New ParcelInBoxArchiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelInBoxArchiveEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelInBoxArchiveEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal MailbagControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short) As ParcelIDInfoCollection
            Dim results() As Object = Me.Invoke("ParcelInBoxArchiveEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage})
            Return CType(results(0),ParcelIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelInBoxArchiveExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal MailbagControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short)
            Me.ParcelInBoxArchiveExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelInBoxArchiveExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal MailbagControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short, ByVal userState As Object)
            If (Me.ParcelInBoxArchiveExOperationCompleted Is Nothing) Then
                Me.ParcelInBoxArchiveExOperationCompleted = AddressOf Me.OnParcelInBoxArchiveExOperationCompleted
            End If
            Me.InvokeAsync("ParcelInBoxArchiveEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage}, Me.ParcelInBoxArchiveExOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelInBoxArchiveExOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelInBoxArchiveExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelInBoxArchiveExCompleted(Me, New ParcelInBoxArchiveExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelOutBoxArchive", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelOutBoxArchive(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal MailbagControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short) As ParcelIDInfoCollection
            Dim results() As Object = Me.Invoke("ParcelOutBoxArchive", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage})
            Return CType(results(0),ParcelIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelOutBoxArchiveAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal MailbagControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short)
            Me.ParcelOutBoxArchiveAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelOutBoxArchiveAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal MailbagControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short, ByVal userState As Object)
            If (Me.ParcelOutBoxArchiveOperationCompleted Is Nothing) Then
                Me.ParcelOutBoxArchiveOperationCompleted = AddressOf Me.OnParcelOutBoxArchiveOperationCompleted
            End If
            Me.InvokeAsync("ParcelOutBoxArchive", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage}, Me.ParcelOutBoxArchiveOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelOutBoxArchiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelOutBoxArchiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelOutBoxArchiveCompleted(Me, New ParcelOutBoxArchiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelOutBoxArchiveEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelOutBoxArchiveEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal MailbagControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short) As ParcelIDInfoCollection
            Dim results() As Object = Me.Invoke("ParcelOutBoxArchiveEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage})
            Return CType(results(0),ParcelIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelOutBoxArchiveExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal MailbagControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short)
            Me.ParcelOutBoxArchiveExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelOutBoxArchiveExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal MailbagControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short, ByVal userState As Object)
            If (Me.ParcelOutBoxArchiveExOperationCompleted Is Nothing) Then
                Me.ParcelOutBoxArchiveExOperationCompleted = AddressOf Me.OnParcelOutBoxArchiveExOperationCompleted
            End If
            Me.InvokeAsync("ParcelOutBoxArchiveEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, MailbagControlID, PageNo, RecordsPerPage}, Me.ParcelOutBoxArchiveExOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelOutBoxArchiveExOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelOutBoxArchiveExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelOutBoxArchiveExCompleted(Me, New ParcelOutBoxArchiveExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelOutBoxError", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelOutBoxError(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date) As ParcelIDInfoCollection
            Dim results() As Object = Me.Invoke("ParcelOutBoxError", New Object() {SessionID, BeginDate, EndDate})
            Return CType(results(0),ParcelIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelOutBoxErrorAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date)
            Me.ParcelOutBoxErrorAsync(SessionID, BeginDate, EndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelOutBoxErrorAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal userState As Object)
            If (Me.ParcelOutBoxErrorOperationCompleted Is Nothing) Then
                Me.ParcelOutBoxErrorOperationCompleted = AddressOf Me.OnParcelOutBoxErrorOperationCompleted
            End If
            Me.InvokeAsync("ParcelOutBoxError", New Object() {SessionID, BeginDate, EndDate}, Me.ParcelOutBoxErrorOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelOutBoxErrorOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelOutBoxErrorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelOutBoxErrorCompleted(Me, New ParcelOutBoxErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelOutBoxErrorEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelOutBoxErrorEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date) As ParcelIDInfoCollection
            Dim results() As Object = Me.Invoke("ParcelOutBoxErrorEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate})
            Return CType(results(0),ParcelIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelOutBoxErrorExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date)
            Me.ParcelOutBoxErrorExAsync(SessionID, NetworkID, MailboxID, BeginDate, EndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelOutBoxErrorExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal userState As Object)
            If (Me.ParcelOutBoxErrorExOperationCompleted Is Nothing) Then
                Me.ParcelOutBoxErrorExOperationCompleted = AddressOf Me.OnParcelOutBoxErrorExOperationCompleted
            End If
            Me.InvokeAsync("ParcelOutBoxErrorEx", New Object() {SessionID, NetworkID, MailboxID, BeginDate, EndDate}, Me.ParcelOutBoxErrorExOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelOutBoxErrorExOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelOutBoxErrorExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelOutBoxErrorExCompleted(Me, New ParcelOutBoxErrorExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelOutBoxInProcess", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelOutBoxInProcess(ByVal SessionID As String) As ParcelIDInfoCollection
            Dim results() As Object = Me.Invoke("ParcelOutBoxInProcess", New Object() {SessionID})
            Return CType(results(0),ParcelIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelOutBoxInProcessAsync(ByVal SessionID As String)
            Me.ParcelOutBoxInProcessAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelOutBoxInProcessAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.ParcelOutBoxInProcessOperationCompleted Is Nothing) Then
                Me.ParcelOutBoxInProcessOperationCompleted = AddressOf Me.OnParcelOutBoxInProcessOperationCompleted
            End If
            Me.InvokeAsync("ParcelOutBoxInProcess", New Object() {SessionID}, Me.ParcelOutBoxInProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelOutBoxInProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelOutBoxInProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelOutBoxInProcessCompleted(Me, New ParcelOutBoxInProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ParcelOutBoxInProcessEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParcelOutBoxInProcessEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer) As ParcelIDInfoCollection
            Dim results() As Object = Me.Invoke("ParcelOutBoxInProcessEx", New Object() {SessionID, NetworkID, MailboxID})
            Return CType(results(0),ParcelIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParcelOutBoxInProcessExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer)
            Me.ParcelOutBoxInProcessExAsync(SessionID, NetworkID, MailboxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParcelOutBoxInProcessExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal userState As Object)
            If (Me.ParcelOutBoxInProcessExOperationCompleted Is Nothing) Then
                Me.ParcelOutBoxInProcessExOperationCompleted = AddressOf Me.OnParcelOutBoxInProcessExOperationCompleted
            End If
            Me.InvokeAsync("ParcelOutBoxInProcessEx", New Object() {SessionID, NetworkID, MailboxID}, Me.ParcelOutBoxInProcessExOperationCompleted, userState)
        End Sub
        
        Private Sub OnParcelOutBoxInProcessExOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParcelOutBoxInProcessExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParcelOutBoxInProcessExCompleted(Me, New ParcelOutBoxInProcessExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeInfo(ByVal SessionID As String, ByVal InterchangeID As Long) As InterchangeIDInfo
            Dim results() As Object = Me.Invoke("InterchangeInfo", New Object() {SessionID, InterchangeID})
            Return CType(results(0),InterchangeIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeInfoAsync(ByVal SessionID As String, ByVal InterchangeID As Long)
            Me.InterchangeInfoAsync(SessionID, InterchangeID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeInfoAsync(ByVal SessionID As String, ByVal InterchangeID As Long, ByVal userState As Object)
            If (Me.InterchangeInfoOperationCompleted Is Nothing) Then
                Me.InterchangeInfoOperationCompleted = AddressOf Me.OnInterchangeInfoOperationCompleted
            End If
            Me.InvokeAsync("InterchangeInfo", New Object() {SessionID, InterchangeID}, Me.InterchangeInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeInfoCompleted(Me, New InterchangeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeInBox", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeInBox(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String) As InterchangeIDInfo()
            Dim results() As Object = Me.Invoke("InterchangeInBox", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID})
            Return CType(results(0),InterchangeIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeInBoxAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String)
            Me.InterchangeInBoxAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeInBoxAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal userState As Object)
            If (Me.InterchangeInBoxOperationCompleted Is Nothing) Then
                Me.InterchangeInBoxOperationCompleted = AddressOf Me.OnInterchangeInBoxOperationCompleted
            End If
            Me.InvokeAsync("InterchangeInBox", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID}, Me.InterchangeInBoxOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeInBoxOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeInBoxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeInBoxCompleted(Me, New InterchangeInBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterchangeInBoxArchive", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterchangeInBoxArchive(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short) As InterchangeIDInfoCollection
            Dim results() As Object = Me.Invoke("InterchangeInBoxArchive", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage})
            Return CType(results(0),InterchangeIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterchangeInBoxArchiveAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short)
            Me.InterchangeInBoxArchiveAsync(SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterchangeInBoxArchiveAsync(ByVal SessionID As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal ECGridIDFrom As Integer, ByVal ECGridIDTo As Integer, ByVal InterchangeControlID As String, ByVal PageNo As Short, ByVal RecordsPerPage As Short, ByVal userState As Object)
            If (Me.InterchangeInBoxArchiveOperationCompleted Is Nothing) Then
                Me.InterchangeInBoxArchiveOperationCompleted = AddressOf Me.OnInterchangeInBoxArchiveOperationCompleted
            End If
            Me.InvokeAsync("InterchangeInBoxArchive", New Object() {SessionID, BeginDate, EndDate, ECGridIDFrom, ECGridIDTo, InterchangeControlID, PageNo, RecordsPerPage}, Me.InterchangeInBoxArchiveOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterchangeInBoxArchiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterchangeInBoxArchiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterchangeInBoxArchiveCompleted(Me, New InterchangeInBoxArchiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkBackupAllConfigs", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkBackupAllConfigs(ByVal SessionID As String) As String
            Dim results() As Object = Me.Invoke("NetworkBackupAllConfigs", New Object() {SessionID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkBackupAllConfigsAsync(ByVal SessionID As String)
            Me.NetworkBackupAllConfigsAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkBackupAllConfigsAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.NetworkBackupAllConfigsOperationCompleted Is Nothing) Then
                Me.NetworkBackupAllConfigsOperationCompleted = AddressOf Me.OnNetworkBackupAllConfigsOperationCompleted
            End If
            Me.InvokeAsync("NetworkBackupAllConfigs", New Object() {SessionID}, Me.NetworkBackupAllConfigsOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkBackupAllConfigsOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkBackupAllConfigsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkBackupAllConfigsCompleted(Me, New NetworkBackupAllConfigsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxAdd", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxAdd(ByVal SessionID As String, ByVal Name As String, ByVal UserID As Integer) As Integer
            Dim results() As Object = Me.Invoke("MailboxAdd", New Object() {SessionID, Name, UserID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxAddAsync(ByVal SessionID As String, ByVal Name As String, ByVal UserID As Integer)
            Me.MailboxAddAsync(SessionID, Name, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxAddAsync(ByVal SessionID As String, ByVal Name As String, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.MailboxAddOperationCompleted Is Nothing) Then
                Me.MailboxAddOperationCompleted = AddressOf Me.OnMailboxAddOperationCompleted
            End If
            Me.InvokeAsync("MailboxAdd", New Object() {SessionID, Name, UserID}, Me.MailboxAddOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxAddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxAddCompleted(Me, New MailboxAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxAddEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxAddEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Name As String, ByVal UserID As String) As Integer
            Dim results() As Object = Me.Invoke("MailboxAddEx", New Object() {SessionID, NetworkID, Name, UserID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxAddExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Name As String, ByVal UserID As String)
            Me.MailboxAddExAsync(SessionID, NetworkID, Name, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxAddExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Name As String, ByVal UserID As String, ByVal userState As Object)
            If (Me.MailboxAddExOperationCompleted Is Nothing) Then
                Me.MailboxAddExOperationCompleted = AddressOf Me.OnMailboxAddExOperationCompleted
            End If
            Me.InvokeAsync("MailboxAddEx", New Object() {SessionID, NetworkID, Name, UserID}, Me.MailboxAddExOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxAddExOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxAddExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxAddExCompleted(Me, New MailboxAddExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxActivate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxActivate(ByVal SessionID As String, ByVal MailboxID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("MailboxActivate", New Object() {SessionID, MailboxID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxActivateAsync(ByVal SessionID As String, ByVal MailboxID As Integer)
            Me.MailboxActivateAsync(SessionID, MailboxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxActivateAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal userState As Object)
            If (Me.MailboxActivateOperationCompleted Is Nothing) Then
                Me.MailboxActivateOperationCompleted = AddressOf Me.OnMailboxActivateOperationCompleted
            End If
            Me.InvokeAsync("MailboxActivate", New Object() {SessionID, MailboxID}, Me.MailboxActivateOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxActivateOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxActivateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxActivateCompleted(Me, New MailboxActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxSuspend", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxSuspend(ByVal SessionID As String, ByVal MailboxID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("MailboxSuspend", New Object() {SessionID, MailboxID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxSuspendAsync(ByVal SessionID As String, ByVal MailboxID As Integer)
            Me.MailboxSuspendAsync(SessionID, MailboxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxSuspendAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal userState As Object)
            If (Me.MailboxSuspendOperationCompleted Is Nothing) Then
                Me.MailboxSuspendOperationCompleted = AddressOf Me.OnMailboxSuspendOperationCompleted
            End If
            Me.InvokeAsync("MailboxSuspend", New Object() {SessionID, MailboxID}, Me.MailboxSuspendOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxSuspendOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxSuspendCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxSuspendCompleted(Me, New MailboxSuspendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxTerminate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxTerminate(ByVal SessionID As String, ByVal MailboxID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("MailboxTerminate", New Object() {SessionID, MailboxID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxTerminateAsync(ByVal SessionID As String, ByVal MailboxID As Integer)
            Me.MailboxTerminateAsync(SessionID, MailboxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxTerminateAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal userState As Object)
            If (Me.MailboxTerminateOperationCompleted Is Nothing) Then
                Me.MailboxTerminateOperationCompleted = AddressOf Me.OnMailboxTerminateOperationCompleted
            End If
            Me.InvokeAsync("MailboxTerminate", New Object() {SessionID, MailboxID}, Me.MailboxTerminateOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxTerminateOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxTerminateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxTerminateCompleted(Me, New MailboxTerminateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxManaged", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxManaged(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal Managed As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("MailboxManaged", New Object() {SessionID, MailboxID, Managed})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxManagedAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal Managed As Boolean)
            Me.MailboxManagedAsync(SessionID, MailboxID, Managed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxManagedAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal Managed As Boolean, ByVal userState As Object)
            If (Me.MailboxManagedOperationCompleted Is Nothing) Then
                Me.MailboxManagedOperationCompleted = AddressOf Me.OnMailboxManagedOperationCompleted
            End If
            Me.InvokeAsync("MailboxManaged", New Object() {SessionID, MailboxID, Managed}, Me.MailboxManagedOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxManagedOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxManagedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxManagedCompleted(Me, New MailboxManagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxInfo(ByVal SessionID As String, ByVal MailboxID As Integer) As MailboxIDInfo
            Dim results() As Object = Me.Invoke("MailboxInfo", New Object() {SessionID, MailboxID})
            Return CType(results(0),MailboxIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxInfoAsync(ByVal SessionID As String, ByVal MailboxID As Integer)
            Me.MailboxInfoAsync(SessionID, MailboxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxInfoAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal userState As Object)
            If (Me.MailboxInfoOperationCompleted Is Nothing) Then
                Me.MailboxInfoOperationCompleted = AddressOf Me.OnMailboxInfoOperationCompleted
            End If
            Me.InvokeAsync("MailboxInfo", New Object() {SessionID, MailboxID}, Me.MailboxInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxInfoCompleted(Me, New MailboxInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxName", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxName(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal Name As String) As Boolean
            Dim results() As Object = Me.Invoke("MailboxName", New Object() {SessionID, MailboxID, Name})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxNameAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal Name As String)
            Me.MailboxNameAsync(SessionID, MailboxID, Name, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxNameAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal Name As String, ByVal userState As Object)
            If (Me.MailboxNameOperationCompleted Is Nothing) Then
                Me.MailboxNameOperationCompleted = AddressOf Me.OnMailboxNameOperationCompleted
            End If
            Me.InvokeAsync("MailboxName", New Object() {SessionID, MailboxID, Name}, Me.MailboxNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxNameCompleted(Me, New MailboxNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxSetContact", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxSetContact(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer, ByVal ContactType As NetworkContactType) As Boolean
            Dim results() As Object = Me.Invoke("MailboxSetContact", New Object() {SessionID, MailboxID, UserID, ContactType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxSetContactAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer, ByVal ContactType As NetworkContactType)
            Me.MailboxSetContactAsync(SessionID, MailboxID, UserID, ContactType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxSetContactAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer, ByVal ContactType As NetworkContactType, ByVal userState As Object)
            If (Me.MailboxSetContactOperationCompleted Is Nothing) Then
                Me.MailboxSetContactOperationCompleted = AddressOf Me.OnMailboxSetContactOperationCompleted
            End If
            Me.InvokeAsync("MailboxSetContact", New Object() {SessionID, MailboxID, UserID, ContactType}, Me.MailboxSetContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxSetContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxSetContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxSetContactCompleted(Me, New MailboxSetContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxOwnerContact", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxOwnerContact(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("MailboxOwnerContact", New Object() {SessionID, MailboxID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxOwnerContactAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer)
            Me.MailboxOwnerContactAsync(SessionID, MailboxID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxOwnerContactAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.MailboxOwnerContactOperationCompleted Is Nothing) Then
                Me.MailboxOwnerContactOperationCompleted = AddressOf Me.OnMailboxOwnerContactOperationCompleted
            End If
            Me.InvokeAsync("MailboxOwnerContact", New Object() {SessionID, MailboxID, UserID}, Me.MailboxOwnerContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxOwnerContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxOwnerContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxOwnerContactCompleted(Me, New MailboxOwnerContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxErrorsContact", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxErrorsContact(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("MailboxErrorsContact", New Object() {SessionID, MailboxID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxErrorsContactAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer)
            Me.MailboxErrorsContactAsync(SessionID, MailboxID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxErrorsContactAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.MailboxErrorsContactOperationCompleted Is Nothing) Then
                Me.MailboxErrorsContactOperationCompleted = AddressOf Me.OnMailboxErrorsContactOperationCompleted
            End If
            Me.InvokeAsync("MailboxErrorsContact", New Object() {SessionID, MailboxID, UserID}, Me.MailboxErrorsContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxErrorsContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxErrorsContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxErrorsContactCompleted(Me, New MailboxErrorsContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxInterconnectsContact", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxInterconnectsContact(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("MailboxInterconnectsContact", New Object() {SessionID, MailboxID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxInterconnectsContactAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer)
            Me.MailboxInterconnectsContactAsync(SessionID, MailboxID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxInterconnectsContactAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.MailboxInterconnectsContactOperationCompleted Is Nothing) Then
                Me.MailboxInterconnectsContactOperationCompleted = AddressOf Me.OnMailboxInterconnectsContactOperationCompleted
            End If
            Me.InvokeAsync("MailboxInterconnectsContact", New Object() {SessionID, MailboxID, UserID}, Me.MailboxInterconnectsContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxInterconnectsContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxInterconnectsContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxInterconnectsContactCompleted(Me, New MailboxInterconnectsContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxNoticesContact", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxNoticesContact(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("MailboxNoticesContact", New Object() {SessionID, MailboxID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxNoticesContactAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer)
            Me.MailboxNoticesContactAsync(SessionID, MailboxID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxNoticesContactAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.MailboxNoticesContactOperationCompleted Is Nothing) Then
                Me.MailboxNoticesContactOperationCompleted = AddressOf Me.OnMailboxNoticesContactOperationCompleted
            End If
            Me.InvokeAsync("MailboxNoticesContact", New Object() {SessionID, MailboxID, UserID}, Me.MailboxNoticesContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxNoticesContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxNoticesContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxNoticesContactCompleted(Me, New MailboxNoticesContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxX12Delimiters", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxX12Delimiters(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal SegTerm As Byte, ByVal ElmSep As Byte, ByVal SubElmSep As Byte) As Boolean
            Dim results() As Object = Me.Invoke("MailboxX12Delimiters", New Object() {SessionID, MailboxID, SegTerm, ElmSep, SubElmSep})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxX12DelimitersAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal SegTerm As Byte, ByVal ElmSep As Byte, ByVal SubElmSep As Byte)
            Me.MailboxX12DelimitersAsync(SessionID, MailboxID, SegTerm, ElmSep, SubElmSep, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxX12DelimitersAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal SegTerm As Byte, ByVal ElmSep As Byte, ByVal SubElmSep As Byte, ByVal userState As Object)
            If (Me.MailboxX12DelimitersOperationCompleted Is Nothing) Then
                Me.MailboxX12DelimitersOperationCompleted = AddressOf Me.OnMailboxX12DelimitersOperationCompleted
            End If
            Me.InvokeAsync("MailboxX12Delimiters", New Object() {SessionID, MailboxID, SegTerm, ElmSep, SubElmSep}, Me.MailboxX12DelimitersOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxX12DelimitersOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxX12DelimitersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxX12DelimitersCompleted(Me, New MailboxX12DelimitersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxInBoxTimeout", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxInBoxTimeout(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal Minutes As Short) As Boolean
            Dim results() As Object = Me.Invoke("MailboxInBoxTimeout", New Object() {SessionID, MailboxID, Minutes})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxInBoxTimeoutAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal Minutes As Short)
            Me.MailboxInBoxTimeoutAsync(SessionID, MailboxID, Minutes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxInBoxTimeoutAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal Minutes As Short, ByVal userState As Object)
            If (Me.MailboxInBoxTimeoutOperationCompleted Is Nothing) Then
                Me.MailboxInBoxTimeoutOperationCompleted = AddressOf Me.OnMailboxInBoxTimeoutOperationCompleted
            End If
            Me.InvokeAsync("MailboxInBoxTimeout", New Object() {SessionID, MailboxID, Minutes}, Me.MailboxInBoxTimeoutOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxInBoxTimeoutOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxInBoxTimeoutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxInBoxTimeoutCompleted(Me, New MailboxInBoxTimeoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxDescription", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxDescription(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal Description As String) As Boolean
            Dim results() As Object = Me.Invoke("MailboxDescription", New Object() {SessionID, MailboxID, Description})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxDescriptionAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal Description As String)
            Me.MailboxDescriptionAsync(SessionID, MailboxID, Description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxDescriptionAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal Description As String, ByVal userState As Object)
            If (Me.MailboxDescriptionOperationCompleted Is Nothing) Then
                Me.MailboxDescriptionOperationCompleted = AddressOf Me.OnMailboxDescriptionOperationCompleted
            End If
            Me.InvokeAsync("MailboxDescription", New Object() {SessionID, MailboxID, Description}, Me.MailboxDescriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxDescriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxDescriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxDescriptionCompleted(Me, New MailboxDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxUse", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxUse(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UseType As UseType) As Boolean
            Dim results() As Object = Me.Invoke("MailboxUse", New Object() {SessionID, MailboxID, UseType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxUseAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UseType As UseType)
            Me.MailboxUseAsync(SessionID, MailboxID, UseType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxUseAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal UseType As UseType, ByVal userState As Object)
            If (Me.MailboxUseOperationCompleted Is Nothing) Then
                Me.MailboxUseOperationCompleted = AddressOf Me.OnMailboxUseOperationCompleted
            End If
            Me.InvokeAsync("MailboxUse", New Object() {SessionID, MailboxID, UseType}, Me.MailboxUseOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxUseOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxUseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxUseCompleted(Me, New MailboxUseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxList(ByVal SessionID As String, ByVal Name As String) As MailboxIDInfo()
            Dim results() As Object = Me.Invoke("MailboxList", New Object() {SessionID, Name})
            Return CType(results(0),MailboxIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxListAsync(ByVal SessionID As String, ByVal Name As String)
            Me.MailboxListAsync(SessionID, Name, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxListAsync(ByVal SessionID As String, ByVal Name As String, ByVal userState As Object)
            If (Me.MailboxListOperationCompleted Is Nothing) Then
                Me.MailboxListOperationCompleted = AddressOf Me.OnMailboxListOperationCompleted
            End If
            Me.InvokeAsync("MailboxList", New Object() {SessionID, Name}, Me.MailboxListOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxListOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxListCompleted(Me, New MailboxListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/MailboxListEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MailboxListEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Name As String) As MailboxIDInfo()
            Dim results() As Object = Me.Invoke("MailboxListEx", New Object() {SessionID, NetworkID, Name})
            Return CType(results(0),MailboxIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub MailboxListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Name As String)
            Me.MailboxListExAsync(SessionID, NetworkID, Name, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MailboxListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Name As String, ByVal userState As Object)
            If (Me.MailboxListExOperationCompleted Is Nothing) Then
                Me.MailboxListExOperationCompleted = AddressOf Me.OnMailboxListExOperationCompleted
            End If
            Me.InvokeAsync("MailboxListEx", New Object() {SessionID, NetworkID, Name}, Me.MailboxListExOperationCompleted, userState)
        End Sub
        
        Private Sub OnMailboxListExOperationCompleted(ByVal arg As Object)
            If (Not (Me.MailboxListExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MailboxListExCompleted(Me, New MailboxListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPAdd", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPAdd(ByVal SessionID As String, ByVal Qualifier As String, ByVal ID As String, ByVal Description As String) As Integer
            Dim results() As Object = Me.Invoke("TPAdd", New Object() {SessionID, Qualifier, ID, Description})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPAddAsync(ByVal SessionID As String, ByVal Qualifier As String, ByVal ID As String, ByVal Description As String)
            Me.TPAddAsync(SessionID, Qualifier, ID, Description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPAddAsync(ByVal SessionID As String, ByVal Qualifier As String, ByVal ID As String, ByVal Description As String, ByVal userState As Object)
            If (Me.TPAddOperationCompleted Is Nothing) Then
                Me.TPAddOperationCompleted = AddressOf Me.OnTPAddOperationCompleted
            End If
            Me.InvokeAsync("TPAdd", New Object() {SessionID, Qualifier, ID, Description}, Me.TPAddOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPAddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPAddCompleted(Me, New TPAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPAddVAN", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPAddVAN(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Qualifier As String, ByVal ID As String, ByVal Description As String) As Integer
            Dim results() As Object = Me.Invoke("TPAddVAN", New Object() {SessionID, NetworkID, Qualifier, ID, Description})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPAddVANAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Qualifier As String, ByVal ID As String, ByVal Description As String)
            Me.TPAddVANAsync(SessionID, NetworkID, Qualifier, ID, Description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPAddVANAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Qualifier As String, ByVal ID As String, ByVal Description As String, ByVal userState As Object)
            If (Me.TPAddVANOperationCompleted Is Nothing) Then
                Me.TPAddVANOperationCompleted = AddressOf Me.OnTPAddVANOperationCompleted
            End If
            Me.InvokeAsync("TPAddVAN", New Object() {SessionID, NetworkID, Qualifier, ID, Description}, Me.TPAddVANOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPAddVANOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPAddVANCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPAddVANCompleted(Me, New TPAddVANCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPAddEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPAddEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Qualifier As String, ByVal ID As String, ByVal Description As String, ByVal RoutingGroup As RoutingGroup) As Integer
            Dim results() As Object = Me.Invoke("TPAddEx", New Object() {SessionID, NetworkID, MailboxID, Qualifier, ID, Description, RoutingGroup})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPAddExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Qualifier As String, ByVal ID As String, ByVal Description As String, ByVal RoutingGroup As RoutingGroup)
            Me.TPAddExAsync(SessionID, NetworkID, MailboxID, Qualifier, ID, Description, RoutingGroup, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPAddExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Qualifier As String, ByVal ID As String, ByVal Description As String, ByVal RoutingGroup As RoutingGroup, ByVal userState As Object)
            If (Me.TPAddExOperationCompleted Is Nothing) Then
                Me.TPAddExOperationCompleted = AddressOf Me.OnTPAddExOperationCompleted
            End If
            Me.InvokeAsync("TPAddEx", New Object() {SessionID, NetworkID, MailboxID, Qualifier, ID, Description, RoutingGroup}, Me.TPAddExOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPAddExOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPAddExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPAddExCompleted(Me, New TPAddExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPMove", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPMove(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal MoveDateTime As Date) As Integer
            Dim results() As Object = Me.Invoke("TPMove", New Object() {SessionID, ECGridID, MoveDateTime})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPMoveAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal MoveDateTime As Date)
            Me.TPMoveAsync(SessionID, ECGridID, MoveDateTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPMoveAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal MoveDateTime As Date, ByVal userState As Object)
            If (Me.TPMoveOperationCompleted Is Nothing) Then
                Me.TPMoveOperationCompleted = AddressOf Me.OnTPMoveOperationCompleted
            End If
            Me.InvokeAsync("TPMove", New Object() {SessionID, ECGridID, MoveDateTime}, Me.TPMoveOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPMoveOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPMoveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPMoveCompleted(Me, New TPMoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPMoveMailbox", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPMoveMailbox(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal MailboxID As Integer) As Integer
            Dim results() As Object = Me.Invoke("TPMoveMailbox", New Object() {SessionID, ECGridID, MailboxID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPMoveMailboxAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal MailboxID As Integer)
            Me.TPMoveMailboxAsync(SessionID, ECGridID, MailboxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPMoveMailboxAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal MailboxID As Integer, ByVal userState As Object)
            If (Me.TPMoveMailboxOperationCompleted Is Nothing) Then
                Me.TPMoveMailboxOperationCompleted = AddressOf Me.OnTPMoveMailboxOperationCompleted
            End If
            Me.InvokeAsync("TPMoveMailbox", New Object() {SessionID, ECGridID, MailboxID}, Me.TPMoveMailboxOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPMoveMailboxOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPMoveMailboxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPMoveMailboxCompleted(Me, New TPMoveMailboxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPMoveEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPMoveEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridID As Integer, ByVal MoveDateTime As Date) As Integer
            Dim results() As Object = Me.Invoke("TPMoveEx", New Object() {SessionID, NetworkID, MailboxID, ECGridID, MoveDateTime})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPMoveExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridID As Integer, ByVal MoveDateTime As Date)
            Me.TPMoveExAsync(SessionID, NetworkID, MailboxID, ECGridID, MoveDateTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPMoveExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ECGridID As Integer, ByVal MoveDateTime As Date, ByVal userState As Object)
            If (Me.TPMoveExOperationCompleted Is Nothing) Then
                Me.TPMoveExOperationCompleted = AddressOf Me.OnTPMoveExOperationCompleted
            End If
            Me.InvokeAsync("TPMoveEx", New Object() {SessionID, NetworkID, MailboxID, ECGridID, MoveDateTime}, Me.TPMoveExOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPMoveExOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPMoveExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPMoveExCompleted(Me, New TPMoveExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPUpdateDescription", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPUpdateDescription(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal Description As String) As Boolean
            Dim results() As Object = Me.Invoke("TPUpdateDescription", New Object() {SessionID, ECGridID, Description})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPUpdateDescriptionAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal Description As String)
            Me.TPUpdateDescriptionAsync(SessionID, ECGridID, Description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPUpdateDescriptionAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal Description As String, ByVal userState As Object)
            If (Me.TPUpdateDescriptionOperationCompleted Is Nothing) Then
                Me.TPUpdateDescriptionOperationCompleted = AddressOf Me.OnTPUpdateDescriptionOperationCompleted
            End If
            Me.InvokeAsync("TPUpdateDescription", New Object() {SessionID, ECGridID, Description}, Me.TPUpdateDescriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPUpdateDescriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPUpdateDescriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPUpdateDescriptionCompleted(Me, New TPUpdateDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPUpdateDataEMail", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPUpdateDataEMail(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal EMailSystem As EMailSystem, ByVal DataEMail As String, ByVal PayloadPosition As EMailPayload) As Boolean
            Dim results() As Object = Me.Invoke("TPUpdateDataEMail", New Object() {SessionID, ECGridID, EMailSystem, DataEMail, PayloadPosition})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPUpdateDataEMailAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal EMailSystem As EMailSystem, ByVal DataEMail As String, ByVal PayloadPosition As EMailPayload)
            Me.TPUpdateDataEMailAsync(SessionID, ECGridID, EMailSystem, DataEMail, PayloadPosition, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPUpdateDataEMailAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal EMailSystem As EMailSystem, ByVal DataEMail As String, ByVal PayloadPosition As EMailPayload, ByVal userState As Object)
            If (Me.TPUpdateDataEMailOperationCompleted Is Nothing) Then
                Me.TPUpdateDataEMailOperationCompleted = AddressOf Me.OnTPUpdateDataEMailOperationCompleted
            End If
            Me.InvokeAsync("TPUpdateDataEMail", New Object() {SessionID, ECGridID, EMailSystem, DataEMail, PayloadPosition}, Me.TPUpdateDataEMailOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPUpdateDataEMailOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPUpdateDataEMailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPUpdateDataEMailCompleted(Me, New TPUpdateDataEMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPActivate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPActivate(ByVal SessionID As String, ByVal ECGridID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("TPActivate", New Object() {SessionID, ECGridID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPActivateAsync(ByVal SessionID As String, ByVal ECGridID As Integer)
            Me.TPActivateAsync(SessionID, ECGridID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPActivateAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal userState As Object)
            If (Me.TPActivateOperationCompleted Is Nothing) Then
                Me.TPActivateOperationCompleted = AddressOf Me.OnTPActivateOperationCompleted
            End If
            Me.InvokeAsync("TPActivate", New Object() {SessionID, ECGridID}, Me.TPActivateOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPActivateOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPActivateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPActivateCompleted(Me, New TPActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPSuspend", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPSuspend(ByVal SessionID As String, ByVal ECGridID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("TPSuspend", New Object() {SessionID, ECGridID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPSuspendAsync(ByVal SessionID As String, ByVal ECGridID As Integer)
            Me.TPSuspendAsync(SessionID, ECGridID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPSuspendAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal userState As Object)
            If (Me.TPSuspendOperationCompleted Is Nothing) Then
                Me.TPSuspendOperationCompleted = AddressOf Me.OnTPSuspendOperationCompleted
            End If
            Me.InvokeAsync("TPSuspend", New Object() {SessionID, ECGridID}, Me.TPSuspendOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPSuspendOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPSuspendCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPSuspendCompleted(Me, New TPSuspendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPTerminate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPTerminate(ByVal SessionID As String, ByVal ECGridID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("TPTerminate", New Object() {SessionID, ECGridID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPTerminateAsync(ByVal SessionID As String, ByVal ECGridID As Integer)
            Me.TPTerminateAsync(SessionID, ECGridID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPTerminateAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal userState As Object)
            If (Me.TPTerminateOperationCompleted Is Nothing) Then
                Me.TPTerminateOperationCompleted = AddressOf Me.OnTPTerminateOperationCompleted
            End If
            Me.InvokeAsync("TPTerminate", New Object() {SessionID, ECGridID}, Me.TPTerminateOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPTerminateOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPTerminateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPTerminateCompleted(Me, New TPTerminateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPSetRoutingGroup", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPSetRoutingGroup(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal RoutingGroup As RoutingGroup) As Boolean
            Dim results() As Object = Me.Invoke("TPSetRoutingGroup", New Object() {SessionID, ECGridID, RoutingGroup})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPSetRoutingGroupAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal RoutingGroup As RoutingGroup)
            Me.TPSetRoutingGroupAsync(SessionID, ECGridID, RoutingGroup, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPSetRoutingGroupAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal RoutingGroup As RoutingGroup, ByVal userState As Object)
            If (Me.TPSetRoutingGroupOperationCompleted Is Nothing) Then
                Me.TPSetRoutingGroupOperationCompleted = AddressOf Me.OnTPSetRoutingGroupOperationCompleted
            End If
            Me.InvokeAsync("TPSetRoutingGroup", New Object() {SessionID, ECGridID, RoutingGroup}, Me.TPSetRoutingGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPSetRoutingGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPSetRoutingGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPSetRoutingGroupCompleted(Me, New TPSetRoutingGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPInfo(ByVal SessionID As String, ByVal ECGridID As Integer) As ECGridIDInfo
            Dim results() As Object = Me.Invoke("TPInfo", New Object() {SessionID, ECGridID})
            Return CType(results(0),ECGridIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPInfoAsync(ByVal SessionID As String, ByVal ECGridID As Integer)
            Me.TPInfoAsync(SessionID, ECGridID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPInfoAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal userState As Object)
            If (Me.TPInfoOperationCompleted Is Nothing) Then
                Me.TPInfoOperationCompleted = AddressOf Me.OnTPInfoOperationCompleted
            End If
            Me.InvokeAsync("TPInfo", New Object() {SessionID, ECGridID}, Me.TPInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPInfoCompleted(Me, New TPInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPSearch", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPSearch(ByVal SessionID As String, ByVal Qualifier As String, ByVal ID As String, ByVal ShowInactive As Boolean) As ECGridIDInfo()
            Dim results() As Object = Me.Invoke("TPSearch", New Object() {SessionID, Qualifier, ID, ShowInactive})
            Return CType(results(0),ECGridIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPSearchAsync(ByVal SessionID As String, ByVal Qualifier As String, ByVal ID As String, ByVal ShowInactive As Boolean)
            Me.TPSearchAsync(SessionID, Qualifier, ID, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPSearchAsync(ByVal SessionID As String, ByVal Qualifier As String, ByVal ID As String, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.TPSearchOperationCompleted Is Nothing) Then
                Me.TPSearchOperationCompleted = AddressOf Me.OnTPSearchOperationCompleted
            End If
            Me.InvokeAsync("TPSearch", New Object() {SessionID, Qualifier, ID, ShowInactive}, Me.TPSearchOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPSearchOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPSearchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPSearchCompleted(Me, New TPSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPSearchEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPSearchEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Qualifier As String, ByVal ID As String, ByVal ShowInactive As Boolean) As ECGridIDInfo()
            Dim results() As Object = Me.Invoke("TPSearchEx", New Object() {SessionID, NetworkID, MailboxID, Qualifier, ID, ShowInactive})
            Return CType(results(0),ECGridIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPSearchExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Qualifier As String, ByVal ID As String, ByVal ShowInactive As Boolean)
            Me.TPSearchExAsync(SessionID, NetworkID, MailboxID, Qualifier, ID, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPSearchExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Qualifier As String, ByVal ID As String, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.TPSearchExOperationCompleted Is Nothing) Then
                Me.TPSearchExOperationCompleted = AddressOf Me.OnTPSearchExOperationCompleted
            End If
            Me.InvokeAsync("TPSearchEx", New Object() {SessionID, NetworkID, MailboxID, Qualifier, ID, ShowInactive}, Me.TPSearchExOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPSearchExOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPSearchExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPSearchExCompleted(Me, New TPSearchExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPList(ByVal SessionID As String, ByVal ShowInactive As Boolean) As ECGridIDInfo()
            Dim results() As Object = Me.Invoke("TPList", New Object() {SessionID, ShowInactive})
            Return CType(results(0),ECGridIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPListAsync(ByVal SessionID As String, ByVal ShowInactive As Boolean)
            Me.TPListAsync(SessionID, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPListAsync(ByVal SessionID As String, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.TPListOperationCompleted Is Nothing) Then
                Me.TPListOperationCompleted = AddressOf Me.OnTPListOperationCompleted
            End If
            Me.InvokeAsync("TPList", New Object() {SessionID, ShowInactive}, Me.TPListOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPListOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPListCompleted(Me, New TPListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPListEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPListEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ShowInactive As Boolean) As ECGridIDInfo()
            Dim results() As Object = Me.Invoke("TPListEx", New Object() {SessionID, NetworkID, MailboxID, ShowInactive})
            Return CType(results(0),ECGridIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ShowInactive As Boolean)
            Me.TPListExAsync(SessionID, NetworkID, MailboxID, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.TPListExOperationCompleted Is Nothing) Then
                Me.TPListExOperationCompleted = AddressOf Me.OnTPListExOperationCompleted
            End If
            Me.InvokeAsync("TPListEx", New Object() {SessionID, NetworkID, MailboxID, ShowInactive}, Me.TPListExOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPListExOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPListExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPListExCompleted(Me, New TPListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPListExPaged", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPListExPaged(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ShowInactive As Boolean, ByVal PageSize As Short, ByVal PageNumber As Short) As ECGridIDInfoCollection
            Dim results() As Object = Me.Invoke("TPListExPaged", New Object() {SessionID, NetworkID, MailboxID, ShowInactive, PageSize, PageNumber})
            Return CType(results(0),ECGridIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPListExPagedAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ShowInactive As Boolean, ByVal PageSize As Short, ByVal PageNumber As Short)
            Me.TPListExPagedAsync(SessionID, NetworkID, MailboxID, ShowInactive, PageSize, PageNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPListExPagedAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal ShowInactive As Boolean, ByVal PageSize As Short, ByVal PageNumber As Short, ByVal userState As Object)
            If (Me.TPListExPagedOperationCompleted Is Nothing) Then
                Me.TPListExPagedOperationCompleted = AddressOf Me.OnTPListExPagedOperationCompleted
            End If
            Me.InvokeAsync("TPListExPaged", New Object() {SessionID, NetworkID, MailboxID, ShowInactive, PageSize, PageNumber}, Me.TPListExPagedOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPListExPagedOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPListExPagedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPListExPagedCompleted(Me, New TPListExPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPListByOwner", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPListByOwner(ByVal SessionID As String, ByVal OwnerUserID As Integer, ByVal OrderBy As OrderBy, ByVal ShowInactive As Boolean, ByVal PageSize As Short, ByVal PageNumber As Short) As ECGridIDInfoCollection
            Dim results() As Object = Me.Invoke("TPListByOwner", New Object() {SessionID, OwnerUserID, OrderBy, ShowInactive, PageSize, PageNumber})
            Return CType(results(0),ECGridIDInfoCollection)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPListByOwnerAsync(ByVal SessionID As String, ByVal OwnerUserID As Integer, ByVal OrderBy As OrderBy, ByVal ShowInactive As Boolean, ByVal PageSize As Short, ByVal PageNumber As Short)
            Me.TPListByOwnerAsync(SessionID, OwnerUserID, OrderBy, ShowInactive, PageSize, PageNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPListByOwnerAsync(ByVal SessionID As String, ByVal OwnerUserID As Integer, ByVal OrderBy As OrderBy, ByVal ShowInactive As Boolean, ByVal PageSize As Short, ByVal PageNumber As Short, ByVal userState As Object)
            If (Me.TPListByOwnerOperationCompleted Is Nothing) Then
                Me.TPListByOwnerOperationCompleted = AddressOf Me.OnTPListByOwnerOperationCompleted
            End If
            Me.InvokeAsync("TPListByOwner", New Object() {SessionID, OwnerUserID, OrderBy, ShowInactive, PageSize, PageNumber}, Me.TPListByOwnerOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPListByOwnerOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPListByOwnerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPListByOwnerCompleted(Me, New TPListByOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPFindEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPFindEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Description As String, ByVal ShowInactive As Boolean) As ECGridIDInfo()
            Dim results() As Object = Me.Invoke("TPFindEx", New Object() {SessionID, NetworkID, MailboxID, Description, ShowInactive})
            Return CType(results(0),ECGridIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPFindExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Description As String, ByVal ShowInactive As Boolean)
            Me.TPFindExAsync(SessionID, NetworkID, MailboxID, Description, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPFindExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Description As String, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.TPFindExOperationCompleted Is Nothing) Then
                Me.TPFindExOperationCompleted = AddressOf Me.OnTPFindExOperationCompleted
            End If
            Me.InvokeAsync("TPFindEx", New Object() {SessionID, NetworkID, MailboxID, Description, ShowInactive}, Me.TPFindExOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPFindExOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPFindExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPFindExCompleted(Me, New TPFindExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPGetMailboxDefault", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPGetMailboxDefault(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer) As ECGridIDInfo
            Dim results() As Object = Me.Invoke("TPGetMailboxDefault", New Object() {SessionID, NetworkID, MailboxID})
            Return CType(results(0),ECGridIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPGetMailboxDefaultAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer)
            Me.TPGetMailboxDefaultAsync(SessionID, NetworkID, MailboxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPGetMailboxDefaultAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal userState As Object)
            If (Me.TPGetMailboxDefaultOperationCompleted Is Nothing) Then
                Me.TPGetMailboxDefaultOperationCompleted = AddressOf Me.OnTPGetMailboxDefaultOperationCompleted
            End If
            Me.InvokeAsync("TPGetMailboxDefault", New Object() {SessionID, NetworkID, MailboxID}, Me.TPGetMailboxDefaultOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPGetMailboxDefaultOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPGetMailboxDefaultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPGetMailboxDefaultCompleted(Me, New TPGetMailboxDefaultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPSetMailboxDefault", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPSetMailboxDefault(ByVal SessionID As String, ByVal ECGridID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("TPSetMailboxDefault", New Object() {SessionID, ECGridID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPSetMailboxDefaultAsync(ByVal SessionID As String, ByVal ECGridID As Integer)
            Me.TPSetMailboxDefaultAsync(SessionID, ECGridID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPSetMailboxDefaultAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal userState As Object)
            If (Me.TPSetMailboxDefaultOperationCompleted Is Nothing) Then
                Me.TPSetMailboxDefaultOperationCompleted = AddressOf Me.OnTPSetMailboxDefaultOperationCompleted
            End If
            Me.InvokeAsync("TPSetMailboxDefault", New Object() {SessionID, ECGridID}, Me.TPSetMailboxDefaultOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPSetMailboxDefaultOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPSetMailboxDefaultCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPSetMailboxDefaultCompleted(Me, New TPSetMailboxDefaultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/TPSetOwner", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TPSetOwner(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal OwnerUserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("TPSetOwner", New Object() {SessionID, ECGridID, OwnerUserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TPSetOwnerAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal OwnerUserID As Integer)
            Me.TPSetOwnerAsync(SessionID, ECGridID, OwnerUserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TPSetOwnerAsync(ByVal SessionID As String, ByVal ECGridID As Integer, ByVal OwnerUserID As Integer, ByVal userState As Object)
            If (Me.TPSetOwnerOperationCompleted Is Nothing) Then
                Me.TPSetOwnerOperationCompleted = AddressOf Me.OnTPSetOwnerOperationCompleted
            End If
            Me.InvokeAsync("TPSetOwner", New Object() {SessionID, ECGridID, OwnerUserID}, Me.TPSetOwnerOperationCompleted, userState)
        End Sub
        
        Private Sub OnTPSetOwnerOperationCompleted(ByVal arg As Object)
            If (Not (Me.TPSetOwnerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TPSetOwnerCompleted(Me, New TPSetOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterconnectAdd", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterconnectAdd(ByVal SessionID As String, ByVal ECGridID1 As Integer, ByVal ECGridID2 As Integer, ByVal Reference As String, ByVal ContactName As String, ByVal ContactEMail As String, ByVal NotifyContact As Boolean, ByVal Preconfirm As Boolean, ByVal Note As String) As InterconnectIDInfo
            Dim results() As Object = Me.Invoke("InterconnectAdd", New Object() {SessionID, ECGridID1, ECGridID2, Reference, ContactName, ContactEMail, NotifyContact, Preconfirm, Note})
            Return CType(results(0),InterconnectIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterconnectAddAsync(ByVal SessionID As String, ByVal ECGridID1 As Integer, ByVal ECGridID2 As Integer, ByVal Reference As String, ByVal ContactName As String, ByVal ContactEMail As String, ByVal NotifyContact As Boolean, ByVal Preconfirm As Boolean, ByVal Note As String)
            Me.InterconnectAddAsync(SessionID, ECGridID1, ECGridID2, Reference, ContactName, ContactEMail, NotifyContact, Preconfirm, Note, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterconnectAddAsync(ByVal SessionID As String, ByVal ECGridID1 As Integer, ByVal ECGridID2 As Integer, ByVal Reference As String, ByVal ContactName As String, ByVal ContactEMail As String, ByVal NotifyContact As Boolean, ByVal Preconfirm As Boolean, ByVal Note As String, ByVal userState As Object)
            If (Me.InterconnectAddOperationCompleted Is Nothing) Then
                Me.InterconnectAddOperationCompleted = AddressOf Me.OnInterconnectAddOperationCompleted
            End If
            Me.InvokeAsync("InterconnectAdd", New Object() {SessionID, ECGridID1, ECGridID2, Reference, ContactName, ContactEMail, NotifyContact, Preconfirm, Note}, Me.InterconnectAddOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterconnectAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterconnectAddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterconnectAddCompleted(Me, New InterconnectAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterconnectUpdate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterconnectUpdate(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal Status As StatusInterconnect, ByVal AuthLevel As AuthLevel, ByVal Note As String, ByVal EMailTo As eMailTo, ByVal OtherEMailAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("InterconnectUpdate", New Object() {SessionID, InterconnectID, Status, AuthLevel, Note, EMailTo, OtherEMailAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterconnectUpdateAsync(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal Status As StatusInterconnect, ByVal AuthLevel As AuthLevel, ByVal Note As String, ByVal EMailTo As eMailTo, ByVal OtherEMailAddress As String)
            Me.InterconnectUpdateAsync(SessionID, InterconnectID, Status, AuthLevel, Note, EMailTo, OtherEMailAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterconnectUpdateAsync(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal Status As StatusInterconnect, ByVal AuthLevel As AuthLevel, ByVal Note As String, ByVal EMailTo As eMailTo, ByVal OtherEMailAddress As String, ByVal userState As Object)
            If (Me.InterconnectUpdateOperationCompleted Is Nothing) Then
                Me.InterconnectUpdateOperationCompleted = AddressOf Me.OnInterconnectUpdateOperationCompleted
            End If
            Me.InvokeAsync("InterconnectUpdate", New Object() {SessionID, InterconnectID, Status, AuthLevel, Note, EMailTo, OtherEMailAddress}, Me.InterconnectUpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterconnectUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterconnectUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterconnectUpdateCompleted(Me, New InterconnectUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterconnectNote", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterconnectNote(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal AuthLevel As AuthLevel, ByVal Note As String, ByVal AttachmentName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal AttachmentContent() As Byte, ByVal EMailTo As eMailTo, ByVal OtherEMailAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("InterconnectNote", New Object() {SessionID, InterconnectID, AuthLevel, Note, AttachmentName, AttachmentContent, EMailTo, OtherEMailAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterconnectNoteAsync(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal AuthLevel As AuthLevel, ByVal Note As String, ByVal AttachmentName As String, ByVal AttachmentContent() As Byte, ByVal EMailTo As eMailTo, ByVal OtherEMailAddress As String)
            Me.InterconnectNoteAsync(SessionID, InterconnectID, AuthLevel, Note, AttachmentName, AttachmentContent, EMailTo, OtherEMailAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterconnectNoteAsync(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal AuthLevel As AuthLevel, ByVal Note As String, ByVal AttachmentName As String, ByVal AttachmentContent() As Byte, ByVal EMailTo As eMailTo, ByVal OtherEMailAddress As String, ByVal userState As Object)
            If (Me.InterconnectNoteOperationCompleted Is Nothing) Then
                Me.InterconnectNoteOperationCompleted = AddressOf Me.OnInterconnectNoteOperationCompleted
            End If
            Me.InvokeAsync("InterconnectNote", New Object() {SessionID, InterconnectID, AuthLevel, Note, AttachmentName, AttachmentContent, EMailTo, OtherEMailAddress}, Me.InterconnectNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterconnectNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterconnectNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterconnectNoteCompleted(Me, New InterconnectNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterconnectCancel", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterconnectCancel(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal Note As String, ByVal EMailTo As eMailTo, ByVal OtherEMailAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("InterconnectCancel", New Object() {SessionID, InterconnectID, Note, EMailTo, OtherEMailAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterconnectCancelAsync(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal Note As String, ByVal EMailTo As eMailTo, ByVal OtherEMailAddress As String)
            Me.InterconnectCancelAsync(SessionID, InterconnectID, Note, EMailTo, OtherEMailAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterconnectCancelAsync(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal Note As String, ByVal EMailTo As eMailTo, ByVal OtherEMailAddress As String, ByVal userState As Object)
            If (Me.InterconnectCancelOperationCompleted Is Nothing) Then
                Me.InterconnectCancelOperationCompleted = AddressOf Me.OnInterconnectCancelOperationCompleted
            End If
            Me.InvokeAsync("InterconnectCancel", New Object() {SessionID, InterconnectID, Note, EMailTo, OtherEMailAddress}, Me.InterconnectCancelOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterconnectCancelOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterconnectCancelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterconnectCancelCompleted(Me, New InterconnectCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterconnectInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterconnectInfo(ByVal SessionID As String, ByVal InterconnectID As Integer) As InterconnectIDInfo
            Dim results() As Object = Me.Invoke("InterconnectInfo", New Object() {SessionID, InterconnectID})
            Return CType(results(0),InterconnectIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterconnectInfoAsync(ByVal SessionID As String, ByVal InterconnectID As Integer)
            Me.InterconnectInfoAsync(SessionID, InterconnectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterconnectInfoAsync(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal userState As Object)
            If (Me.InterconnectInfoOperationCompleted Is Nothing) Then
                Me.InterconnectInfoOperationCompleted = AddressOf Me.OnInterconnectInfoOperationCompleted
            End If
            Me.InvokeAsync("InterconnectInfo", New Object() {SessionID, InterconnectID}, Me.InterconnectInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterconnectInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterconnectInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterconnectInfoCompleted(Me, New InterconnectInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterconnectInfoGUID", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterconnectInfoGUID(ByVal SessionID As String, ByVal UniqueID As String) As InterconnectIDInfo
            Dim results() As Object = Me.Invoke("InterconnectInfoGUID", New Object() {SessionID, UniqueID})
            Return CType(results(0),InterconnectIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterconnectInfoGUIDAsync(ByVal SessionID As String, ByVal UniqueID As String)
            Me.InterconnectInfoGUIDAsync(SessionID, UniqueID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterconnectInfoGUIDAsync(ByVal SessionID As String, ByVal UniqueID As String, ByVal userState As Object)
            If (Me.InterconnectInfoGUIDOperationCompleted Is Nothing) Then
                Me.InterconnectInfoGUIDOperationCompleted = AddressOf Me.OnInterconnectInfoGUIDOperationCompleted
            End If
            Me.InvokeAsync("InterconnectInfoGUID", New Object() {SessionID, UniqueID}, Me.InterconnectInfoGUIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterconnectInfoGUIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterconnectInfoGUIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterconnectInfoGUIDCompleted(Me, New InterconnectInfoGUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterconnectNoteList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterconnectNoteList(ByVal SessionID As String, ByVal InterconnectID As Integer) As InterconnectNote()
            Dim results() As Object = Me.Invoke("InterconnectNoteList", New Object() {SessionID, InterconnectID})
            Return CType(results(0),InterconnectNote())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterconnectNoteListAsync(ByVal SessionID As String, ByVal InterconnectID As Integer)
            Me.InterconnectNoteListAsync(SessionID, InterconnectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterconnectNoteListAsync(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal userState As Object)
            If (Me.InterconnectNoteListOperationCompleted Is Nothing) Then
                Me.InterconnectNoteListOperationCompleted = AddressOf Me.OnInterconnectNoteListOperationCompleted
            End If
            Me.InvokeAsync("InterconnectNoteList", New Object() {SessionID, InterconnectID}, Me.InterconnectNoteListOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterconnectNoteListOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterconnectNoteListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterconnectNoteListCompleted(Me, New InterconnectNoteListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterconnectListByECGridID", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterconnectListByECGridID(ByVal SessionID As String, ByVal ECGridID1 As Integer, ByVal ECGridID2 As Integer) As InterconnectIDInfo()
            Dim results() As Object = Me.Invoke("InterconnectListByECGridID", New Object() {SessionID, ECGridID1, ECGridID2})
            Return CType(results(0),InterconnectIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterconnectListByECGridIDAsync(ByVal SessionID As String, ByVal ECGridID1 As Integer, ByVal ECGridID2 As Integer)
            Me.InterconnectListByECGridIDAsync(SessionID, ECGridID1, ECGridID2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterconnectListByECGridIDAsync(ByVal SessionID As String, ByVal ECGridID1 As Integer, ByVal ECGridID2 As Integer, ByVal userState As Object)
            If (Me.InterconnectListByECGridIDOperationCompleted Is Nothing) Then
                Me.InterconnectListByECGridIDOperationCompleted = AddressOf Me.OnInterconnectListByECGridIDOperationCompleted
            End If
            Me.InvokeAsync("InterconnectListByECGridID", New Object() {SessionID, ECGridID1, ECGridID2}, Me.InterconnectListByECGridIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterconnectListByECGridIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterconnectListByECGridIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterconnectListByECGridIDCompleted(Me, New InterconnectListByECGridIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterconnectListByStatus", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterconnectListByStatus(ByVal SessionID As String, ByVal Status As StatusInterconnect, ByVal ECGridID As Integer, ByVal MaxDays As Short) As InterconnectIDInfo()
            Dim results() As Object = Me.Invoke("InterconnectListByStatus", New Object() {SessionID, Status, ECGridID, MaxDays})
            Return CType(results(0),InterconnectIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterconnectListByStatusAsync(ByVal SessionID As String, ByVal Status As StatusInterconnect, ByVal ECGridID As Integer, ByVal MaxDays As Short)
            Me.InterconnectListByStatusAsync(SessionID, Status, ECGridID, MaxDays, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterconnectListByStatusAsync(ByVal SessionID As String, ByVal Status As StatusInterconnect, ByVal ECGridID As Integer, ByVal MaxDays As Short, ByVal userState As Object)
            If (Me.InterconnectListByStatusOperationCompleted Is Nothing) Then
                Me.InterconnectListByStatusOperationCompleted = AddressOf Me.OnInterconnectListByStatusOperationCompleted
            End If
            Me.InvokeAsync("InterconnectListByStatus", New Object() {SessionID, Status, ECGridID, MaxDays}, Me.InterconnectListByStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterconnectListByStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterconnectListByStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterconnectListByStatusCompleted(Me, New InterconnectListByStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterconnectListByStatusEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterconnectListByStatusEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal IntStatus As StatusInterconnect, ByVal ECGridID As Integer, ByVal MaxDays As Short) As InterconnectIDInfo()
            Dim results() As Object = Me.Invoke("InterconnectListByStatusEx", New Object() {SessionID, NetworkID, MailboxID, IntStatus, ECGridID, MaxDays})
            Return CType(results(0),InterconnectIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterconnectListByStatusExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal IntStatus As StatusInterconnect, ByVal ECGridID As Integer, ByVal MaxDays As Short)
            Me.InterconnectListByStatusExAsync(SessionID, NetworkID, MailboxID, IntStatus, ECGridID, MaxDays, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterconnectListByStatusExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal IntStatus As StatusInterconnect, ByVal ECGridID As Integer, ByVal MaxDays As Short, ByVal userState As Object)
            If (Me.InterconnectListByStatusExOperationCompleted Is Nothing) Then
                Me.InterconnectListByStatusExOperationCompleted = AddressOf Me.OnInterconnectListByStatusExOperationCompleted
            End If
            Me.InvokeAsync("InterconnectListByStatusEx", New Object() {SessionID, NetworkID, MailboxID, IntStatus, ECGridID, MaxDays}, Me.InterconnectListByStatusExOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterconnectListByStatusExOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterconnectListByStatusExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterconnectListByStatusExCompleted(Me, New InterconnectListByStatusExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/InterconnectAssignNetOps", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InterconnectAssignNetOps(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal UserID As Integer, ByVal eMailTo As eMailTo) As Boolean
            Dim results() As Object = Me.Invoke("InterconnectAssignNetOps", New Object() {SessionID, InterconnectID, UserID, eMailTo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InterconnectAssignNetOpsAsync(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal UserID As Integer, ByVal eMailTo As eMailTo)
            Me.InterconnectAssignNetOpsAsync(SessionID, InterconnectID, UserID, eMailTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InterconnectAssignNetOpsAsync(ByVal SessionID As String, ByVal InterconnectID As Integer, ByVal UserID As Integer, ByVal eMailTo As eMailTo, ByVal userState As Object)
            If (Me.InterconnectAssignNetOpsOperationCompleted Is Nothing) Then
                Me.InterconnectAssignNetOpsOperationCompleted = AddressOf Me.OnInterconnectAssignNetOpsOperationCompleted
            End If
            Me.InvokeAsync("InterconnectAssignNetOps", New Object() {SessionID, InterconnectID, UserID, eMailTo}, Me.InterconnectAssignNetOpsOperationCompleted, userState)
        End Sub
        
        Private Sub OnInterconnectAssignNetOpsOperationCompleted(ByVal arg As Object)
            If (Not (Me.InterconnectAssignNetOpsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InterconnectAssignNetOpsCompleted(Me, New InterconnectAssignNetOpsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/Login", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Login(ByVal LoginName As String, ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("Login", New Object() {LoginName, Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal LoginName As String, ByVal Password As String)
            Me.LoginAsync(LoginName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal LoginName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.LoginOperationCompleted Is Nothing) Then
                Me.LoginOperationCompleted = AddressOf Me.OnLoginOperationCompleted
            End If
            Me.InvokeAsync("Login", New Object() {LoginName, Password}, Me.LoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginCompleted(Me, New LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/GenerateAPIKey", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GenerateAPIKey(ByVal SessionID As String, ByVal UserID As Integer) As String
            Dim results() As Object = Me.Invoke("GenerateAPIKey", New Object() {SessionID, UserID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GenerateAPIKeyAsync(ByVal SessionID As String, ByVal UserID As Integer)
            Me.GenerateAPIKeyAsync(SessionID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GenerateAPIKeyAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.GenerateAPIKeyOperationCompleted Is Nothing) Then
                Me.GenerateAPIKeyOperationCompleted = AddressOf Me.OnGenerateAPIKeyOperationCompleted
            End If
            Me.InvokeAsync("GenerateAPIKey", New Object() {SessionID, UserID}, Me.GenerateAPIKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGenerateAPIKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GenerateAPIKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GenerateAPIKeyCompleted(Me, New GenerateAPIKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/GeneratePassword", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GeneratePassword(ByVal SessionID As String, ByVal Length As Short) As String
            Dim results() As Object = Me.Invoke("GeneratePassword", New Object() {SessionID, Length})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GeneratePasswordAsync(ByVal SessionID As String, ByVal Length As Short)
            Me.GeneratePasswordAsync(SessionID, Length, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GeneratePasswordAsync(ByVal SessionID As String, ByVal Length As Short, ByVal userState As Object)
            If (Me.GeneratePasswordOperationCompleted Is Nothing) Then
                Me.GeneratePasswordOperationCompleted = AddressOf Me.OnGeneratePasswordOperationCompleted
            End If
            Me.InvokeAsync("GeneratePassword", New Object() {SessionID, Length}, Me.GeneratePasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGeneratePasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GeneratePasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GeneratePasswordCompleted(Me, New GeneratePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/Logout", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Logout(ByVal SessionID As String) As Integer
            Dim results() As Object = Me.Invoke("Logout", New Object() {SessionID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync(ByVal SessionID As String)
            Me.LogoutAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.LogoutOperationCompleted Is Nothing) Then
                Me.LogoutOperationCompleted = AddressOf Me.OnLogoutOperationCompleted
            End If
            Me.InvokeAsync("Logout", New Object() {SessionID}, Me.LogoutOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogoutOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogoutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogoutCompleted(Me, New LogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/ChangePassword", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangePassword(ByVal SessionID As String, ByVal OldPassword As String, ByVal NewPassword As String) As Boolean
            Dim results() As Object = Me.Invoke("ChangePassword", New Object() {SessionID, OldPassword, NewPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordAsync(ByVal SessionID As String, ByVal OldPassword As String, ByVal NewPassword As String)
            Me.ChangePasswordAsync(SessionID, OldPassword, NewPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordAsync(ByVal SessionID As String, ByVal OldPassword As String, ByVal NewPassword As String, ByVal userState As Object)
            If (Me.ChangePasswordOperationCompleted Is Nothing) Then
                Me.ChangePasswordOperationCompleted = AddressOf Me.OnChangePasswordOperationCompleted
            End If
            Me.InvokeAsync("ChangePassword", New Object() {SessionID, OldPassword, NewPassword}, Me.ChangePasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangePasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangePasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangePasswordCompleted(Me, New ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/WhoAmI", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WhoAmI(ByVal SessionID As String) As SessionInfo
            Dim results() As Object = Me.Invoke("WhoAmI", New Object() {SessionID})
            Return CType(results(0),SessionInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WhoAmIAsync(ByVal SessionID As String)
            Me.WhoAmIAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WhoAmIAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.WhoAmIOperationCompleted Is Nothing) Then
                Me.WhoAmIOperationCompleted = AddressOf Me.OnWhoAmIOperationCompleted
            End If
            Me.InvokeAsync("WhoAmI", New Object() {SessionID}, Me.WhoAmIOperationCompleted, userState)
        End Sub
        
        Private Sub OnWhoAmIOperationCompleted(ByVal arg As Object)
            If (Not (Me.WhoAmICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WhoAmICompleted(Me, New WhoAmICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/JSONWhoAmI", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function JSONWhoAmI(ByVal SessionID As String) As String
            Dim results() As Object = Me.Invoke("JSONWhoAmI", New Object() {SessionID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub JSONWhoAmIAsync(ByVal SessionID As String)
            Me.JSONWhoAmIAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub JSONWhoAmIAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.JSONWhoAmIOperationCompleted Is Nothing) Then
                Me.JSONWhoAmIOperationCompleted = AddressOf Me.OnJSONWhoAmIOperationCompleted
            End If
            Me.InvokeAsync("JSONWhoAmI", New Object() {SessionID}, Me.JSONWhoAmIOperationCompleted, userState)
        End Sub
        
        Private Sub OnJSONWhoAmIOperationCompleted(ByVal arg As Object)
            If (Not (Me.JSONWhoAmICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent JSONWhoAmICompleted(Me, New JSONWhoAmICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserAdd", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserAdd(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal LoginName As String, ByVal Password As String, ByVal RecoveryQuestion As String, ByVal RecoveryAnswer As String, ByVal FirstName As String, ByVal LastName As String, ByVal Company As String, ByVal EMail As String, ByVal Phone As String, ByVal CellPhone As String, ByVal CellCarrier As CellCarrier, ByVal AuthLevel As AuthLevel) As Integer
            Dim results() As Object = Me.Invoke("UserAdd", New Object() {SessionID, MailboxID, LoginName, Password, RecoveryQuestion, RecoveryAnswer, FirstName, LastName, Company, EMail, Phone, CellPhone, CellCarrier, AuthLevel})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserAddAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal LoginName As String, ByVal Password As String, ByVal RecoveryQuestion As String, ByVal RecoveryAnswer As String, ByVal FirstName As String, ByVal LastName As String, ByVal Company As String, ByVal EMail As String, ByVal Phone As String, ByVal CellPhone As String, ByVal CellCarrier As CellCarrier, ByVal AuthLevel As AuthLevel)
            Me.UserAddAsync(SessionID, MailboxID, LoginName, Password, RecoveryQuestion, RecoveryAnswer, FirstName, LastName, Company, EMail, Phone, CellPhone, CellCarrier, AuthLevel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserAddAsync(ByVal SessionID As String, ByVal MailboxID As Integer, ByVal LoginName As String, ByVal Password As String, ByVal RecoveryQuestion As String, ByVal RecoveryAnswer As String, ByVal FirstName As String, ByVal LastName As String, ByVal Company As String, ByVal EMail As String, ByVal Phone As String, ByVal CellPhone As String, ByVal CellCarrier As CellCarrier, ByVal AuthLevel As AuthLevel, ByVal userState As Object)
            If (Me.UserAddOperationCompleted Is Nothing) Then
                Me.UserAddOperationCompleted = AddressOf Me.OnUserAddOperationCompleted
            End If
            Me.InvokeAsync("UserAdd", New Object() {SessionID, MailboxID, LoginName, Password, RecoveryQuestion, RecoveryAnswer, FirstName, LastName, Company, EMail, Phone, CellPhone, CellCarrier, AuthLevel}, Me.UserAddOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserAddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserAddCompleted(Me, New UserAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserAddEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserAddEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal LoginName As String, ByVal Password As String, ByVal RecoveryQuestion As String, ByVal RecoveryAnswer As String, ByVal FirstName As String, ByVal LastName As String, ByVal Company As String, ByVal EMail As String, ByVal Phone As String, ByVal CellPhone As String, ByVal CellCarrier As CellCarrier, ByVal AuthLevel As AuthLevel) As Integer
            Dim results() As Object = Me.Invoke("UserAddEx", New Object() {SessionID, NetworkID, MailboxID, LoginName, Password, RecoveryQuestion, RecoveryAnswer, FirstName, LastName, Company, EMail, Phone, CellPhone, CellCarrier, AuthLevel})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserAddExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal LoginName As String, ByVal Password As String, ByVal RecoveryQuestion As String, ByVal RecoveryAnswer As String, ByVal FirstName As String, ByVal LastName As String, ByVal Company As String, ByVal EMail As String, ByVal Phone As String, ByVal CellPhone As String, ByVal CellCarrier As CellCarrier, ByVal AuthLevel As AuthLevel)
            Me.UserAddExAsync(SessionID, NetworkID, MailboxID, LoginName, Password, RecoveryQuestion, RecoveryAnswer, FirstName, LastName, Company, EMail, Phone, CellPhone, CellCarrier, AuthLevel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserAddExAsync( _
                    ByVal SessionID As String,  _
                    ByVal NetworkID As Integer,  _
                    ByVal MailboxID As Integer,  _
                    ByVal LoginName As String,  _
                    ByVal Password As String,  _
                    ByVal RecoveryQuestion As String,  _
                    ByVal RecoveryAnswer As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal Company As String,  _
                    ByVal EMail As String,  _
                    ByVal Phone As String,  _
                    ByVal CellPhone As String,  _
                    ByVal CellCarrier As CellCarrier,  _
                    ByVal AuthLevel As AuthLevel,  _
                    ByVal userState As Object)
            If (Me.UserAddExOperationCompleted Is Nothing) Then
                Me.UserAddExOperationCompleted = AddressOf Me.OnUserAddExOperationCompleted
            End If
            Me.InvokeAsync("UserAddEx", New Object() {SessionID, NetworkID, MailboxID, LoginName, Password, RecoveryQuestion, RecoveryAnswer, FirstName, LastName, Company, EMail, Phone, CellPhone, CellCarrier, AuthLevel}, Me.UserAddExOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserAddExOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserAddExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserAddExCompleted(Me, New UserAddExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserInfo(ByVal SessionID As String, ByVal UserID As Integer) As UserIDInfo
            Dim results() As Object = Me.Invoke("UserInfo", New Object() {SessionID, UserID})
            Return CType(results(0),UserIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserInfoAsync(ByVal SessionID As String, ByVal UserID As Integer)
            Me.UserInfoAsync(SessionID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserInfoAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.UserInfoOperationCompleted Is Nothing) Then
                Me.UserInfoOperationCompleted = AddressOf Me.OnUserInfoOperationCompleted
            End If
            Me.InvokeAsync("UserInfo", New Object() {SessionID, UserID}, Me.UserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserInfoCompleted(Me, New UserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserUpdate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserUpdate(ByVal SessionID As String, ByVal UserID As Integer, ByVal FirstName As String, ByVal LastName As String, ByVal Company As String, ByVal EMail As String, ByVal Phone As String, ByVal CellPhone As String, ByVal CellCarrier As CellCarrier, ByVal AuthLevel As AuthLevel) As Boolean
            Dim results() As Object = Me.Invoke("UserUpdate", New Object() {SessionID, UserID, FirstName, LastName, Company, EMail, Phone, CellPhone, CellCarrier, AuthLevel})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserUpdateAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal FirstName As String, ByVal LastName As String, ByVal Company As String, ByVal EMail As String, ByVal Phone As String, ByVal CellPhone As String, ByVal CellCarrier As CellCarrier, ByVal AuthLevel As AuthLevel)
            Me.UserUpdateAsync(SessionID, UserID, FirstName, LastName, Company, EMail, Phone, CellPhone, CellCarrier, AuthLevel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserUpdateAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal FirstName As String, ByVal LastName As String, ByVal Company As String, ByVal EMail As String, ByVal Phone As String, ByVal CellPhone As String, ByVal CellCarrier As CellCarrier, ByVal AuthLevel As AuthLevel, ByVal userState As Object)
            If (Me.UserUpdateOperationCompleted Is Nothing) Then
                Me.UserUpdateOperationCompleted = AddressOf Me.OnUserUpdateOperationCompleted
            End If
            Me.InvokeAsync("UserUpdate", New Object() {SessionID, UserID, FirstName, LastName, Company, EMail, Phone, CellPhone, CellCarrier, AuthLevel}, Me.UserUpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserUpdateCompleted(Me, New UserUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserPassword", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserPassword(ByVal SessionID As String, ByVal UserID As Integer, ByVal CurrentRecoveryAnswer As String, ByVal Password As String, ByVal RecoveryQuestion As String, ByVal RecoveryAnswer As String) As Boolean
            Dim results() As Object = Me.Invoke("UserPassword", New Object() {SessionID, UserID, CurrentRecoveryAnswer, Password, RecoveryQuestion, RecoveryAnswer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserPasswordAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal CurrentRecoveryAnswer As String, ByVal Password As String, ByVal RecoveryQuestion As String, ByVal RecoveryAnswer As String)
            Me.UserPasswordAsync(SessionID, UserID, CurrentRecoveryAnswer, Password, RecoveryQuestion, RecoveryAnswer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserPasswordAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal CurrentRecoveryAnswer As String, ByVal Password As String, ByVal RecoveryQuestion As String, ByVal RecoveryAnswer As String, ByVal userState As Object)
            If (Me.UserPasswordOperationCompleted Is Nothing) Then
                Me.UserPasswordOperationCompleted = AddressOf Me.OnUserPasswordOperationCompleted
            End If
            Me.InvokeAsync("UserPassword", New Object() {SessionID, UserID, CurrentRecoveryAnswer, Password, RecoveryQuestion, RecoveryAnswer}, Me.UserPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserPasswordCompleted(Me, New UserPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserActivate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserActivate(ByVal SessionID As String, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("UserActivate", New Object() {SessionID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserActivateAsync(ByVal SessionID As String, ByVal UserID As Integer)
            Me.UserActivateAsync(SessionID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserActivateAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.UserActivateOperationCompleted Is Nothing) Then
                Me.UserActivateOperationCompleted = AddressOf Me.OnUserActivateOperationCompleted
            End If
            Me.InvokeAsync("UserActivate", New Object() {SessionID, UserID}, Me.UserActivateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserActivateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserActivateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserActivateCompleted(Me, New UserActivateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserSuspend", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserSuspend(ByVal SessionID As String, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("UserSuspend", New Object() {SessionID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserSuspendAsync(ByVal SessionID As String, ByVal UserID As Integer)
            Me.UserSuspendAsync(SessionID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserSuspendAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.UserSuspendOperationCompleted Is Nothing) Then
                Me.UserSuspendOperationCompleted = AddressOf Me.OnUserSuspendOperationCompleted
            End If
            Me.InvokeAsync("UserSuspend", New Object() {SessionID, UserID}, Me.UserSuspendOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserSuspendOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserSuspendCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserSuspendCompleted(Me, New UserSuspendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserTerminate", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserTerminate(ByVal SessionID As String, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("UserTerminate", New Object() {SessionID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserTerminateAsync(ByVal SessionID As String, ByVal UserID As Integer)
            Me.UserTerminateAsync(SessionID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserTerminateAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.UserTerminateOperationCompleted Is Nothing) Then
                Me.UserTerminateOperationCompleted = AddressOf Me.OnUserTerminateOperationCompleted
            End If
            Me.InvokeAsync("UserTerminate", New Object() {SessionID, UserID}, Me.UserTerminateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserTerminateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserTerminateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserTerminateCompleted(Me, New UserTerminateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserSendSMS", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserSendSMS(ByVal SessionID As String, ByVal UserID As Integer, ByVal Text As String) As Boolean
            Dim results() As Object = Me.Invoke("UserSendSMS", New Object() {SessionID, UserID, Text})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserSendSMSAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal Text As String)
            Me.UserSendSMSAsync(SessionID, UserID, Text, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserSendSMSAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal Text As String, ByVal userState As Object)
            If (Me.UserSendSMSOperationCompleted Is Nothing) Then
                Me.UserSendSMSOperationCompleted = AddressOf Me.OnUserSendSMSOperationCompleted
            End If
            Me.InvokeAsync("UserSendSMS", New Object() {SessionID, UserID, Text}, Me.UserSendSMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserSendSMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserSendSMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserSendSMSCompleted(Me, New UserSendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserReset", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserReset(ByVal SessionID As String, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("UserReset", New Object() {SessionID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserResetAsync(ByVal SessionID As String, ByVal UserID As Integer)
            Me.UserResetAsync(SessionID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserResetAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.UserResetOperationCompleted Is Nothing) Then
                Me.UserResetOperationCompleted = AddressOf Me.OnUserResetOperationCompleted
            End If
            Me.InvokeAsync("UserReset", New Object() {SessionID, UserID}, Me.UserResetOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserResetOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserResetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserResetCompleted(Me, New UserResetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserResetAll", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserResetAll(ByVal SessionID As String, ByVal TimeOutMinutes As Short) As Short
            Dim results() As Object = Me.Invoke("UserResetAll", New Object() {SessionID, TimeOutMinutes})
            Return CType(results(0),Short)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserResetAllAsync(ByVal SessionID As String, ByVal TimeOutMinutes As Short)
            Me.UserResetAllAsync(SessionID, TimeOutMinutes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserResetAllAsync(ByVal SessionID As String, ByVal TimeOutMinutes As Short, ByVal userState As Object)
            If (Me.UserResetAllOperationCompleted Is Nothing) Then
                Me.UserResetAllOperationCompleted = AddressOf Me.OnUserResetAllOperationCompleted
            End If
            Me.InvokeAsync("UserResetAll", New Object() {SessionID, TimeOutMinutes}, Me.UserResetAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserResetAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserResetAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserResetAllCompleted(Me, New UserResetAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserList(ByVal SessionID As String, ByVal Name As String) As UserIDInfo()
            Dim results() As Object = Me.Invoke("UserList", New Object() {SessionID, Name})
            Return CType(results(0),UserIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserListAsync(ByVal SessionID As String, ByVal Name As String)
            Me.UserListAsync(SessionID, Name, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserListAsync(ByVal SessionID As String, ByVal Name As String, ByVal userState As Object)
            If (Me.UserListOperationCompleted Is Nothing) Then
                Me.UserListOperationCompleted = AddressOf Me.OnUserListOperationCompleted
            End If
            Me.InvokeAsync("UserList", New Object() {SessionID, Name}, Me.UserListOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserListOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserListCompleted(Me, New UserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserListEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserListEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Name As String) As UserIDInfo()
            Dim results() As Object = Me.Invoke("UserListEx", New Object() {SessionID, NetworkID, MailboxID, Name})
            Return CType(results(0),UserIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Name As String)
            Me.UserListExAsync(SessionID, NetworkID, MailboxID, Name, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserListExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal Name As String, ByVal userState As Object)
            If (Me.UserListExOperationCompleted Is Nothing) Then
                Me.UserListExOperationCompleted = AddressOf Me.OnUserListExOperationCompleted
            End If
            Me.InvokeAsync("UserListEx", New Object() {SessionID, NetworkID, MailboxID, Name}, Me.UserListExOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserListExOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserListExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserListExCompleted(Me, New UserListExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserListLockedOut", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserListLockedOut(ByVal SessionID As String) As UserIDInfo()
            Dim results() As Object = Me.Invoke("UserListLockedOut", New Object() {SessionID})
            Return CType(results(0),UserIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserListLockedOutAsync(ByVal SessionID As String)
            Me.UserListLockedOutAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserListLockedOutAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.UserListLockedOutOperationCompleted Is Nothing) Then
                Me.UserListLockedOutOperationCompleted = AddressOf Me.OnUserListLockedOutOperationCompleted
            End If
            Me.InvokeAsync("UserListLockedOut", New Object() {SessionID}, Me.UserListLockedOutOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserListLockedOutOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserListLockedOutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserListLockedOutCompleted(Me, New UserListLockedOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserListLockedOutEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserListLockedOutEx(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer) As UserIDInfo()
            Dim results() As Object = Me.Invoke("UserListLockedOutEx", New Object() {SessionID, NetworkID, MailboxID})
            Return CType(results(0),UserIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserListLockedOutExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer)
            Me.UserListLockedOutExAsync(SessionID, NetworkID, MailboxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserListLockedOutExAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal userState As Object)
            If (Me.UserListLockedOutExOperationCompleted Is Nothing) Then
                Me.UserListLockedOutExOperationCompleted = AddressOf Me.OnUserListLockedOutExOperationCompleted
            End If
            Me.InvokeAsync("UserListLockedOutEx", New Object() {SessionID, NetworkID, MailboxID}, Me.UserListLockedOutExOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserListLockedOutExOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserListLockedOutExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserListLockedOutExCompleted(Me, New UserListLockedOutExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserSetNetworkMailbox", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserSetNetworkMailbox(ByVal SessionID As String, ByVal UserID As Integer, ByVal NetworkID As Integer, ByVal MailboxID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("UserSetNetworkMailbox", New Object() {SessionID, UserID, NetworkID, MailboxID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserSetNetworkMailboxAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal NetworkID As Integer, ByVal MailboxID As Integer)
            Me.UserSetNetworkMailboxAsync(SessionID, UserID, NetworkID, MailboxID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserSetNetworkMailboxAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal NetworkID As Integer, ByVal MailboxID As Integer, ByVal userState As Object)
            If (Me.UserSetNetworkMailboxOperationCompleted Is Nothing) Then
                Me.UserSetNetworkMailboxOperationCompleted = AddressOf Me.OnUserSetNetworkMailboxOperationCompleted
            End If
            Me.InvokeAsync("UserSetNetworkMailbox", New Object() {SessionID, UserID, NetworkID, MailboxID}, Me.UserSetNetworkMailboxOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserSetNetworkMailboxOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserSetNetworkMailboxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserSetNetworkMailboxCompleted(Me, New UserSetNetworkMailboxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserSetAuthLevel", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserSetAuthLevel(ByVal SessionID As String, ByVal UserID As Integer, ByVal AuthLevel As AuthLevel) As Boolean
            Dim results() As Object = Me.Invoke("UserSetAuthLevel", New Object() {SessionID, UserID, AuthLevel})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserSetAuthLevelAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal AuthLevel As AuthLevel)
            Me.UserSetAuthLevelAsync(SessionID, UserID, AuthLevel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserSetAuthLevelAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal AuthLevel As AuthLevel, ByVal userState As Object)
            If (Me.UserSetAuthLevelOperationCompleted Is Nothing) Then
                Me.UserSetAuthLevelOperationCompleted = AddressOf Me.OnUserSetAuthLevelOperationCompleted
            End If
            Me.InvokeAsync("UserSetAuthLevel", New Object() {SessionID, UserID, AuthLevel}, Me.UserSetAuthLevelOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserSetAuthLevelOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserSetAuthLevelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserSetAuthLevelCompleted(Me, New UserSetAuthLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/UserGetAPIKey", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserGetAPIKey(ByVal SessionID As String, ByVal UserID As Integer) As String
            Dim results() As Object = Me.Invoke("UserGetAPIKey", New Object() {SessionID, UserID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserGetAPIKeyAsync(ByVal SessionID As String, ByVal UserID As Integer)
            Me.UserGetAPIKeyAsync(SessionID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserGetAPIKeyAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.UserGetAPIKeyOperationCompleted Is Nothing) Then
                Me.UserGetAPIKeyOperationCompleted = AddressOf Me.OnUserGetAPIKeyOperationCompleted
            End If
            Me.InvokeAsync("UserGetAPIKey", New Object() {SessionID, UserID}, Me.UserGetAPIKeyOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserGetAPIKeyOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserGetAPIKeyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserGetAPIKeyCompleted(Me, New UserGetAPIKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/SessionLogCurrent", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SessionLogCurrent(ByVal SessionID As String) As SessionLogInfo
            Dim results() As Object = Me.Invoke("SessionLogCurrent", New Object() {SessionID})
            Return CType(results(0),SessionLogInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SessionLogCurrentAsync(ByVal SessionID As String)
            Me.SessionLogCurrentAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SessionLogCurrentAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.SessionLogCurrentOperationCompleted Is Nothing) Then
                Me.SessionLogCurrentOperationCompleted = AddressOf Me.OnSessionLogCurrentOperationCompleted
            End If
            Me.InvokeAsync("SessionLogCurrent", New Object() {SessionID}, Me.SessionLogCurrentOperationCompleted, userState)
        End Sub
        
        Private Sub OnSessionLogCurrentOperationCompleted(ByVal arg As Object)
            If (Not (Me.SessionLogCurrentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SessionLogCurrentCompleted(Me, New SessionLogCurrentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/SessionLog", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SessionLog(ByVal SessionID As String, ByVal MaxRecords As Short) As SessionLogInfo()
            Dim results() As Object = Me.Invoke("SessionLog", New Object() {SessionID, MaxRecords})
            Return CType(results(0),SessionLogInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SessionLogAsync(ByVal SessionID As String, ByVal MaxRecords As Short)
            Me.SessionLogAsync(SessionID, MaxRecords, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SessionLogAsync(ByVal SessionID As String, ByVal MaxRecords As Short, ByVal userState As Object)
            If (Me.SessionLogOperationCompleted Is Nothing) Then
                Me.SessionLogOperationCompleted = AddressOf Me.OnSessionLogOperationCompleted
            End If
            Me.InvokeAsync("SessionLog", New Object() {SessionID, MaxRecords}, Me.SessionLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnSessionLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.SessionLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SessionLogCompleted(Me, New SessionLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/SessionLogEx", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SessionLogEx(ByVal SessionID As String, ByVal UserID As Integer, ByVal StartTime As Date, ByVal EndTime As Date, ByVal MaxRecords As Short) As SessionLogInfo()
            Dim results() As Object = Me.Invoke("SessionLogEx", New Object() {SessionID, UserID, StartTime, EndTime, MaxRecords})
            Return CType(results(0),SessionLogInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SessionLogExAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal StartTime As Date, ByVal EndTime As Date, ByVal MaxRecords As Short)
            Me.SessionLogExAsync(SessionID, UserID, StartTime, EndTime, MaxRecords, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SessionLogExAsync(ByVal SessionID As String, ByVal UserID As Integer, ByVal StartTime As Date, ByVal EndTime As Date, ByVal MaxRecords As Short, ByVal userState As Object)
            If (Me.SessionLogExOperationCompleted Is Nothing) Then
                Me.SessionLogExOperationCompleted = AddressOf Me.OnSessionLogExOperationCompleted
            End If
            Me.InvokeAsync("SessionLogEx", New Object() {SessionID, UserID, StartTime, EndTime, MaxRecords}, Me.SessionLogExOperationCompleted, userState)
        End Sub
        
        Private Sub OnSessionLogExOperationCompleted(ByVal arg As Object)
            If (Not (Me.SessionLogExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SessionLogExCompleted(Me, New SessionLogExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/KeyGet", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function KeyGet(ByVal SessionID As String, ByVal Key As String, ByVal SystemObject As Objects, ByVal ObjectID As Integer, ByVal Visibility As KeyVisibility) As KeyValue
            Dim results() As Object = Me.Invoke("KeyGet", New Object() {SessionID, Key, SystemObject, ObjectID, Visibility})
            Return CType(results(0),KeyValue)
        End Function
        
        '''<remarks/>
        Public Overloads Sub KeyGetAsync(ByVal SessionID As String, ByVal Key As String, ByVal SystemObject As Objects, ByVal ObjectID As Integer, ByVal Visibility As KeyVisibility)
            Me.KeyGetAsync(SessionID, Key, SystemObject, ObjectID, Visibility, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub KeyGetAsync(ByVal SessionID As String, ByVal Key As String, ByVal SystemObject As Objects, ByVal ObjectID As Integer, ByVal Visibility As KeyVisibility, ByVal userState As Object)
            If (Me.KeyGetOperationCompleted Is Nothing) Then
                Me.KeyGetOperationCompleted = AddressOf Me.OnKeyGetOperationCompleted
            End If
            Me.InvokeAsync("KeyGet", New Object() {SessionID, Key, SystemObject, ObjectID, Visibility}, Me.KeyGetOperationCompleted, userState)
        End Sub
        
        Private Sub OnKeyGetOperationCompleted(ByVal arg As Object)
            If (Not (Me.KeyGetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent KeyGetCompleted(Me, New KeyGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/KeyList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function KeyList(ByVal SessionID As String, ByVal SystemObject As Objects, ByVal ObjectID As Integer) As KeyValue()
            Dim results() As Object = Me.Invoke("KeyList", New Object() {SessionID, SystemObject, ObjectID})
            Return CType(results(0),KeyValue())
        End Function
        
        '''<remarks/>
        Public Overloads Sub KeyListAsync(ByVal SessionID As String, ByVal SystemObject As Objects, ByVal ObjectID As Integer)
            Me.KeyListAsync(SessionID, SystemObject, ObjectID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub KeyListAsync(ByVal SessionID As String, ByVal SystemObject As Objects, ByVal ObjectID As Integer, ByVal userState As Object)
            If (Me.KeyListOperationCompleted Is Nothing) Then
                Me.KeyListOperationCompleted = AddressOf Me.OnKeyListOperationCompleted
            End If
            Me.InvokeAsync("KeyList", New Object() {SessionID, SystemObject, ObjectID}, Me.KeyListOperationCompleted, userState)
        End Sub
        
        Private Sub OnKeyListOperationCompleted(ByVal arg As Object)
            If (Not (Me.KeyListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent KeyListCompleted(Me, New KeyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/KeySet", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function KeySet(ByVal SessionID As String, ByVal Key As String, ByVal SystemObject As Objects, ByVal ObjectID As Integer, ByVal Visibility As KeyVisibility, ByVal Value As String, ByVal Meta As String, ByVal DaysToLive As Integer) As Boolean
            Dim results() As Object = Me.Invoke("KeySet", New Object() {SessionID, Key, SystemObject, ObjectID, Visibility, Value, Meta, DaysToLive})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub KeySetAsync(ByVal SessionID As String, ByVal Key As String, ByVal SystemObject As Objects, ByVal ObjectID As Integer, ByVal Visibility As KeyVisibility, ByVal Value As String, ByVal Meta As String, ByVal DaysToLive As Integer)
            Me.KeySetAsync(SessionID, Key, SystemObject, ObjectID, Visibility, Value, Meta, DaysToLive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub KeySetAsync(ByVal SessionID As String, ByVal Key As String, ByVal SystemObject As Objects, ByVal ObjectID As Integer, ByVal Visibility As KeyVisibility, ByVal Value As String, ByVal Meta As String, ByVal DaysToLive As Integer, ByVal userState As Object)
            If (Me.KeySetOperationCompleted Is Nothing) Then
                Me.KeySetOperationCompleted = AddressOf Me.OnKeySetOperationCompleted
            End If
            Me.InvokeAsync("KeySet", New Object() {SessionID, Key, SystemObject, ObjectID, Visibility, Value, Meta, DaysToLive}, Me.KeySetOperationCompleted, userState)
        End Sub
        
        Private Sub OnKeySetOperationCompleted(ByVal arg As Object)
            If (Not (Me.KeySetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent KeySetCompleted(Me, New KeySetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/KeyRemove", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function KeyRemove(ByVal SessionID As String, ByVal Key As String, ByVal SystemObject As Objects, ByVal ObjectID As Integer, ByVal Visibility As KeyVisibility) As Boolean
            Dim results() As Object = Me.Invoke("KeyRemove", New Object() {SessionID, Key, SystemObject, ObjectID, Visibility})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub KeyRemoveAsync(ByVal SessionID As String, ByVal Key As String, ByVal SystemObject As Objects, ByVal ObjectID As Integer, ByVal Visibility As KeyVisibility)
            Me.KeyRemoveAsync(SessionID, Key, SystemObject, ObjectID, Visibility, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub KeyRemoveAsync(ByVal SessionID As String, ByVal Key As String, ByVal SystemObject As Objects, ByVal ObjectID As Integer, ByVal Visibility As KeyVisibility, ByVal userState As Object)
            If (Me.KeyRemoveOperationCompleted Is Nothing) Then
                Me.KeyRemoveOperationCompleted = AddressOf Me.OnKeyRemoveOperationCompleted
            End If
            Me.InvokeAsync("KeyRemove", New Object() {SessionID, Key, SystemObject, ObjectID, Visibility}, Me.KeyRemoveOperationCompleted, userState)
        End Sub
        
        Private Sub OnKeyRemoveOperationCompleted(ByVal arg As Object)
            If (Not (Me.KeyRemoveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent KeyRemoveCompleted(Me, New KeyRemoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkInfo", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkInfo(ByVal SessionID As String, ByVal NetworkID As Integer) As NetworkIDInfo
            Dim results() As Object = Me.Invoke("NetworkInfo", New Object() {SessionID, NetworkID})
            Return CType(results(0),NetworkIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkInfoAsync(ByVal SessionID As String, ByVal NetworkID As Integer)
            Me.NetworkInfoAsync(SessionID, NetworkID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkInfoAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal userState As Object)
            If (Me.NetworkInfoOperationCompleted Is Nothing) Then
                Me.NetworkInfoOperationCompleted = AddressOf Me.OnNetworkInfoOperationCompleted
            End If
            Me.InvokeAsync("NetworkInfo", New Object() {SessionID, NetworkID}, Me.NetworkInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkInfoCompleted(Me, New NetworkInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkInfoWithLog", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkInfoWithLog(ByVal SessionID As String, ByVal NetworkID As Integer) As NetworkIDInfo
            Dim results() As Object = Me.Invoke("NetworkInfoWithLog", New Object() {SessionID, NetworkID})
            Return CType(results(0),NetworkIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkInfoWithLogAsync(ByVal SessionID As String, ByVal NetworkID As Integer)
            Me.NetworkInfoWithLogAsync(SessionID, NetworkID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkInfoWithLogAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal userState As Object)
            If (Me.NetworkInfoWithLogOperationCompleted Is Nothing) Then
                Me.NetworkInfoWithLogOperationCompleted = AddressOf Me.OnNetworkInfoWithLogOperationCompleted
            End If
            Me.InvokeAsync("NetworkInfoWithLog", New Object() {SessionID, NetworkID}, Me.NetworkInfoWithLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkInfoWithLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkInfoWithLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkInfoWithLogCompleted(Me, New NetworkInfoWithLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkList(ByVal SessionID As String, ByVal Name As String) As NetworkIDInfo()
            Dim results() As Object = Me.Invoke("NetworkList", New Object() {SessionID, Name})
            Return CType(results(0),NetworkIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkListAsync(ByVal SessionID As String, ByVal Name As String)
            Me.NetworkListAsync(SessionID, Name, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkListAsync(ByVal SessionID As String, ByVal Name As String, ByVal userState As Object)
            If (Me.NetworkListOperationCompleted Is Nothing) Then
                Me.NetworkListOperationCompleted = AddressOf Me.OnNetworkListOperationCompleted
            End If
            Me.InvokeAsync("NetworkList", New Object() {SessionID, Name}, Me.NetworkListOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkListOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkListCompleted(Me, New NetworkListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkStatusSummary", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkStatusSummary(ByVal SessionID As String, ByVal ShowInactive As Boolean) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("NetworkStatusSummary", New Object() {SessionID, ShowInactive})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkStatusSummaryAsync(ByVal SessionID As String, ByVal ShowInactive As Boolean)
            Me.NetworkStatusSummaryAsync(SessionID, ShowInactive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkStatusSummaryAsync(ByVal SessionID As String, ByVal ShowInactive As Boolean, ByVal userState As Object)
            If (Me.NetworkStatusSummaryOperationCompleted Is Nothing) Then
                Me.NetworkStatusSummaryOperationCompleted = AddressOf Me.OnNetworkStatusSummaryOperationCompleted
            End If
            Me.InvokeAsync("NetworkStatusSummary", New Object() {SessionID, ShowInactive}, Me.NetworkStatusSummaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkStatusSummaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkStatusSummaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkStatusSummaryCompleted(Me, New NetworkStatusSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkOutageList", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkOutageList(ByVal SessionID As String) As NetworkIDInfo()
            Dim results() As Object = Me.Invoke("NetworkOutageList", New Object() {SessionID})
            Return CType(results(0),NetworkIDInfo())
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkOutageListAsync(ByVal SessionID As String)
            Me.NetworkOutageListAsync(SessionID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkOutageListAsync(ByVal SessionID As String, ByVal userState As Object)
            If (Me.NetworkOutageListOperationCompleted Is Nothing) Then
                Me.NetworkOutageListOperationCompleted = AddressOf Me.OnNetworkOutageListOperationCompleted
            End If
            Me.InvokeAsync("NetworkOutageList", New Object() {SessionID}, Me.NetworkOutageListOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkOutageListOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkOutageListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkOutageListCompleted(Me, New NetworkOutageListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkStart", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkStart(ByVal SessionID As String, ByVal NetworkID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("NetworkStart", New Object() {SessionID, NetworkID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkStartAsync(ByVal SessionID As String, ByVal NetworkID As Integer)
            Me.NetworkStartAsync(SessionID, NetworkID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkStartAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal userState As Object)
            If (Me.NetworkStartOperationCompleted Is Nothing) Then
                Me.NetworkStartOperationCompleted = AddressOf Me.OnNetworkStartOperationCompleted
            End If
            Me.InvokeAsync("NetworkStart", New Object() {SessionID, NetworkID}, Me.NetworkStartOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkStartOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkStartCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkStartCompleted(Me, New NetworkStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkStop", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkStop(ByVal SessionID As String, ByVal NetworkID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("NetworkStop", New Object() {SessionID, NetworkID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkStopAsync(ByVal SessionID As String, ByVal NetworkID As Integer)
            Me.NetworkStopAsync(SessionID, NetworkID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkStopAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal userState As Object)
            If (Me.NetworkStopOperationCompleted Is Nothing) Then
                Me.NetworkStopOperationCompleted = AddressOf Me.OnNetworkStopOperationCompleted
            End If
            Me.InvokeAsync("NetworkStop", New Object() {SessionID, NetworkID}, Me.NetworkStopOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkStopOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkStopCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkStopCompleted(Me, New NetworkStopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkRestart", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkRestart(ByVal SessionID As String, ByVal NetworkID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("NetworkRestart", New Object() {SessionID, NetworkID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkRestartAsync(ByVal SessionID As String, ByVal NetworkID As Integer)
            Me.NetworkRestartAsync(SessionID, NetworkID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkRestartAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal userState As Object)
            If (Me.NetworkRestartOperationCompleted Is Nothing) Then
                Me.NetworkRestartOperationCompleted = AddressOf Me.OnNetworkRestartOperationCompleted
            End If
            Me.InvokeAsync("NetworkRestart", New Object() {SessionID, NetworkID}, Me.NetworkRestartOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkRestartOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkRestartCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkRestartCompleted(Me, New NetworkRestartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkSetStatus", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkSetStatus(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Status As Status) As Boolean
            Dim results() As Object = Me.Invoke("NetworkSetStatus", New Object() {SessionID, NetworkID, Status})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkSetStatusAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Status As Status)
            Me.NetworkSetStatusAsync(SessionID, NetworkID, Status, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkSetStatusAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Status As Status, ByVal userState As Object)
            If (Me.NetworkSetStatusOperationCompleted Is Nothing) Then
                Me.NetworkSetStatusOperationCompleted = AddressOf Me.OnNetworkSetStatusOperationCompleted
            End If
            Me.InvokeAsync("NetworkSetStatus", New Object() {SessionID, NetworkID, Status}, Me.NetworkSetStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkSetStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkSetStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkSetStatusCompleted(Me, New NetworkSetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkAdd", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkAdd(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Name As String, ByVal Location As String, ByVal Type As NetworkServiceType, ByVal RoutingType As NetworkRoutingType, ByVal Password As String, ByVal RunDir As Short, ByVal Server As String) As Integer
            Dim results() As Object = Me.Invoke("NetworkAdd", New Object() {SessionID, NetworkID, Name, Location, Type, RoutingType, Password, RunDir, Server})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkAddAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Name As String, ByVal Location As String, ByVal Type As NetworkServiceType, ByVal RoutingType As NetworkRoutingType, ByVal Password As String, ByVal RunDir As Short, ByVal Server As String)
            Me.NetworkAddAsync(SessionID, NetworkID, Name, Location, Type, RoutingType, Password, RunDir, Server, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkAddAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal Name As String, ByVal Location As String, ByVal Type As NetworkServiceType, ByVal RoutingType As NetworkRoutingType, ByVal Password As String, ByVal RunDir As Short, ByVal Server As String, ByVal userState As Object)
            If (Me.NetworkAddOperationCompleted Is Nothing) Then
                Me.NetworkAddOperationCompleted = AddressOf Me.OnNetworkAddOperationCompleted
            End If
            Me.InvokeAsync("NetworkAdd", New Object() {SessionID, NetworkID, Name, Location, Type, RoutingType, Password, RunDir, Server}, Me.NetworkAddOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkAddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkAddCompleted(Me, New NetworkAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkSetContact", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkSetContact(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer, ByVal ContactType As NetworkContactType) As Boolean
            Dim results() As Object = Me.Invoke("NetworkSetContact", New Object() {SessionID, NetworkID, UserID, ContactType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkSetContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer, ByVal ContactType As NetworkContactType)
            Me.NetworkSetContactAsync(SessionID, NetworkID, UserID, ContactType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkSetContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer, ByVal ContactType As NetworkContactType, ByVal userState As Object)
            If (Me.NetworkSetContactOperationCompleted Is Nothing) Then
                Me.NetworkSetContactOperationCompleted = AddressOf Me.OnNetworkSetContactOperationCompleted
            End If
            Me.InvokeAsync("NetworkSetContact", New Object() {SessionID, NetworkID, UserID, ContactType}, Me.NetworkSetContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkSetContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkSetContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkSetContactCompleted(Me, New NetworkSetContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkGetContact", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkGetContact(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal ContactType As NetworkContactType) As UserIDInfo
            Dim results() As Object = Me.Invoke("NetworkGetContact", New Object() {SessionID, NetworkID, ContactType})
            Return CType(results(0),UserIDInfo)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkGetContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal ContactType As NetworkContactType)
            Me.NetworkGetContactAsync(SessionID, NetworkID, ContactType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkGetContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal ContactType As NetworkContactType, ByVal userState As Object)
            If (Me.NetworkGetContactOperationCompleted Is Nothing) Then
                Me.NetworkGetContactOperationCompleted = AddressOf Me.OnNetworkGetContactOperationCompleted
            End If
            Me.InvokeAsync("NetworkGetContact", New Object() {SessionID, NetworkID, ContactType}, Me.NetworkGetContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkGetContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkGetContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkGetContactCompleted(Me, New NetworkGetContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkOwnerContact", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkOwnerContact(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("NetworkOwnerContact", New Object() {SessionID, NetworkID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkOwnerContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer)
            Me.NetworkOwnerContactAsync(SessionID, NetworkID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkOwnerContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.NetworkOwnerContactOperationCompleted Is Nothing) Then
                Me.NetworkOwnerContactOperationCompleted = AddressOf Me.OnNetworkOwnerContactOperationCompleted
            End If
            Me.InvokeAsync("NetworkOwnerContact", New Object() {SessionID, NetworkID, UserID}, Me.NetworkOwnerContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkOwnerContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkOwnerContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkOwnerContactCompleted(Me, New NetworkOwnerContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkErrorsContact", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkErrorsContact(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("NetworkErrorsContact", New Object() {SessionID, NetworkID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkErrorsContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer)
            Me.NetworkErrorsContactAsync(SessionID, NetworkID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkErrorsContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.NetworkErrorsContactOperationCompleted Is Nothing) Then
                Me.NetworkErrorsContactOperationCompleted = AddressOf Me.OnNetworkErrorsContactOperationCompleted
            End If
            Me.InvokeAsync("NetworkErrorsContact", New Object() {SessionID, NetworkID, UserID}, Me.NetworkErrorsContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkErrorsContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkErrorsContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkErrorsContactCompleted(Me, New NetworkErrorsContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkInterconnectsContact", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkInterconnectsContact(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("NetworkInterconnectsContact", New Object() {SessionID, NetworkID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkInterconnectsContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer)
            Me.NetworkInterconnectsContactAsync(SessionID, NetworkID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkInterconnectsContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.NetworkInterconnectsContactOperationCompleted Is Nothing) Then
                Me.NetworkInterconnectsContactOperationCompleted = AddressOf Me.OnNetworkInterconnectsContactOperationCompleted
            End If
            Me.InvokeAsync("NetworkInterconnectsContact", New Object() {SessionID, NetworkID, UserID}, Me.NetworkInterconnectsContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkInterconnectsContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkInterconnectsContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkInterconnectsContactCompleted(Me, New NetworkInterconnectsContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkNoticesContact", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkNoticesContact(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("NetworkNoticesContact", New Object() {SessionID, NetworkID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkNoticesContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer)
            Me.NetworkNoticesContactAsync(SessionID, NetworkID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkNoticesContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.NetworkNoticesContactOperationCompleted Is Nothing) Then
                Me.NetworkNoticesContactOperationCompleted = AddressOf Me.OnNetworkNoticesContactOperationCompleted
            End If
            Me.InvokeAsync("NetworkNoticesContact", New Object() {SessionID, NetworkID, UserID}, Me.NetworkNoticesContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkNoticesContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkNoticesContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkNoticesContactCompleted(Me, New NetworkNoticesContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkBillingContact", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkBillingContact(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("NetworkBillingContact", New Object() {SessionID, NetworkID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkBillingContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer)
            Me.NetworkBillingContactAsync(SessionID, NetworkID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkBillingContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.NetworkBillingContactOperationCompleted Is Nothing) Then
                Me.NetworkBillingContactOperationCompleted = AddressOf Me.OnNetworkBillingContactOperationCompleted
            End If
            Me.InvokeAsync("NetworkBillingContact", New Object() {SessionID, NetworkID, UserID}, Me.NetworkBillingContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkBillingContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkBillingContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkBillingContactCompleted(Me, New NetworkBillingContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkReportsContact", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkReportsContact(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer) As Boolean
            Dim results() As Object = Me.Invoke("NetworkReportsContact", New Object() {SessionID, NetworkID, UserID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkReportsContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer)
            Me.NetworkReportsContactAsync(SessionID, NetworkID, UserID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkReportsContactAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal UserID As Integer, ByVal userState As Object)
            If (Me.NetworkReportsContactOperationCompleted Is Nothing) Then
                Me.NetworkReportsContactOperationCompleted = AddressOf Me.OnNetworkReportsContactOperationCompleted
            End If
            Me.InvokeAsync("NetworkReportsContact", New Object() {SessionID, NetworkID, UserID}, Me.NetworkReportsContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkReportsContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkReportsContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkReportsContactCompleted(Me, New NetworkReportsContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecgridos.net/NetworkSetWebsite", RequestNamespace:="http://ecgridos.net/", ResponseNamespace:="http://ecgridos.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NetworkSetWebsite(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal URL As String, ByVal WebsiteType As NetworkWebsiteType) As Boolean
            Dim results() As Object = Me.Invoke("NetworkSetWebsite", New Object() {SessionID, NetworkID, URL, WebsiteType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NetworkSetWebsiteAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal URL As String, ByVal WebsiteType As NetworkWebsiteType)
            Me.NetworkSetWebsiteAsync(SessionID, NetworkID, URL, WebsiteType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NetworkSetWebsiteAsync(ByVal SessionID As String, ByVal NetworkID As Integer, ByVal URL As String, ByVal WebsiteType As NetworkWebsiteType, ByVal userState As Object)
            If (Me.NetworkSetWebsiteOperationCompleted Is Nothing) Then
                Me.NetworkSetWebsiteOperationCompleted = AddressOf Me.OnNetworkSetWebsiteOperationCompleted
            End If
            Me.InvokeAsync("NetworkSetWebsite", New Object() {SessionID, NetworkID, URL, WebsiteType}, Me.NetworkSetWebsiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnNetworkSetWebsiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.NetworkSetWebsiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NetworkSetWebsiteCompleted(Me, New NetworkSetWebsiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class as2CommInfo
        
        Private commIDField As Integer
        
        Private createdField As Date
        
        Private modifiedField As Date
        
        Private hostedField As Boolean
        
        Private identifierField As String
        
        Private ownerField As UserIDInfo
        
        Private networkIDField As Integer
        
        Private mailboxIDField As Integer
        
        Private useTypeField As UseType
        
        Private uRLField As String
        
        Private mimeTypeOverrideField As String
        
        Private signDataField As Boolean
        
        Private encryptDataField As Boolean
        
        Private compressDataField As Boolean
        
        Private beginUsageField As Date
        
        Private endUsageField As Date
        
        Private statusField As Status
        
        Private receiptField As ReceiptType
        
        Private sSLClientAuthenticationField As Boolean
        
        Private hTTPAuthenticationField As HTTPAuthInfo
        
        Private certificatesField() As CertificateInfo
        
        '''<remarks/>
        Public Property CommID() As Integer
            Get
                Return Me.commIDField
            End Get
            Set
                Me.commIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Created() As Date
            Get
                Return Me.createdField
            End Get
            Set
                Me.createdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Modified() As Date
            Get
                Return Me.modifiedField
            End Get
            Set
                Me.modifiedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Hosted() As Boolean
            Get
                Return Me.hostedField
            End Get
            Set
                Me.hostedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Identifier() As String
            Get
                Return Me.identifierField
            End Get
            Set
                Me.identifierField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Owner() As UserIDInfo
            Get
                Return Me.ownerField
            End Get
            Set
                Me.ownerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxID() As Integer
            Get
                Return Me.mailboxIDField
            End Get
            Set
                Me.mailboxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UseType() As UseType
            Get
                Return Me.useTypeField
            End Get
            Set
                Me.useTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property URL() As String
            Get
                Return Me.uRLField
            End Get
            Set
                Me.uRLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MimeTypeOverride() As String
            Get
                Return Me.mimeTypeOverrideField
            End Get
            Set
                Me.mimeTypeOverrideField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SignData() As Boolean
            Get
                Return Me.signDataField
            End Get
            Set
                Me.signDataField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EncryptData() As Boolean
            Get
                Return Me.encryptDataField
            End Get
            Set
                Me.encryptDataField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompressData() As Boolean
            Get
                Return Me.compressDataField
            End Get
            Set
                Me.compressDataField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BeginUsage() As Date
            Get
                Return Me.beginUsageField
            End Get
            Set
                Me.beginUsageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EndUsage() As Date
            Get
                Return Me.endUsageField
            End Get
            Set
                Me.endUsageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As Status
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Receipt() As ReceiptType
            Get
                Return Me.receiptField
            End Get
            Set
                Me.receiptField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SSLClientAuthentication() As Boolean
            Get
                Return Me.sSLClientAuthenticationField
            End Get
            Set
                Me.sSLClientAuthenticationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HTTPAuthentication() As HTTPAuthInfo
            Get
                Return Me.hTTPAuthenticationField
            End Get
            Set
                Me.hTTPAuthenticationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Certificates() As CertificateInfo()
            Get
                Return Me.certificatesField
            End Get
            Set
                Me.certificatesField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class UserIDInfo
        
        Private userIDField As Integer
        
        Private loginNameField As String
        
        Private recoveryQuestionField As String
        
        Private firstNameField As String
        
        Private lastNameField As String
        
        Private companyField As String
        
        Private eMailField As String
        
        Private phoneField As String
        
        Private cellPhoneField As String
        
        Private cellCarrierField As CellCarrier
        
        Private timeZoneOffsetField As Short
        
        Private networkIDField As Integer
        
        Private mailboxIDField As Integer
        
        Private authLevelField As AuthLevel
        
        Private createdField As Date
        
        Private modifiedField As Date
        
        Private lastLoginField As Date
        
        Private statusField As Status
        
        Private lockedOutField As Boolean
        
        Private openSessionsField As Short
        
        '''<remarks/>
        Public Property UserID() As Integer
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LoginName() As String
            Get
                Return Me.loginNameField
            End Get
            Set
                Me.loginNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RecoveryQuestion() As String
            Get
                Return Me.recoveryQuestionField
            End Get
            Set
                Me.recoveryQuestionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FirstName() As String
            Get
                Return Me.firstNameField
            End Get
            Set
                Me.firstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastName() As String
            Get
                Return Me.lastNameField
            End Get
            Set
                Me.lastNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Company() As String
            Get
                Return Me.companyField
            End Get
            Set
                Me.companyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EMail() As String
            Get
                Return Me.eMailField
            End Get
            Set
                Me.eMailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Phone() As String
            Get
                Return Me.phoneField
            End Get
            Set
                Me.phoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CellPhone() As String
            Get
                Return Me.cellPhoneField
            End Get
            Set
                Me.cellPhoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CellCarrier() As CellCarrier
            Get
                Return Me.cellCarrierField
            End Get
            Set
                Me.cellCarrierField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TimeZoneOffset() As Short
            Get
                Return Me.timeZoneOffsetField
            End Get
            Set
                Me.timeZoneOffsetField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxID() As Integer
            Get
                Return Me.mailboxIDField
            End Get
            Set
                Me.mailboxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AuthLevel() As AuthLevel
            Get
                Return Me.authLevelField
            End Get
            Set
                Me.authLevelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Created() As Date
            Get
                Return Me.createdField
            End Get
            Set
                Me.createdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Modified() As Date
            Get
                Return Me.modifiedField
            End Get
            Set
                Me.modifiedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastLogin() As Date
            Get
                Return Me.lastLoginField
            End Get
            Set
                Me.lastLoginField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As Status
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LockedOut() As Boolean
            Get
                Return Me.lockedOutField
            End Get
            Set
                Me.lockedOutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OpenSessions() As Short
            Get
                Return Me.openSessionsField
            End Get
            Set
                Me.openSessionsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum CellCarrier
        
        '''<remarks/>
        NoChange
        
        '''<remarks/>
        Undefined
        
        '''<remarks/>
        ATTCingular
        
        '''<remarks/>
        Verizon
        
        '''<remarks/>
        TMobile
        
        '''<remarks/>
        SprintPCS
        
        '''<remarks/>
        Nextel
        
        '''<remarks/>
        Alltel
        
        '''<remarks/>
        VirginMobile
        
        '''<remarks/>
        ATTPreCingular
        
        '''<remarks/>
        ATT
        
        '''<remarks/>
        BoostMobile
        
        '''<remarks/>
        USCellular
        
        '''<remarks/>
        MetroPCS
        
        '''<remarks/>
        Powertel
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum AuthLevel
        
        '''<remarks/>
        NoChange
        
        '''<remarks/>
        Root
        
        '''<remarks/>
        TechOps
        
        '''<remarks/>
        NetOps
        
        '''<remarks/>
        NetworkAdmin
        
        '''<remarks/>
        NetworkUser
        
        '''<remarks/>
        MailboxAdmin
        
        '''<remarks/>
        MailboxUser
        
        '''<remarks/>
        TPUser
        
        '''<remarks/>
        General
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum Status
        
        '''<remarks/>
        Development
        
        '''<remarks/>
        Active
        
        '''<remarks/>
        Preproduction
        
        '''<remarks/>
        Suspended
        
        '''<remarks/>
        Terminated
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class KeyValue
        
        Private keyField As String
        
        Private valueField As String
        
        Private metaField As String
        
        Private createdField As Date
        
        Private expiresField As Date
        
        Private visibilityField As KeyVisibility
        
        Private networkIDField As Integer
        
        Private mailboxIDField As Integer
        
        Private userIDField As Integer
        
        Private sessionIDField As String
        
        '''<remarks/>
        Public Property Key() As String
            Get
                Return Me.keyField
            End Get
            Set
                Me.keyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Value() As String
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Meta() As String
            Get
                Return Me.metaField
            End Get
            Set
                Me.metaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Created() As Date
            Get
                Return Me.createdField
            End Get
            Set
                Me.createdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Expires() As Date
            Get
                Return Me.expiresField
            End Get
            Set
                Me.expiresField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Visibility() As KeyVisibility
            Get
                Return Me.visibilityField
            End Get
            Set
                Me.visibilityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxID() As Integer
            Get
                Return Me.mailboxIDField
            End Get
            Set
                Me.mailboxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As Integer
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SessionID() As String
            Get
                Return Me.sessionIDField
            End Get
            Set
                Me.sessionIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum KeyVisibility
        
        '''<remarks/>
        [Private]
        
        '''<remarks/>
        [Shared]
        
        '''<remarks/>
        [Public]
        
        '''<remarks/>
        Session
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class SessionEvents
        
        Private aPICallField As APICall
        
        Private dateField As Date
        
        Private millisecondsField As Integer
        
        Private ipField As String
        
        Private returnCodeField As RetCode
        
        Private commentField As String
        
        '''<remarks/>
        Public Property APICall() As APICall
            Get
                Return Me.aPICallField
            End Get
            Set
                Me.aPICallField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property [Date]() As Date
            Get
                Return Me.dateField
            End Get
            Set
                Me.dateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Milliseconds() As Integer
            Get
                Return Me.millisecondsField
            End Get
            Set
                Me.millisecondsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ip() As String
            Get
                Return Me.ipField
            End Get
            Set
                Me.ipField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReturnCode() As RetCode
            Get
                Return Me.returnCodeField
            End Get
            Set
                Me.returnCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Comment() As String
            Get
                Return Me.commentField
            End Get
            Set
                Me.commentField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum APICall
        
        '''<remarks/>
        GenerateAPIKey
        
        '''<remarks/>
        Login
        
        '''<remarks/>
        Logout
        
        '''<remarks/>
        ChangePassword
        
        '''<remarks/>
        WhoAmI
        
        '''<remarks/>
        UserAdd
        
        '''<remarks/>
        UserAddEx
        
        '''<remarks/>
        UserInfo
        
        '''<remarks/>
        UserUpdate
        
        '''<remarks/>
        UserActivate
        
        '''<remarks/>
        UserSuspend
        
        '''<remarks/>
        UserTerminate
        
        '''<remarks/>
        UserReset
        
        '''<remarks/>
        UserList
        
        '''<remarks/>
        UserListEx
        
        '''<remarks/>
        UserPassword
        
        '''<remarks/>
        SessionLog
        
        '''<remarks/>
        SessionLogEx
        
        '''<remarks/>
        SessionLogCurrent
        
        '''<remarks/>
        KeySave
        
        '''<remarks/>
        KeyGet
        
        '''<remarks/>
        KeyList
        
        '''<remarks/>
        KeyRemove
        
        '''<remarks/>
        UserSetNetworkMailbox
        
        '''<remarks/>
        UserSetAuthLevel
        
        '''<remarks/>
        UserListLockedOut
        
        '''<remarks/>
        UserListLockedOutEx
        
        '''<remarks/>
        UserResetAll
        
        '''<remarks/>
        SetLocalTime
        
        '''<remarks/>
        TerminateAPIKey
        
        '''<remarks/>
        GeneratePassword
        
        '''<remarks/>
        UserSendSMS
        
        '''<remarks/>
        UserGetAPIKey
        
        '''<remarks/>
        NetworkInfo
        
        '''<remarks/>
        NetworkList
        
        '''<remarks/>
        NetworkStatusSummary
        
        '''<remarks/>
        NetworkOutageList
        
        '''<remarks/>
        NetworkStart
        
        '''<remarks/>
        NetworkStop
        
        '''<remarks/>
        NetworkRestart
        
        '''<remarks/>
        NetworkAdd
        
        '''<remarks/>
        NetworkOwnerContact
        
        '''<remarks/>
        NetworkErrorsContact
        
        '''<remarks/>
        NetworkInterconnectsContact
        
        '''<remarks/>
        NetworkNoticesContact
        
        '''<remarks/>
        NetworkBillingContact
        
        '''<remarks/>
        NetworkReportsContact
        
        '''<remarks/>
        NetworkSetContact
        
        '''<remarks/>
        NetworkGetContact
        
        '''<remarks/>
        NetworkSetWebsite
        
        '''<remarks/>
        NetworkSetStatus
        
        '''<remarks/>
        NetworkInfoWithLog
        
        '''<remarks/>
        NetworkBackupAllConfigs
        
        '''<remarks/>
        MailboxAdd
        
        '''<remarks/>
        MailboxAddEx
        
        '''<remarks/>
        MailboxActivate
        
        '''<remarks/>
        MailboxSuspend
        
        '''<remarks/>
        MailboxTerminate
        
        '''<remarks/>
        MailboxInfo
        
        '''<remarks/>
        MailboxName
        
        '''<remarks/>
        MailboxErrorsContact
        
        '''<remarks/>
        MailboxInterconnectsContact
        
        '''<remarks/>
        MailboxNoticesContact
        
        '''<remarks/>
        MailboxX12Delimiters
        
        '''<remarks/>
        MailboxInBoxTimeout
        
        '''<remarks/>
        MailboxList
        
        '''<remarks/>
        MailboxListEx
        
        '''<remarks/>
        MailboxOwnerContact
        
        '''<remarks/>
        MailboxManaged
        
        '''<remarks/>
        MailboxDescription
        
        '''<remarks/>
        MailboxUse
        
        '''<remarks/>
        MailboxSetContact
        
        '''<remarks/>
        TPAdd
        
        '''<remarks/>
        TPAddVAN
        
        '''<remarks/>
        TPAddEx
        
        '''<remarks/>
        TPMove
        
        '''<remarks/>
        TPMoveEx
        
        '''<remarks/>
        TPUpdateDescription
        
        '''<remarks/>
        TPActivate
        
        '''<remarks/>
        TPSuspend
        
        '''<remarks/>
        TPTerminate
        
        '''<remarks/>
        TPInfo
        
        '''<remarks/>
        TPSearch
        
        '''<remarks/>
        TPSearchEx
        
        '''<remarks/>
        TPList
        
        '''<remarks/>
        TPListEx
        
        '''<remarks/>
        TPFind
        
        '''<remarks/>
        TPFindEx
        
        '''<remarks/>
        TPDataEMail
        
        '''<remarks/>
        TPSetMailboxDefault
        
        '''<remarks/>
        TPGetMailboxDefault
        
        '''<remarks/>
        TPEMailX400Format
        
        '''<remarks/>
        TPMoveMailbox
        
        '''<remarks/>
        TPSetRoutingGroup
        
        '''<remarks/>
        TPListExPaged
        
        '''<remarks/>
        TPListByOwner
        
        '''<remarks/>
        TPSetOwner
        
        '''<remarks/>
        InterconnectAdd
        
        '''<remarks/>
        InterconnectUpdate
        
        '''<remarks/>
        InterconnectNote
        
        '''<remarks/>
        InterconnectCancel
        
        '''<remarks/>
        InterconnectInfo
        
        '''<remarks/>
        InterconnectNoteList
        
        '''<remarks/>
        InterconnectListByECGridID
        
        '''<remarks/>
        InterconnectListByStatus
        
        '''<remarks/>
        InterconnectListByStatusEx
        
        '''<remarks/>
        InterconnectAssignNetOps
        
        '''<remarks/>
        InterconnectCount
        
        '''<remarks/>
        InterconnectCountEx
        
        '''<remarks/>
        InterconnectInfoGUID
        
        '''<remarks/>
        MigrationAdd
        
        '''<remarks/>
        MigrationUpdate
        
        '''<remarks/>
        MigrationNote
        
        '''<remarks/>
        MigrationCancel
        
        '''<remarks/>
        MigrationInfo
        
        '''<remarks/>
        MigrationList
        
        '''<remarks/>
        MigrationAddECGridID
        
        '''<remarks/>
        MigrationRemoveECGridID
        
        '''<remarks/>
        MigrationNotice
        
        '''<remarks/>
        MigrationConfirmation
        
        '''<remarks/>
        CarbonCopyAdd
        
        '''<remarks/>
        CarbonCopyAddEx
        
        '''<remarks/>
        CarbonCopyActivate
        
        '''<remarks/>
        CarbonCopySuspend
        
        '''<remarks/>
        CarbonCopyTerminate
        
        '''<remarks/>
        CarbonCopyInfo
        
        '''<remarks/>
        CarbonCopyList
        
        '''<remarks/>
        CarbonCopyListEx
        
        '''<remarks/>
        ParcelInBox
        
        '''<remarks/>
        ParcelInBoxEx
        
        '''<remarks/>
        ParcelDownload
        
        '''<remarks/>
        ParcelDownloadInner
        
        '''<remarks/>
        ParcelDownloadConfirm
        
        '''<remarks/>
        ParcelUpload
        
        '''<remarks/>
        ParcelUploadEx
        
        '''<remarks/>
        ParcelInfo
        
        '''<remarks/>
        ParcelMainfest
        
        '''<remarks/>
        ParcelInterchangeManifest
        
        '''<remarks/>
        ParcelNoteList
        
        '''<remarks/>
        ParcelInBoxArchive
        
        '''<remarks/>
        ParcelInBoxArchiveEx
        
        '''<remarks/>
        ParcelOutBoxArchive
        
        '''<remarks/>
        ParcelOutBoxArchiveEx
        
        '''<remarks/>
        ParcelOutBoxError
        
        '''<remarks/>
        ParcelOutBoxErrorEx
        
        '''<remarks/>
        InterchangeInBox
        
        '''<remarks/>
        InterchangeInBoxEx
        
        '''<remarks/>
        InterchangeOutBox
        
        '''<remarks/>
        InterchangeOutBoxEx
        
        '''<remarks/>
        InterchangeHeaderInfo
        
        '''<remarks/>
        ParcelDownloadReset
        
        '''<remarks/>
        InterchangeOutBoxNoRoute
        
        '''<remarks/>
        InterchangeOutBoxNoRouteEx
        
        '''<remarks/>
        ParcelUploadGZip
        
        '''<remarks/>
        InterchangeInfo
        
        '''<remarks/>
        InterchangeResend
        
        '''<remarks/>
        ParcelUploadGZipEx
        
        '''<remarks/>
        ParcelUploadExA
        
        '''<remarks/>
        ParcelSetMailbagControlID
        
        '''<remarks/>
        ParcelUpdateStatus
        
        '''<remarks/>
        ParcelUpdateLocalStatus
        
        '''<remarks/>
        ParcelUploadDirected
        
        '''<remarks/>
        ParcelUploadDirectedGZip
        
        '''<remarks/>
        ParcelDownloadConfirmPendingAck
        
        '''<remarks/>
        InterchangeHeaderInfoB
        
        '''<remarks/>
        ParcelDownloadGZip
        
        '''<remarks/>
        ParcelDownloadCancel
        
        '''<remarks/>
        ParcelTest
        
        '''<remarks/>
        InterchangeManifest
        
        '''<remarks/>
        ParcelOutBoxInProcess
        
        '''<remarks/>
        ParcelOutBoxInProcessEx
        
        '''<remarks/>
        ParcelResend
        
        '''<remarks/>
        InterchangeCancel
        
        '''<remarks/>
        ParcelAcknowledgmentNote
        
        '''<remarks/>
        InterchangeOutBoxPending
        
        '''<remarks/>
        InterchangeOutBoxPendingEx
        
        '''<remarks/>
        InterchangeInBoxPending
        
        '''<remarks/>
        InterchangeInBoxPendingEx
        
        '''<remarks/>
        InterchangeInBoxArchive
        
        '''<remarks/>
        InterchangeInBoxArchiveEx
        
        '''<remarks/>
        InterchangeOutBoxArchive
        
        '''<remarks/>
        InterchangeOutBoxArchiveEx
        
        '''<remarks/>
        CallBackAdd
        
        '''<remarks/>
        CallBackActivate
        
        '''<remarks/>
        CallBackSuspend
        
        '''<remarks/>
        CallBackTerminate
        
        '''<remarks/>
        CallBackList
        
        '''<remarks/>
        CallBackListEx
        
        '''<remarks/>
        CallBackEventList
        
        '''<remarks/>
        CallBackEventListEx
        
        '''<remarks/>
        CallBackInvoke
        
        '''<remarks/>
        CallBackTest
        
        '''<remarks/>
        CallBackPendingList
        
        '''<remarks/>
        CallBackPendingListEx
        
        '''<remarks/>
        CallBackQueueInfo
        
        '''<remarks/>
        CallBackEventInfo
        
        '''<remarks/>
        CallBackAddEx
        
        '''<remarks/>
        CallBackFailedList
        
        '''<remarks/>
        CallBackFailedListEx
        
        '''<remarks/>
        ReportMonthly
        
        '''<remarks/>
        ReportMonthlyEx
        
        '''<remarks/>
        ReportTrafficStats
        
        '''<remarks/>
        ReportTrafficStatsEx
        
        '''<remarks/>
        ReportInstantStats
        
        '''<remarks/>
        ReportInstantStatsEx
        
        '''<remarks/>
        AS2Add
        
        '''<remarks/>
        AS2Update
        
        '''<remarks/>
        AS2Activate
        
        '''<remarks/>
        AS2Suspend
        
        '''<remarks/>
        AS2Terminate
        
        '''<remarks/>
        AS2CertAddPublic
        
        '''<remarks/>
        AS2CertAddPrivate
        
        '''<remarks/>
        AS2CertTerminate
        
        '''<remarks/>
        AS2Find
        
        '''<remarks/>
        AS2List
        
        '''<remarks/>
        AS2ListEx
        
        '''<remarks/>
        AS2Info
        
        '''<remarks/>
        AS2CertCreatePrivate
        
        '''<remarks/>
        AS2Pair
        
        '''<remarks/>
        AS2DefaultMailbox
        
        '''<remarks/>
        AS2SetPair
        
        '''<remarks/>
        AS2SetStatus
        
        '''<remarks/>
        GISBAdd
        
        '''<remarks/>
        GISBUpdate
        
        '''<remarks/>
        GISBActivate
        
        '''<remarks/>
        GISBSuspend
        
        '''<remarks/>
        GISBTerminate
        
        '''<remarks/>
        GISBKeyAdd
        
        '''<remarks/>
        GISBKeyTerminate
        
        '''<remarks/>
        GISBFind
        
        '''<remarks/>
        GISBList
        
        '''<remarks/>
        GISBListEx
        
        '''<remarks/>
        GISBInfo
        
        '''<remarks/>
        CertificateAddPublic
        
        '''<remarks/>
        CertificateAddPrivate
        
        '''<remarks/>
        CertificateCreatePrivate
        
        '''<remarks/>
        CertificateSetUsageDates
        
        '''<remarks/>
        CertificateTerminate
        
        '''<remarks/>
        CommAdd
        
        '''<remarks/>
        CommUpdate
        
        '''<remarks/>
        CommSetStatus
        
        '''<remarks/>
        CommFind
        
        '''<remarks/>
        CommList
        
        '''<remarks/>
        CommListEx
        
        '''<remarks/>
        CommInfo
        
        '''<remarks/>
        CommPair
        
        '''<remarks/>
        CommSetPair
        
        '''<remarks/>
        ContractInfo
        
        '''<remarks/>
        ContractList
        
        '''<remarks/>
        ContractListEx
        
        '''<remarks/>
        ContractAdd
        
        '''<remarks/>
        ContractActivate
        
        '''<remarks/>
        ContractSuspend
        
        '''<remarks/>
        ContractTerminate
        
        '''<remarks/>
        ContractExpiring
        
        '''<remarks/>
        PricelistInfo
        
        '''<remarks/>
        PricelistAdd
        
        '''<remarks/>
        PricelistLineAdd
        
        '''<remarks/>
        PricelistLineDelete
        
        '''<remarks/>
        InvoiceCreate
        
        '''<remarks/>
        InvoiceInfo
        
        '''<remarks/>
        InvoiceList
        
        '''<remarks/>
        InvoiceSetStatus
        
        '''<remarks/>
        InvoiceCalculateLineItem
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum RetCode
        
        '''<remarks/>
        Unknown
        
        '''<remarks/>
        Success
        
        '''<remarks/>
        SesssionTimeout
        
        '''<remarks/>
        AccessDenied
        
        '''<remarks/>
        NotFound
        
        '''<remarks/>
        InvalidID
        
        '''<remarks/>
        Duplicate
        
        '''<remarks/>
        IDExistsOnNetwork
        
        '''<remarks/>
        InvalidDataType
        
        '''<remarks/>
        InvalidDataLength
        
        '''<remarks/>
        DataError
        
        '''<remarks/>
        SQLError
        
        '''<remarks/>
        InternalError
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class SessionLogInfo
        
        Private sessionIDField As String
        
        Private startTimeField As Date
        
        Private endTimeField As Date
        
        Private expiresField As Date
        
        Private networkIDField As Integer
        
        Private mailboxIDField As Integer
        
        Private userIDField As Integer
        
        Private statusField As SessionStatus
        
        Private versionField As String
        
        Private eventsField() As SessionEvents
        
        '''<remarks/>
        Public Property SessionID() As String
            Get
                Return Me.sessionIDField
            End Get
            Set
                Me.sessionIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StartTime() As Date
            Get
                Return Me.startTimeField
            End Get
            Set
                Me.startTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EndTime() As Date
            Get
                Return Me.endTimeField
            End Get
            Set
                Me.endTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Expires() As Date
            Get
                Return Me.expiresField
            End Get
            Set
                Me.expiresField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxID() As Integer
            Get
                Return Me.mailboxIDField
            End Get
            Set
                Me.mailboxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As Integer
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As SessionStatus
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Version() As String
            Get
                Return Me.versionField
            End Get
            Set
                Me.versionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Events() As SessionEvents()
            Get
                Return Me.eventsField
            End Get
            Set
                Me.eventsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum SessionStatus
        
        '''<remarks/>
        Open
        
        '''<remarks/>
        Closed
        
        '''<remarks/>
        Expired
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class SessionInfo
        
        Private eCGridOSVersionField As String
        
        Private sessionIDField As String
        
        Private sessionEventIDField As Integer
        
        Private userIDField As Integer
        
        Private loginNameField As String
        
        Private firstNameField As String
        
        Private lastNameField As String
        
        Private companyField As String
        
        Private eMailField As String
        
        Private phoneField As String
        
        Private timeZoneOffsetField As Single
        
        Private authLevelField As AuthLevel
        
        Private lastLoginField As Date
        
        Private openSessionsField As Short
        
        Private timeOutField As Short
        
        Private networkIDField As Integer
        
        Private mailboxIDField As Integer
        
        Private ipField As String
        
        '''<remarks/>
        Public Property ECGridOSVersion() As String
            Get
                Return Me.eCGridOSVersionField
            End Get
            Set
                Me.eCGridOSVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SessionID() As String
            Get
                Return Me.sessionIDField
            End Get
            Set
                Me.sessionIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SessionEventID() As Integer
            Get
                Return Me.sessionEventIDField
            End Get
            Set
                Me.sessionEventIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As Integer
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LoginName() As String
            Get
                Return Me.loginNameField
            End Get
            Set
                Me.loginNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FirstName() As String
            Get
                Return Me.firstNameField
            End Get
            Set
                Me.firstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastName() As String
            Get
                Return Me.lastNameField
            End Get
            Set
                Me.lastNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Company() As String
            Get
                Return Me.companyField
            End Get
            Set
                Me.companyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EMail() As String
            Get
                Return Me.eMailField
            End Get
            Set
                Me.eMailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Phone() As String
            Get
                Return Me.phoneField
            End Get
            Set
                Me.phoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TimeZoneOffset() As Single
            Get
                Return Me.timeZoneOffsetField
            End Get
            Set
                Me.timeZoneOffsetField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AuthLevel() As AuthLevel
            Get
                Return Me.authLevelField
            End Get
            Set
                Me.authLevelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastLogin() As Date
            Get
                Return Me.lastLoginField
            End Get
            Set
                Me.lastLoginField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OpenSessions() As Short
            Get
                Return Me.openSessionsField
            End Get
            Set
                Me.openSessionsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TimeOut() As Short
            Get
                Return Me.timeOutField
            End Get
            Set
                Me.timeOutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxID() As Integer
            Get
                Return Me.mailboxIDField
            End Get
            Set
                Me.mailboxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ip() As String
            Get
                Return Me.ipField
            End Get
            Set
                Me.ipField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class NoteAttachment
        
        Private fileNameField As String
        
        Private contentField() As Byte
        
        '''<remarks/>
        Public Property FileName() As String
            Get
                Return Me.fileNameField
            End Get
            Set
                Me.fileNameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property Content() As Byte()
            Get
                Return Me.contentField
            End Get
            Set
                Me.contentField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class InterconnectNote
        
        Private interconnectIDField As Integer
        
        Private interconnectNoteIDField As Integer
        
        Private noteDateField As Date
        
        Private statusField As StatusInterconnect
        
        Private postedByField As String
        
        Private userIDField As Integer
        
        Private mailToField As String
        
        Private noteField As String
        
        Private attachmentField As NoteAttachment
        
        '''<remarks/>
        Public Property InterconnectID() As Integer
            Get
                Return Me.interconnectIDField
            End Get
            Set
                Me.interconnectIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InterconnectNoteID() As Integer
            Get
                Return Me.interconnectNoteIDField
            End Get
            Set
                Me.interconnectNoteIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NoteDate() As Date
            Get
                Return Me.noteDateField
            End Get
            Set
                Me.noteDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As StatusInterconnect
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PostedBy() As String
            Get
                Return Me.postedByField
            End Get
            Set
                Me.postedByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As Integer
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailTo() As String
            Get
                Return Me.mailToField
            End Get
            Set
                Me.mailToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Note() As String
            Get
                Return Me.noteField
            End Get
            Set
                Me.noteField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Attachment() As NoteAttachment
            Get
                Return Me.attachmentField
            End Get
            Set
                Me.attachmentField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum StatusInterconnect
        
        '''<remarks/>
        Pending
        
        '''<remarks/>
        Completed
        
        '''<remarks/>
        Canceled
        
        '''<remarks/>
        Delayed
        
        '''<remarks/>
        Problem
        
        '''<remarks/>
        AuthorizationRequired
        
        '''<remarks/>
        NoStatusChange
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class InterconnectIDInfo
        
        Private interconnectIDField As Integer
        
        Private uniqueIDField As String
        
        Private createdField As Date
        
        Private modifiedField As Date
        
        Private completedField As Date
        
        Private lastTrafficField As Date
        
        Private lastTrafficInboundField As Date
        
        Private lastTrafficOutboundField As Date
        
        Private requestorUserField As UserIDInfo
        
        Private contactUserField As UserIDInfo
        
        Private contactNameField As String
        
        Private contactEMailField As String
        
        Private statusField As StatusInterconnect
        
        Private suspendPendingInterchangesField As Boolean
        
        Private tP1Field As ECGridIDInfo
        
        Private aS2ID1Field As String
        
        Private reference1Field As String
        
        Private tP2Field As ECGridIDInfo
        
        Private aS2ID2Field As String
        
        Private reference2Field As String
        
        Private netOpsField As UserIDInfo
        
        '''<remarks/>
        Public Property InterconnectID() As Integer
            Get
                Return Me.interconnectIDField
            End Get
            Set
                Me.interconnectIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UniqueID() As String
            Get
                Return Me.uniqueIDField
            End Get
            Set
                Me.uniqueIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Created() As Date
            Get
                Return Me.createdField
            End Get
            Set
                Me.createdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Modified() As Date
            Get
                Return Me.modifiedField
            End Get
            Set
                Me.modifiedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Completed() As Date
            Get
                Return Me.completedField
            End Get
            Set
                Me.completedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastTraffic() As Date
            Get
                Return Me.lastTrafficField
            End Get
            Set
                Me.lastTrafficField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastTrafficInbound() As Date
            Get
                Return Me.lastTrafficInboundField
            End Get
            Set
                Me.lastTrafficInboundField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastTrafficOutbound() As Date
            Get
                Return Me.lastTrafficOutboundField
            End Get
            Set
                Me.lastTrafficOutboundField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RequestorUser() As UserIDInfo
            Get
                Return Me.requestorUserField
            End Get
            Set
                Me.requestorUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ContactUser() As UserIDInfo
            Get
                Return Me.contactUserField
            End Get
            Set
                Me.contactUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ContactName() As String
            Get
                Return Me.contactNameField
            End Get
            Set
                Me.contactNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ContactEMail() As String
            Get
                Return Me.contactEMailField
            End Get
            Set
                Me.contactEMailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As StatusInterconnect
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SuspendPendingInterchanges() As Boolean
            Get
                Return Me.suspendPendingInterchangesField
            End Get
            Set
                Me.suspendPendingInterchangesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TP1() As ECGridIDInfo
            Get
                Return Me.tP1Field
            End Get
            Set
                Me.tP1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AS2ID1() As String
            Get
                Return Me.aS2ID1Field
            End Get
            Set
                Me.aS2ID1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Reference1() As String
            Get
                Return Me.reference1Field
            End Get
            Set
                Me.reference1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TP2() As ECGridIDInfo
            Get
                Return Me.tP2Field
            End Get
            Set
                Me.tP2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AS2ID2() As String
            Get
                Return Me.aS2ID2Field
            End Get
            Set
                Me.aS2ID2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Reference2() As String
            Get
                Return Me.reference2Field
            End Get
            Set
                Me.reference2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetOps() As UserIDInfo
            Get
                Return Me.netOpsField
            End Get
            Set
                Me.netOpsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class ECGridIDInfo
        
        Private eCGridIDField As Integer
        
        Private networkIDField As Integer
        
        Private networkNameField As String
        
        Private mailboxIDField As Integer
        
        Private mailboxNameField As String
        
        Private qualifierField As String
        
        Private idField As String
        
        Private descriptionField As String
        
        Private dataEMailField As String
        
        Private mailboxDefaultField As Boolean
        
        Private statusField As StatusECGridID
        
        Private useTypeField As UseType
        
        Private ownerField As UserIDInfo
        
        Private ownerInfoField As ECGridOwnerInfo
        
        '''<remarks/>
        Public Property ECGridID() As Integer
            Get
                Return Me.eCGridIDField
            End Get
            Set
                Me.eCGridIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkName() As String
            Get
                Return Me.networkNameField
            End Get
            Set
                Me.networkNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxID() As Integer
            Get
                Return Me.mailboxIDField
            End Get
            Set
                Me.mailboxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxName() As String
            Get
                Return Me.mailboxNameField
            End Get
            Set
                Me.mailboxNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Qualifier() As String
            Get
                Return Me.qualifierField
            End Get
            Set
                Me.qualifierField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ID() As String
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DataEMail() As String
            Get
                Return Me.dataEMailField
            End Get
            Set
                Me.dataEMailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxDefault() As Boolean
            Get
                Return Me.mailboxDefaultField
            End Get
            Set
                Me.mailboxDefaultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As StatusECGridID
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UseType() As UseType
            Get
                Return Me.useTypeField
            End Get
            Set
                Me.useTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Owner() As UserIDInfo
            Get
                Return Me.ownerField
            End Get
            Set
                Me.ownerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OwnerInfo() As ECGridOwnerInfo
            Get
                Return Me.ownerInfoField
            End Get
            Set
                Me.ownerInfoField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum StatusECGridID
        
        '''<remarks/>
        Active
        
        '''<remarks/>
        AutoRoute
        
        '''<remarks/>
        Pending
        
        '''<remarks/>
        Suspended
        
        '''<remarks/>
        Terminated
        
        '''<remarks/>
        Duplicate
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum UseType
        
        '''<remarks/>
        Undefined
        
        '''<remarks/>
        Test
        
        '''<remarks/>
        Production
        
        '''<remarks/>
        TestAndProduction
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class ECGridOwnerInfo
        
        Private networkIDField As Integer
        
        Private networkNameField As String
        
        Private mailboxIDField As Integer
        
        Private mailboxNameField As String
        
        Private createdField As Date
        
        Private modifiedField As Date
        
        Private effectiveField As Date
        
        Private expiresField As Date
        
        Private lastTrafficField As Date
        
        Private routingGroupField As RoutingGroup
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkName() As String
            Get
                Return Me.networkNameField
            End Get
            Set
                Me.networkNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxID() As Integer
            Get
                Return Me.mailboxIDField
            End Get
            Set
                Me.mailboxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxName() As String
            Get
                Return Me.mailboxNameField
            End Get
            Set
                Me.mailboxNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Created() As Date
            Get
                Return Me.createdField
            End Get
            Set
                Me.createdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Modified() As Date
            Get
                Return Me.modifiedField
            End Get
            Set
                Me.modifiedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Effective() As Date
            Get
                Return Me.effectiveField
            End Get
            Set
                Me.effectiveField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Expires() As Date
            Get
                Return Me.expiresField
            End Get
            Set
                Me.expiresField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastTraffic() As Date
            Get
                Return Me.lastTrafficField
            End Get
            Set
                Me.lastTrafficField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RoutingGroup() As RoutingGroup
            Get
                Return Me.routingGroupField
            End Get
            Set
                Me.routingGroupField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum RoutingGroup
        
        '''<remarks/>
        ProductionA
        
        '''<remarks/>
        ProductionB
        
        '''<remarks/>
        Migration1
        
        '''<remarks/>
        Migration2
        
        '''<remarks/>
        NetOpsOnly1
        
        '''<remarks/>
        NetOpsOnly2
        
        '''<remarks/>
        SuperHub
        
        '''<remarks/>
        Test
        
        '''<remarks/>
        Suspense1
        
        '''<remarks/>
        Suspense2
        
        '''<remarks/>
        Suspense3
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class ECGridIDInfoCollection
        
        Private pageSizeField As Short
        
        Private pageNumberField As Short
        
        Private countField As Short
        
        Private totalRecordsField As Integer
        
        Private totalPagesField As Short
        
        Private eCGridIDInfoListField() As ECGridIDInfo
        
        '''<remarks/>
        Public Property PageSize() As Short
            Get
                Return Me.pageSizeField
            End Get
            Set
                Me.pageSizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PageNumber() As Short
            Get
                Return Me.pageNumberField
            End Get
            Set
                Me.pageNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Count() As Short
            Get
                Return Me.countField
            End Get
            Set
                Me.countField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TotalRecords() As Integer
            Get
                Return Me.totalRecordsField
            End Get
            Set
                Me.totalRecordsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TotalPages() As Short
            Get
                Return Me.totalPagesField
            End Get
            Set
                Me.totalPagesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ECGridIDInfoList() As ECGridIDInfo()
            Get
                Return Me.eCGridIDInfoListField
            End Get
            Set
                Me.eCGridIDInfoListField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class ParcelNote
        
        Private parcelIDField As Long
        
        Private parcelNoteIDField As Integer
        
        Private interchangeIDField As Long
        
        Private noteDateField As Date
        
        Private statusCodeField As String
        
        Private postedByField As String
        
        Private userIDField As Integer
        
        Private noteField As String
        
        '''<remarks/>
        Public Property ParcelID() As Long
            Get
                Return Me.parcelIDField
            End Get
            Set
                Me.parcelIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ParcelNoteID() As Integer
            Get
                Return Me.parcelNoteIDField
            End Get
            Set
                Me.parcelNoteIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InterchangeID() As Long
            Get
                Return Me.interchangeIDField
            End Get
            Set
                Me.interchangeIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NoteDate() As Date
            Get
                Return Me.noteDateField
            End Get
            Set
                Me.noteDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusCode() As String
            Get
                Return Me.statusCodeField
            End Get
            Set
                Me.statusCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PostedBy() As String
            Get
                Return Me.postedByField
            End Get
            Set
                Me.postedByField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As Integer
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Note() As String
            Get
                Return Me.noteField
            End Get
            Set
                Me.noteField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class FileInfo
        
        Private parcelIDField As Long
        
        Private fileNameField As String
        
        Private fileDateField As Date
        
        Private bytesField As Integer
        
        Private standardField As EDIStandard
        
        Private contentField() As Byte
        
        '''<remarks/>
        Public Property ParcelID() As Long
            Get
                Return Me.parcelIDField
            End Get
            Set
                Me.parcelIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FileName() As String
            Get
                Return Me.fileNameField
            End Get
            Set
                Me.fileNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FileDate() As Date
            Get
                Return Me.fileDateField
            End Get
            Set
                Me.fileDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Bytes() As Integer
            Get
                Return Me.bytesField
            End Get
            Set
                Me.bytesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Standard() As EDIStandard
            Get
                Return Me.standardField
            End Get
            Set
                Me.standardField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property Content() As Byte()
            Get
                Return Me.contentField
            End Get
            Set
                Me.contentField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum EDIStandard
        
        '''<remarks/>
        X12
        
        '''<remarks/>
        EDIFACT
        
        '''<remarks/>
        TRADACOMS
        
        '''<remarks/>
        VDA
        
        '''<remarks/>
        XML
        
        '''<remarks/>
        TXT
        
        '''<remarks/>
        PDF
        
        '''<remarks/>
        Binary
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class ParcelIDInfoCollection
        
        Private pageSizeField As Short
        
        Private pageNumberField As Short
        
        Private countField As Short
        
        Private totalRecordsField As Integer
        
        Private totalPagesField As Short
        
        Private parcelIDInfoListField() As ParcelIDInfo
        
        '''<remarks/>
        Public Property PageSize() As Short
            Get
                Return Me.pageSizeField
            End Get
            Set
                Me.pageSizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PageNumber() As Short
            Get
                Return Me.pageNumberField
            End Get
            Set
                Me.pageNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Count() As Short
            Get
                Return Me.countField
            End Get
            Set
                Me.countField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TotalRecords() As Integer
            Get
                Return Me.totalRecordsField
            End Get
            Set
                Me.totalRecordsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TotalPages() As Short
            Get
                Return Me.totalPagesField
            End Get
            Set
                Me.totalPagesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ParcelIDInfoList() As ParcelIDInfo()
            Get
                Return Me.parcelIDInfoListField
            End Get
            Set
                Me.parcelIDInfoListField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class ParcelIDInfo
        
        Private parcelIDField As Long
        
        Private parcelBytesField As Integer
        
        Private parcelDateField As Date
        
        Private actualBytesField As Integer
        
        Private networkIDFromField As Integer
        
        Private networkNameFromField As String
        
        Private mailboxIDFromField As Integer
        
        Private mailboxNameFromField As String
        
        Private networkIDToField As Integer
        
        Private networkNameToField As String
        
        Private mailboxIDToField As Integer
        
        Private mailboxNameToField As String
        
        Private fileNameField As String
        
        Private mailbagControlIDField As String
        
        Private statusDateField As Date
        
        Private statusCodeField As String
        
        Private statusMessageField As String
        
        Private localStatusField As Short
        
        Private localStatusDateField As Date
        
        Private validField As ParcelValid
        
        Private acknowledgmentField As String
        
        Private directionField As Direction
        
        Private interchangesField() As InterchangeIDInfo
        
        Private logField() As ManifestInfo
        
        '''<remarks/>
        Public Property ParcelID() As Long
            Get
                Return Me.parcelIDField
            End Get
            Set
                Me.parcelIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ParcelBytes() As Integer
            Get
                Return Me.parcelBytesField
            End Get
            Set
                Me.parcelBytesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ParcelDate() As Date
            Get
                Return Me.parcelDateField
            End Get
            Set
                Me.parcelDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ActualBytes() As Integer
            Get
                Return Me.actualBytesField
            End Get
            Set
                Me.actualBytesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkIDFrom() As Integer
            Get
                Return Me.networkIDFromField
            End Get
            Set
                Me.networkIDFromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkNameFrom() As String
            Get
                Return Me.networkNameFromField
            End Get
            Set
                Me.networkNameFromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxIDFrom() As Integer
            Get
                Return Me.mailboxIDFromField
            End Get
            Set
                Me.mailboxIDFromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxNameFrom() As String
            Get
                Return Me.mailboxNameFromField
            End Get
            Set
                Me.mailboxNameFromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkIDTo() As Integer
            Get
                Return Me.networkIDToField
            End Get
            Set
                Me.networkIDToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkNameTo() As String
            Get
                Return Me.networkNameToField
            End Get
            Set
                Me.networkNameToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxIDTo() As Integer
            Get
                Return Me.mailboxIDToField
            End Get
            Set
                Me.mailboxIDToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxNameTo() As String
            Get
                Return Me.mailboxNameToField
            End Get
            Set
                Me.mailboxNameToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FileName() As String
            Get
                Return Me.fileNameField
            End Get
            Set
                Me.fileNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailbagControlID() As String
            Get
                Return Me.mailbagControlIDField
            End Get
            Set
                Me.mailbagControlIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusDate() As Date
            Get
                Return Me.statusDateField
            End Get
            Set
                Me.statusDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusCode() As String
            Get
                Return Me.statusCodeField
            End Get
            Set
                Me.statusCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusMessage() As String
            Get
                Return Me.statusMessageField
            End Get
            Set
                Me.statusMessageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LocalStatus() As Short
            Get
                Return Me.localStatusField
            End Get
            Set
                Me.localStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LocalStatusDate() As Date
            Get
                Return Me.localStatusDateField
            End Get
            Set
                Me.localStatusDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Valid() As ParcelValid
            Get
                Return Me.validField
            End Get
            Set
                Me.validField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Acknowledgment() As String
            Get
                Return Me.acknowledgmentField
            End Get
            Set
                Me.acknowledgmentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Direction() As Direction
            Get
                Return Me.directionField
            End Get
            Set
                Me.directionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Interchanges() As InterchangeIDInfo()
            Get
                Return Me.interchangesField
            End Get
            Set
                Me.interchangesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Log() As ManifestInfo()
            Get
                Return Me.logField
            End Get
            Set
                Me.logField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum ParcelValid
        
        '''<remarks/>
        Pending
        
        '''<remarks/>
        Invalid
        
        '''<remarks/>
        Valid
        
        '''<remarks/>
        ValidPartialRouted
        
        '''<remarks/>
        ValidNoneRouted
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum Direction
        
        '''<remarks/>
        NoDir
        
        '''<remarks/>
        OutBox
        
        '''<remarks/>
        InBox
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class InterchangeIDInfo
        
        Private interchangeIDField As Long
        
        Private interchangeProcessDateField As Date
        
        Private networkIDFromField As Integer
        
        Private networkNameFromField As String
        
        Private mailboxIDFromField As Integer
        
        Private networkIDToField As Integer
        
        Private networkNameToField As String
        
        Private mailboxIDToField As Integer
        
        Private standardField As EDIStandard
        
        Private bytesField As Integer
        
        Private interchangeControlIDField As String
        
        Private interchangeDateTimeField As Date
        
        Private statusDateField As Date
        
        Private statusCodeField As String
        
        Private statusMessageField As String
        
        Private documentTypeField As String
        
        Private headerField As String
        
        Private tPFromField As ECGridIDInfo
        
        Private tPToField As ECGridIDInfo
        
        Private parcelsField() As ParcelIDInfo
        
        '''<remarks/>
        Public Property InterchangeID() As Long
            Get
                Return Me.interchangeIDField
            End Get
            Set
                Me.interchangeIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InterchangeProcessDate() As Date
            Get
                Return Me.interchangeProcessDateField
            End Get
            Set
                Me.interchangeProcessDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkIDFrom() As Integer
            Get
                Return Me.networkIDFromField
            End Get
            Set
                Me.networkIDFromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkNameFrom() As String
            Get
                Return Me.networkNameFromField
            End Get
            Set
                Me.networkNameFromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxIDFrom() As Integer
            Get
                Return Me.mailboxIDFromField
            End Get
            Set
                Me.mailboxIDFromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkIDTo() As Integer
            Get
                Return Me.networkIDToField
            End Get
            Set
                Me.networkIDToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkNameTo() As String
            Get
                Return Me.networkNameToField
            End Get
            Set
                Me.networkNameToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxIDTo() As Integer
            Get
                Return Me.mailboxIDToField
            End Get
            Set
                Me.mailboxIDToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Standard() As EDIStandard
            Get
                Return Me.standardField
            End Get
            Set
                Me.standardField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Bytes() As Integer
            Get
                Return Me.bytesField
            End Get
            Set
                Me.bytesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InterchangeControlID() As String
            Get
                Return Me.interchangeControlIDField
            End Get
            Set
                Me.interchangeControlIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InterchangeDateTime() As Date
            Get
                Return Me.interchangeDateTimeField
            End Get
            Set
                Me.interchangeDateTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusDate() As Date
            Get
                Return Me.statusDateField
            End Get
            Set
                Me.statusDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusCode() As String
            Get
                Return Me.statusCodeField
            End Get
            Set
                Me.statusCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusMessage() As String
            Get
                Return Me.statusMessageField
            End Get
            Set
                Me.statusMessageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DocumentType() As String
            Get
                Return Me.documentTypeField
            End Get
            Set
                Me.documentTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Header() As String
            Get
                Return Me.headerField
            End Get
            Set
                Me.headerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TPFrom() As ECGridIDInfo
            Get
                Return Me.tPFromField
            End Get
            Set
                Me.tPFromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TPTo() As ECGridIDInfo
            Get
                Return Me.tPToField
            End Get
            Set
                Me.tPToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Parcels() As ParcelIDInfo()
            Get
                Return Me.parcelsField
            End Get
            Set
                Me.parcelsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class ManifestInfo
        
        Private manifestDateField As Date
        
        Private networkIDField As Integer
        
        Private networkNameField As String
        
        Private typeField As ManifestType
        
        Private parcelIDField As Long
        
        Private interchangeIDField As Long
        
        Private statusCodeField As String
        
        Private statusMessageField As String
        
        Private statusColorField As String
        
        '''<remarks/>
        Public Property ManifestDate() As Date
            Get
                Return Me.manifestDateField
            End Get
            Set
                Me.manifestDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkName() As String
            Get
                Return Me.networkNameField
            End Get
            Set
                Me.networkNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Type() As ManifestType
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ParcelID() As Long
            Get
                Return Me.parcelIDField
            End Get
            Set
                Me.parcelIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InterchangeID() As Long
            Get
                Return Me.interchangeIDField
            End Get
            Set
                Me.interchangeIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusCode() As String
            Get
                Return Me.statusCodeField
            End Get
            Set
                Me.statusCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusMessage() As String
            Get
                Return Me.statusMessageField
            End Get
            Set
                Me.statusMessageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusColor() As String
            Get
                Return Me.statusColorField
            End Get
            Set
                Me.statusColorField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum ManifestType
        
        '''<remarks/>
        System
        
        '''<remarks/>
        [Error]
        
        '''<remarks/>
        Manual
        
        '''<remarks/>
        ECGridOS
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class CarbonCopyIDInfo
        
        Private carbonCopyIDField As Integer
        
        Private networkIDField As Integer
        
        Private mailboxIDField As Integer
        
        Private createdField As Date
        
        Private modifiedField As Date
        
        Private statusField As Status
        
        Private originalFromField As ECGridIDInfo
        
        Private originalToField As ECGridIDInfo
        
        Private cCFromField As ECGridIDInfo
        
        Private cCToField As ECGridIDInfo
        
        Private transactionSetField As String
        
        '''<remarks/>
        Public Property CarbonCopyID() As Integer
            Get
                Return Me.carbonCopyIDField
            End Get
            Set
                Me.carbonCopyIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxID() As Integer
            Get
                Return Me.mailboxIDField
            End Get
            Set
                Me.mailboxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Created() As Date
            Get
                Return Me.createdField
            End Get
            Set
                Me.createdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Modified() As Date
            Get
                Return Me.modifiedField
            End Get
            Set
                Me.modifiedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As Status
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OriginalFrom() As ECGridIDInfo
            Get
                Return Me.originalFromField
            End Get
            Set
                Me.originalFromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OriginalTo() As ECGridIDInfo
            Get
                Return Me.originalToField
            End Get
            Set
                Me.originalToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CCFrom() As ECGridIDInfo
            Get
                Return Me.cCFromField
            End Get
            Set
                Me.cCFromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CCTo() As ECGridIDInfo
            Get
                Return Me.cCToField
            End Get
            Set
                Me.cCToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TransactionSet() As String
            Get
                Return Me.transactionSetField
            End Get
            Set
                Me.transactionSetField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class CallBackLogInfo
        
        Private callBackLogIDField As Integer
        
        Private dateField As Date
        
        Private callNumberField As Short
        
        Private returnCodeField As Integer
        
        Private messageField As String
        
        '''<remarks/>
        Public Property CallBackLogID() As Integer
            Get
                Return Me.callBackLogIDField
            End Get
            Set
                Me.callBackLogIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property [Date]() As Date
            Get
                Return Me.dateField
            End Get
            Set
                Me.dateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CallNumber() As Short
            Get
                Return Me.callNumberField
            End Get
            Set
                Me.callNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReturnCode() As Integer
            Get
                Return Me.returnCodeField
            End Get
            Set
                Me.returnCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Message() As String
            Get
                Return Me.messageField
            End Get
            Set
                Me.messageField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class CallBackQueueIDInfo
        
        Private callBackQueueIDField As Integer
        
        Private dateField As Date
        
        Private callBackEventField As CallBackEventIDInfo
        
        Private callsRemainingField As Short
        
        Private nextCallField As Date
        
        Private statusField As StatusCallBack
        
        Private objectIDField As Integer
        
        Private userIDField As Integer
        
        Private testField As Boolean
        
        Private callBackLogField() As CallBackLogInfo
        
        '''<remarks/>
        Public Property CallBackQueueID() As Integer
            Get
                Return Me.callBackQueueIDField
            End Get
            Set
                Me.callBackQueueIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property [Date]() As Date
            Get
                Return Me.dateField
            End Get
            Set
                Me.dateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CallBackEvent() As CallBackEventIDInfo
            Get
                Return Me.callBackEventField
            End Get
            Set
                Me.callBackEventField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CallsRemaining() As Short
            Get
                Return Me.callsRemainingField
            End Get
            Set
                Me.callsRemainingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NextCall() As Date
            Get
                Return Me.nextCallField
            End Get
            Set
                Me.nextCallField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As StatusCallBack
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ObjectID() As Integer
            Get
                Return Me.objectIDField
            End Get
            Set
                Me.objectIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As Integer
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Test() As Boolean
            Get
                Return Me.testField
            End Get
            Set
                Me.testField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CallBackLog() As CallBackLogInfo()
            Get
                Return Me.callBackLogField
            End Get
            Set
                Me.callBackLogField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class CallBackEventIDInfo
        
        Private callBackEventIDField As Integer
        
        Private networkIDField As Integer
        
        Private mailboxIDField As Integer
        
        Private userIDField As Integer
        
        Private createdField As Date
        
        Private modifiedField As Date
        
        Private systemObjectField As Objects
        
        Private objectStatusField As Short
        
        Private statusCodeField As String
        
        Private directionField As Direction
        
        Private frequencyField As Short
        
        Private maxCallsField As Short
        
        Private statusField As Status
        
        Private uRLField As String
        
        Private hTTPAuthenticationField As HTTPAuthInfo
        
        Private callBackQueueField() As CallBackQueueIDInfo
        
        '''<remarks/>
        Public Property CallBackEventID() As Integer
            Get
                Return Me.callBackEventIDField
            End Get
            Set
                Me.callBackEventIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxID() As Integer
            Get
                Return Me.mailboxIDField
            End Get
            Set
                Me.mailboxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As Integer
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Created() As Date
            Get
                Return Me.createdField
            End Get
            Set
                Me.createdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Modified() As Date
            Get
                Return Me.modifiedField
            End Get
            Set
                Me.modifiedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SystemObject() As Objects
            Get
                Return Me.systemObjectField
            End Get
            Set
                Me.systemObjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ObjectStatus() As Short
            Get
                Return Me.objectStatusField
            End Get
            Set
                Me.objectStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusCode() As String
            Get
                Return Me.statusCodeField
            End Get
            Set
                Me.statusCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Direction() As Direction
            Get
                Return Me.directionField
            End Get
            Set
                Me.directionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Frequency() As Short
            Get
                Return Me.frequencyField
            End Get
            Set
                Me.frequencyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MaxCalls() As Short
            Get
                Return Me.maxCallsField
            End Get
            Set
                Me.maxCallsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As Status
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property URL() As String
            Get
                Return Me.uRLField
            End Get
            Set
                Me.uRLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HTTPAuthentication() As HTTPAuthInfo
            Get
                Return Me.hTTPAuthenticationField
            End Get
            Set
                Me.hTTPAuthenticationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CallBackQueue() As CallBackQueueIDInfo()
            Get
                Return Me.callBackQueueField
            End Get
            Set
                Me.callBackQueueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum Objects
        
        '''<remarks/>
        User
        
        '''<remarks/>
        Network
        
        '''<remarks/>
        Mailbox
        
        '''<remarks/>
        ECGridID
        
        '''<remarks/>
        Interconnect
        
        '''<remarks/>
        Migration
        
        '''<remarks/>
        Parcel
        
        '''<remarks/>
        Interchange
        
        '''<remarks/>
        CarbonCopy
        
        '''<remarks/>
        CallBackEvent
        
        '''<remarks/>
        AS2
        
        '''<remarks/>
        GISB
        
        '''<remarks/>
        ParcelNotes
        
        '''<remarks/>
        InterconnectNote
        
        '''<remarks/>
        PriceList
        
        '''<remarks/>
        Contract
        
        '''<remarks/>
        Invoice
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class HTTPAuthInfo
        
        Private typeField As HTTPAuthType
        
        Private userField As String
        
        Private passwordField As String
        
        '''<remarks/>
        Public Property Type() As HTTPAuthType
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum HTTPAuthType
        
        '''<remarks/>
        None
        
        '''<remarks/>
        Basic
        
        '''<remarks/>
        Digest
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum StatusCallBack
        
        '''<remarks/>
        Active
        
        '''<remarks/>
        Pending
        
        '''<remarks/>
        Completed
        
        '''<remarks/>
        [Error]
        
        '''<remarks/>
        Canceled
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class InterchangeIDInfoCollection
        
        Private pageSizeField As Short
        
        Private pageNumberField As Short
        
        Private countField As Short
        
        Private totalRecordsField As Integer
        
        Private totalPagesField As Short
        
        Private interchangeIDInfoListField() As InterchangeIDInfo
        
        '''<remarks/>
        Public Property PageSize() As Short
            Get
                Return Me.pageSizeField
            End Get
            Set
                Me.pageSizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PageNumber() As Short
            Get
                Return Me.pageNumberField
            End Get
            Set
                Me.pageNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Count() As Short
            Get
                Return Me.countField
            End Get
            Set
                Me.countField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TotalRecords() As Integer
            Get
                Return Me.totalRecordsField
            End Get
            Set
                Me.totalRecordsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TotalPages() As Short
            Get
                Return Me.totalPagesField
            End Get
            Set
                Me.totalPagesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InterchangeIDInfoList() As InterchangeIDInfo()
            Get
                Return Me.interchangeIDInfoListField
            End Get
            Set
                Me.interchangeIDInfoListField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class LineItem
        
        Private lineItemNumberField As Short
        
        Private priceListIDField As Integer
        
        Private priceListDescriptionField As String
        
        Private systemObjectField As Objects
        
        Private systemIDField As Integer
        
        Private systemNameField As String
        
        Private levelField As PricelistItemLevel
        
        Private levelNameField As String
        
        Private modelField As PricelistModel
        
        Private scheduleField As Schedule
        
        Private actualField As Decimal
        
        Private quantityBilledField As Decimal
        
        Private taxableField As Boolean
        
        Private amountField As Decimal
        
        '''<remarks/>
        Public Property LineItemNumber() As Short
            Get
                Return Me.lineItemNumberField
            End Get
            Set
                Me.lineItemNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PriceListID() As Integer
            Get
                Return Me.priceListIDField
            End Get
            Set
                Me.priceListIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PriceListDescription() As String
            Get
                Return Me.priceListDescriptionField
            End Get
            Set
                Me.priceListDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SystemObject() As Objects
            Get
                Return Me.systemObjectField
            End Get
            Set
                Me.systemObjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SystemID() As Integer
            Get
                Return Me.systemIDField
            End Get
            Set
                Me.systemIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SystemName() As String
            Get
                Return Me.systemNameField
            End Get
            Set
                Me.systemNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Level() As PricelistItemLevel
            Get
                Return Me.levelField
            End Get
            Set
                Me.levelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LevelName() As String
            Get
                Return Me.levelNameField
            End Get
            Set
                Me.levelNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As PricelistModel
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Schedule() As Schedule
            Get
                Return Me.scheduleField
            End Get
            Set
                Me.scheduleField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Actual() As Decimal
            Get
                Return Me.actualField
            End Get
            Set
                Me.actualField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property QuantityBilled() As Decimal
            Get
                Return Me.quantityBilledField
            End Get
            Set
                Me.quantityBilledField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Taxable() As Boolean
            Get
                Return Me.taxableField
            End Get
            Set
                Me.taxableField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Amount() As Decimal
            Get
                Return Me.amountField
            End Get
            Set
                Me.amountField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum PricelistItemLevel
        
        '''<remarks/>
        Additional
        
        '''<remarks/>
        OneTime
        
        '''<remarks/>
        General
        
        '''<remarks/>
        Developement
        
        '''<remarks/>
        Level1
        
        '''<remarks/>
        Level2
        
        '''<remarks/>
        Level3
        
        '''<remarks/>
        Level4
        
        '''<remarks/>
        Level5
        
        '''<remarks/>
        Level6
        
        '''<remarks/>
        Level7
        
        '''<remarks/>
        Level8
        
        '''<remarks/>
        Level9
        
        '''<remarks/>
        Tier1
        
        '''<remarks/>
        Tier2
        
        '''<remarks/>
        Tier3
        
        '''<remarks/>
        Tier4
        
        '''<remarks/>
        Tier5
        
        '''<remarks/>
        Tier6
        
        '''<remarks/>
        Tier7
        
        '''<remarks/>
        Tier8
        
        '''<remarks/>
        Tier9
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum PricelistModel
        
        '''<remarks/>
        Simple
        
        '''<remarks/>
        Tiered
        
        '''<remarks/>
        Stacked
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class Schedule
        
        Private scheduleIDField As Integer
        
        Private allowanceField As Decimal
        
        Private maximumField As Integer
        
        Private blockField As Decimal
        
        Private rateField As Decimal
        
        Private catalogIDField As Integer
        
        Private descriptionField As String
        
        Private accountReportField As PricelistAccountReports
        
        Private measureField As PricelistMeasureField
        
        Private specifiedNetworkIDField As Integer
        
        Private includeRootMailboxField As Boolean
        
        '''<remarks/>
        Public Property ScheduleID() As Integer
            Get
                Return Me.scheduleIDField
            End Get
            Set
                Me.scheduleIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Allowance() As Decimal
            Get
                Return Me.allowanceField
            End Get
            Set
                Me.allowanceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Maximum() As Integer
            Get
                Return Me.maximumField
            End Get
            Set
                Me.maximumField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Block() As Decimal
            Get
                Return Me.blockField
            End Get
            Set
                Me.blockField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Rate() As Decimal
            Get
                Return Me.rateField
            End Get
            Set
                Me.rateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CatalogID() As Integer
            Get
                Return Me.catalogIDField
            End Get
            Set
                Me.catalogIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountReport() As PricelistAccountReports
            Get
                Return Me.accountReportField
            End Get
            Set
                Me.accountReportField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Measure() As PricelistMeasureField
            Get
                Return Me.measureField
            End Get
            Set
                Me.measureField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpecifiedNetworkID() As Integer
            Get
                Return Me.specifiedNetworkIDField
            End Get
            Set
                Me.specifiedNetworkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IncludeRootMailbox() As Boolean
            Get
                Return Me.includeRootMailboxField
            End Get
            Set
                Me.includeRootMailboxField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum PricelistAccountReports
        
        '''<remarks/>
        FixedRate
        
        '''<remarks/>
        Statistics
        
        '''<remarks/>
        TrafficAll
        
        '''<remarks/>
        TrafficIntraNetwork
        
        '''<remarks/>
        TrafficInterECGrid
        
        '''<remarks/>
        TrafficOffNetwork
        
        '''<remarks/>
        TrafficSpecial
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum PricelistMeasureField
        
        '''<remarks/>
        [Each]
        
        '''<remarks/>
        FixedRate
        
        '''<remarks/>
        NewInterconnects
        
        '''<remarks/>
        CurrentMailboxes
        
        '''<remarks/>
        ActiveQIDs
        
        '''<remarks/>
        ActiveTPs
        
        '''<remarks/>
        TotalTrans
        
        '''<remarks/>
        ToTrans
        
        '''<remarks/>
        FromTrans
        
        '''<remarks/>
        TotalKCs
        
        '''<remarks/>
        ToKCs
        
        '''<remarks/>
        FromKCs
        
        '''<remarks/>
        RegisteredQIDs
        
        '''<remarks/>
        RegisteredTPs
        
        '''<remarks/>
        MigratedTPs
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class Invoice
        
        Private invoiceIDField As Integer
        
        Private invoiceNumberField As String
        
        Private dateField As Date
        
        Private contractIDField As Integer
        
        Private totalAmountField As Decimal
        
        Private pONumberField As String
        
        Private noticeField As String
        
        Private specialNoticeField As String
        
        Private messageField As String
        
        Private statusField As InvoiceStatus
        
        Private statusDateField As Date
        
        Private dateDueField As Date
        
        Private pricelistDescriptionField As String
        
        Private termsField As String
        
        Private billToField As String
        
        Private billToAddressField As String
        
        Private sendToField As UserIDInfo
        
        Private copiesToField As UserIDInfo
        
        Private senderField As UserIDInfo
        
        Private lineItemsField() As LineItem
        
        '''<remarks/>
        Public Property InvoiceID() As Integer
            Get
                Return Me.invoiceIDField
            End Get
            Set
                Me.invoiceIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InvoiceNumber() As String
            Get
                Return Me.invoiceNumberField
            End Get
            Set
                Me.invoiceNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property [Date]() As Date
            Get
                Return Me.dateField
            End Get
            Set
                Me.dateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ContractID() As Integer
            Get
                Return Me.contractIDField
            End Get
            Set
                Me.contractIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TotalAmount() As Decimal
            Get
                Return Me.totalAmountField
            End Get
            Set
                Me.totalAmountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PONumber() As String
            Get
                Return Me.pONumberField
            End Get
            Set
                Me.pONumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Notice() As String
            Get
                Return Me.noticeField
            End Get
            Set
                Me.noticeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SpecialNotice() As String
            Get
                Return Me.specialNoticeField
            End Get
            Set
                Me.specialNoticeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Message() As String
            Get
                Return Me.messageField
            End Get
            Set
                Me.messageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As InvoiceStatus
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusDate() As Date
            Get
                Return Me.statusDateField
            End Get
            Set
                Me.statusDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DateDue() As Date
            Get
                Return Me.dateDueField
            End Get
            Set
                Me.dateDueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PricelistDescription() As String
            Get
                Return Me.pricelistDescriptionField
            End Get
            Set
                Me.pricelistDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Terms() As String
            Get
                Return Me.termsField
            End Get
            Set
                Me.termsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BillTo() As String
            Get
                Return Me.billToField
            End Get
            Set
                Me.billToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BillToAddress() As String
            Get
                Return Me.billToAddressField
            End Get
            Set
                Me.billToAddressField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SendTo() As UserIDInfo
            Get
                Return Me.sendToField
            End Get
            Set
                Me.sendToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CopiesTo() As UserIDInfo
            Get
                Return Me.copiesToField
            End Get
            Set
                Me.copiesToField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Sender() As UserIDInfo
            Get
                Return Me.senderField
            End Get
            Set
                Me.senderField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LineItems() As LineItem()
            Get
                Return Me.lineItemsField
            End Get
            Set
                Me.lineItemsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum InvoiceStatus
        
        '''<remarks/>
        Pending
        
        '''<remarks/>
        Sent
        
        '''<remarks/>
        Paid
        
        '''<remarks/>
        Canceled
        
        '''<remarks/>
        AllUnpaid
        
        '''<remarks/>
        All
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class MailboxNetOpsInfo
        
        Private aliasNetworkIDField As Integer
        
        Private aliasMailboxIDField As Integer
        
        '''<remarks/>
        Public Property AliasNetworkID() As Integer
            Get
                Return Me.aliasNetworkIDField
            End Get
            Set
                Me.aliasNetworkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AliasMailboxID() As Integer
            Get
                Return Me.aliasMailboxIDField
            End Get
            Set
                Me.aliasMailboxIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class MailboxOwnerInfo
        
        Private pricelistIDField As Integer
        
        Private contractIDField As Integer
        
        '''<remarks/>
        Public Property PricelistID() As Integer
            Get
                Return Me.pricelistIDField
            End Get
            Set
                Me.pricelistIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ContractID() As Integer
            Get
                Return Me.contractIDField
            End Get
            Set
                Me.contractIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class MailboxIDInfo
        
        Private mailboxIDField As Integer
        
        Private networkIDField As Integer
        
        Private nameField As String
        
        Private createdField As Date
        
        Private modifiedField As Date
        
        Private statusField As Status
        
        Private descriptionField As String
        
        Private ownerUserIDField As UserIDInfo
        
        Private errorsUserIDField As UserIDInfo
        
        Private interconnectsUserIDField As UserIDInfo
        
        Private noticesUserIDField As UserIDInfo
        
        Private reportsUserIDField As UserIDInfo
        
        Private customerServiceUserIDField As UserIDInfo
        
        Private accountingUserIDField As UserIDInfo
        
        Private managedField As Boolean
        
        Private useTypeField As UseType
        
        Private configField As MailboxConfig
        
        Private eCGridAccountField As Boolean
        
        Private defaultAS2IDField As String
        
        Private ownerInfoField As MailboxOwnerInfo
        
        Private netOpsInfoField As MailboxNetOpsInfo
        
        '''<remarks/>
        Public Property MailboxID() As Integer
            Get
                Return Me.mailboxIDField
            End Get
            Set
                Me.mailboxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Created() As Date
            Get
                Return Me.createdField
            End Get
            Set
                Me.createdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Modified() As Date
            Get
                Return Me.modifiedField
            End Get
            Set
                Me.modifiedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As Status
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OwnerUserID() As UserIDInfo
            Get
                Return Me.ownerUserIDField
            End Get
            Set
                Me.ownerUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorsUserID() As UserIDInfo
            Get
                Return Me.errorsUserIDField
            End Get
            Set
                Me.errorsUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InterconnectsUserID() As UserIDInfo
            Get
                Return Me.interconnectsUserIDField
            End Get
            Set
                Me.interconnectsUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NoticesUserID() As UserIDInfo
            Get
                Return Me.noticesUserIDField
            End Get
            Set
                Me.noticesUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReportsUserID() As UserIDInfo
            Get
                Return Me.reportsUserIDField
            End Get
            Set
                Me.reportsUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomerServiceUserID() As UserIDInfo
            Get
                Return Me.customerServiceUserIDField
            End Get
            Set
                Me.customerServiceUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountingUserID() As UserIDInfo
            Get
                Return Me.accountingUserIDField
            End Get
            Set
                Me.accountingUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Managed() As Boolean
            Get
                Return Me.managedField
            End Get
            Set
                Me.managedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UseType() As UseType
            Get
                Return Me.useTypeField
            End Get
            Set
                Me.useTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Config() As MailboxConfig
            Get
                Return Me.configField
            End Get
            Set
                Me.configField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ECGridAccount() As Boolean
            Get
                Return Me.eCGridAccountField
            End Get
            Set
                Me.eCGridAccountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DefaultAS2ID() As String
            Get
                Return Me.defaultAS2IDField
            End Get
            Set
                Me.defaultAS2IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OwnerInfo() As MailboxOwnerInfo
            Get
                Return Me.ownerInfoField
            End Get
            Set
                Me.ownerInfoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetOpsInfo() As MailboxNetOpsInfo
            Get
                Return Me.netOpsInfoField
            End Get
            Set
                Me.netOpsInfoField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class MailboxConfig
        
        Private inBoxTimeoutField As Short
        
        Private segTermField As Byte
        
        Private elmSepField As Byte
        
        Private subElmSepField As Byte
        
        Private eBCDICFilterField As Boolean
        
        Private fTPasciiFilterField As Boolean
        
        Private lowPassFilterField As Boolean
        
        Private mailbagPassThroughField As Boolean
        
        Private deleteOnDownloadField As Boolean
        
        Private stripDirectedEnvelopeField As Boolean
        
        '''<remarks/>
        Public Property InBoxTimeout() As Short
            Get
                Return Me.inBoxTimeoutField
            End Get
            Set
                Me.inBoxTimeoutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SegTerm() As Byte
            Get
                Return Me.segTermField
            End Get
            Set
                Me.segTermField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ElmSep() As Byte
            Get
                Return Me.elmSepField
            End Get
            Set
                Me.elmSepField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SubElmSep() As Byte
            Get
                Return Me.subElmSepField
            End Get
            Set
                Me.subElmSepField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EBCDICFilter() As Boolean
            Get
                Return Me.eBCDICFilterField
            End Get
            Set
                Me.eBCDICFilterField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FTPasciiFilter() As Boolean
            Get
                Return Me.fTPasciiFilterField
            End Get
            Set
                Me.fTPasciiFilterField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LowPassFilter() As Boolean
            Get
                Return Me.lowPassFilterField
            End Get
            Set
                Me.lowPassFilterField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailbagPassThrough() As Boolean
            Get
                Return Me.mailbagPassThroughField
            End Get
            Set
                Me.mailbagPassThroughField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DeleteOnDownload() As Boolean
            Get
                Return Me.deleteOnDownloadField
            End Get
            Set
                Me.deleteOnDownloadField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StripDirectedEnvelope() As Boolean
            Get
                Return Me.stripDirectedEnvelopeField
            End Get
            Set
                Me.stripDirectedEnvelopeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class NetworkFTPInfo
        
        Private ipField() As String
        
        Private userIDField As String
        
        Private passwordField As String
        
        Private accountField As String
        
        Private virtualDirectoryInField As String
        
        Private virtualDirectoryOutField As String
        
        Private logicalDirectoryField As String
        
        Private maxThreadsField As Short
        
        '''<remarks/>
        Public Property IP() As String()
            Get
                Return Me.ipField
            End Get
            Set
                Me.ipField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Account() As String
            Get
                Return Me.accountField
            End Get
            Set
                Me.accountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VirtualDirectoryIn() As String
            Get
                Return Me.virtualDirectoryInField
            End Get
            Set
                Me.virtualDirectoryInField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VirtualDirectoryOut() As String
            Get
                Return Me.virtualDirectoryOutField
            End Get
            Set
                Me.virtualDirectoryOutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LogicalDirectory() As String
            Get
                Return Me.logicalDirectoryField
            End Get
            Set
                Me.logicalDirectoryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MaxThreads() As Short
            Get
                Return Me.maxThreadsField
            End Get
            Set
                Me.maxThreadsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class NetworkVPN
        
        Private localTunnelField As String
        
        Private remoteTunnelField As String
        
        Private encryptionDomainField() As String
        
        Private sharedSecretField As String
        
        Private encryptionMethodField As NetworkVPNEncryptionMethod
        
        '''<remarks/>
        Public Property LocalTunnel() As String
            Get
                Return Me.localTunnelField
            End Get
            Set
                Me.localTunnelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RemoteTunnel() As String
            Get
                Return Me.remoteTunnelField
            End Get
            Set
                Me.remoteTunnelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EncryptionDomain() As String()
            Get
                Return Me.encryptionDomainField
            End Get
            Set
                Me.encryptionDomainField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SharedSecret() As String
            Get
                Return Me.sharedSecretField
            End Get
            Set
                Me.sharedSecretField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EncryptionMethod() As NetworkVPNEncryptionMethod
            Get
                Return Me.encryptionMethodField
            End Get
            Set
                Me.encryptionMethodField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum NetworkVPNEncryptionMethod
        
        '''<remarks/>
        _3DES_SHA1
        
        '''<remarks/>
        _DES_SHA1
        
        '''<remarks/>
        _3DES_MD5
        
        '''<remarks/>
        _DES_MD5
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class NetworkGateway
        
        Private applicationField As String
        
        Private applicationTimeOutField As Short
        
        Private applicationLogFileField As String
        
        Private frequencyField As Short
        
        Private minimumPollingField As Short
        
        Private handshakeField As NetworkGatewayHandshake
        
        Private commChannelField As NetworkGatewayCommChannel
        
        Private connectionField As NetworkGatewayConnection
        
        '''<remarks/>
        Public Property Application() As String
            Get
                Return Me.applicationField
            End Get
            Set
                Me.applicationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ApplicationTimeOut() As Short
            Get
                Return Me.applicationTimeOutField
            End Get
            Set
                Me.applicationTimeOutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ApplicationLogFile() As String
            Get
                Return Me.applicationLogFileField
            End Get
            Set
                Me.applicationLogFileField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Frequency() As Short
            Get
                Return Me.frequencyField
            End Get
            Set
                Me.frequencyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MinimumPolling() As Short
            Get
                Return Me.minimumPollingField
            End Get
            Set
                Me.minimumPollingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Handshake() As NetworkGatewayHandshake
            Get
                Return Me.handshakeField
            End Get
            Set
                Me.handshakeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CommChannel() As NetworkGatewayCommChannel
            Get
                Return Me.commChannelField
            End Get
            Set
                Me.commChannelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Connection() As NetworkGatewayConnection
            Get
                Return Me.connectionField
            End Get
            Set
                Me.connectionField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum NetworkGatewayHandshake
        
        '''<remarks/>
        Push
        
        '''<remarks/>
        Pull
        
        '''<remarks/>
        PushPull
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum NetworkGatewayCommChannel
        
        '''<remarks/>
        none
        
        '''<remarks/>
        ftp
        
        '''<remarks/>
        sftp
        
        '''<remarks/>
        as2
        
        '''<remarks/>
        http
        
        '''<remarks/>
        oftp
        
        '''<remarks/>
        x400
        
        '''<remarks/>
        gisb
        
        '''<remarks/>
        rnif
        
        '''<remarks/>
        undefined
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum NetworkGatewayConnection
        
        '''<remarks/>
        Internet
        
        '''<remarks/>
        VPN
        
        '''<remarks/>
        Dial
        
        '''<remarks/>
        Other
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class NetworkNetOpsInfo
        
        Private billingUserIDField As Integer
        
        Private billingContactField As String
        
        Private billingEMailField As String
        
        Private billingTypeField As Short
        
        Private invoiceContactField As String
        
        Private invoiceEMailField As String
        
        Private softwareVersionField As String
        
        Private createdField As Date
        
        Private commissionedField As Date
        
        Private decommissionedField As Date
        
        Private modifiedField As Date
        
        Private runDirField As String
        
        Private internalDirectoryField As String
        
        Private externalDirectoryRootField As String
        
        Private externalDirectoryInField As String
        
        Private externalDirectoryOutField As String
        
        Private archiveDaysField As Short
        
        Private supportURLField As String
        
        Private blockSizeField As Short
        
        Private envPerMBField As Short
        
        Private outBoxTimeOutField As Short
        
        Private masterAccountField As String
        
        Private processIDField As Integer
        
        Private userNameField As String
        
        Private userDomainField As String
        
        Private serverField As String
        
        Private aliasNetworkIDField As Integer
        
        Private aliasMailboxIDField As Integer
        
        Private inBoxPatternField As String
        
        Private outBoxPatternField As String
        
        Private x1256Field As Boolean
        
        Private archiveDaysInternalField As Short
        
        Private archiveDaysExternalField As Short
        
        Private maxBatchField As Short
        
        Private dbOpenMaxCyclesField As Short
        
        Private dbOpenMaxSecondsField As Short
        
        Private gatewayField As NetworkGateway
        
        Private vPNField As NetworkVPN
        
        Private fTPServerField As NetworkFTPInfo
        
        Private fTPClientField As NetworkFTPInfo
        
        '''<remarks/>
        Public Property BillingUserID() As Integer
            Get
                Return Me.billingUserIDField
            End Get
            Set
                Me.billingUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BillingContact() As String
            Get
                Return Me.billingContactField
            End Get
            Set
                Me.billingContactField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BillingEMail() As String
            Get
                Return Me.billingEMailField
            End Get
            Set
                Me.billingEMailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BillingType() As Short
            Get
                Return Me.billingTypeField
            End Get
            Set
                Me.billingTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InvoiceContact() As String
            Get
                Return Me.invoiceContactField
            End Get
            Set
                Me.invoiceContactField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InvoiceEMail() As String
            Get
                Return Me.invoiceEMailField
            End Get
            Set
                Me.invoiceEMailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SoftwareVersion() As String
            Get
                Return Me.softwareVersionField
            End Get
            Set
                Me.softwareVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Created() As Date
            Get
                Return Me.createdField
            End Get
            Set
                Me.createdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Commissioned() As Date
            Get
                Return Me.commissionedField
            End Get
            Set
                Me.commissionedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Decommissioned() As Date
            Get
                Return Me.decommissionedField
            End Get
            Set
                Me.decommissionedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Modified() As Date
            Get
                Return Me.modifiedField
            End Get
            Set
                Me.modifiedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RunDir() As String
            Get
                Return Me.runDirField
            End Get
            Set
                Me.runDirField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InternalDirectory() As String
            Get
                Return Me.internalDirectoryField
            End Get
            Set
                Me.internalDirectoryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExternalDirectoryRoot() As String
            Get
                Return Me.externalDirectoryRootField
            End Get
            Set
                Me.externalDirectoryRootField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExternalDirectoryIn() As String
            Get
                Return Me.externalDirectoryInField
            End Get
            Set
                Me.externalDirectoryInField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ExternalDirectoryOut() As String
            Get
                Return Me.externalDirectoryOutField
            End Get
            Set
                Me.externalDirectoryOutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ArchiveDays() As Short
            Get
                Return Me.archiveDaysField
            End Get
            Set
                Me.archiveDaysField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SupportURL() As String
            Get
                Return Me.supportURLField
            End Get
            Set
                Me.supportURLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BlockSize() As Short
            Get
                Return Me.blockSizeField
            End Get
            Set
                Me.blockSizeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EnvPerMB() As Short
            Get
                Return Me.envPerMBField
            End Get
            Set
                Me.envPerMBField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OutBoxTimeOut() As Short
            Get
                Return Me.outBoxTimeOutField
            End Get
            Set
                Me.outBoxTimeOutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MasterAccount() As String
            Get
                Return Me.masterAccountField
            End Get
            Set
                Me.masterAccountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProcessID() As Integer
            Get
                Return Me.processIDField
            End Get
            Set
                Me.processIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserName() As String
            Get
                Return Me.userNameField
            End Get
            Set
                Me.userNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserDomain() As String
            Get
                Return Me.userDomainField
            End Get
            Set
                Me.userDomainField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Server() As String
            Get
                Return Me.serverField
            End Get
            Set
                Me.serverField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AliasNetworkID() As Integer
            Get
                Return Me.aliasNetworkIDField
            End Get
            Set
                Me.aliasNetworkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AliasMailboxID() As Integer
            Get
                Return Me.aliasMailboxIDField
            End Get
            Set
                Me.aliasMailboxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InBoxPattern() As String
            Get
                Return Me.inBoxPatternField
            End Get
            Set
                Me.inBoxPatternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OutBoxPattern() As String
            Get
                Return Me.outBoxPatternField
            End Get
            Set
                Me.outBoxPatternField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property X1256() As Boolean
            Get
                Return Me.x1256Field
            End Get
            Set
                Me.x1256Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ArchiveDaysInternal() As Short
            Get
                Return Me.archiveDaysInternalField
            End Get
            Set
                Me.archiveDaysInternalField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ArchiveDaysExternal() As Short
            Get
                Return Me.archiveDaysExternalField
            End Get
            Set
                Me.archiveDaysExternalField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MaxBatch() As Short
            Get
                Return Me.maxBatchField
            End Get
            Set
                Me.maxBatchField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dbOpenMaxCycles() As Short
            Get
                Return Me.dbOpenMaxCyclesField
            End Get
            Set
                Me.dbOpenMaxCyclesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dbOpenMaxSeconds() As Short
            Get
                Return Me.dbOpenMaxSecondsField
            End Get
            Set
                Me.dbOpenMaxSecondsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Gateway() As NetworkGateway
            Get
                Return Me.gatewayField
            End Get
            Set
                Me.gatewayField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VPN() As NetworkVPN
            Get
                Return Me.vPNField
            End Get
            Set
                Me.vPNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FTPServer() As NetworkFTPInfo
            Get
                Return Me.fTPServerField
            End Get
            Set
                Me.fTPServerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FTPClient() As NetworkFTPInfo
            Get
                Return Me.fTPClientField
            End Get
            Set
                Me.fTPClientField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class NetworkOwnerInfo
        
        Private typeField As String
        
        Private routingTypeField As String
        
        Private routingField As NetworkRoutingType
        
        Private legacyPasswordField As String
        
        Private interconnectContactField As String
        
        Private interconnectEMailField As String
        
        Private errorContactField As String
        
        Private errorEMailField As String
        
        Private configField As MailboxConfig
        
        Private pricelistIDField As Integer
        
        Private contractIDField As Integer
        
        '''<remarks/>
        Public Property Type() As String
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RoutingType() As String
            Get
                Return Me.routingTypeField
            End Get
            Set
                Me.routingTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Routing() As NetworkRoutingType
            Get
                Return Me.routingField
            End Get
            Set
                Me.routingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LegacyPassword() As String
            Get
                Return Me.legacyPasswordField
            End Get
            Set
                Me.legacyPasswordField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InterconnectContact() As String
            Get
                Return Me.interconnectContactField
            End Get
            Set
                Me.interconnectContactField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InterconnectEMail() As String
            Get
                Return Me.interconnectEMailField
            End Get
            Set
                Me.interconnectEMailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorContact() As String
            Get
                Return Me.errorContactField
            End Get
            Set
                Me.errorContactField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorEMail() As String
            Get
                Return Me.errorEMailField
            End Get
            Set
                Me.errorEMailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Config() As MailboxConfig
            Get
                Return Me.configField
            End Get
            Set
                Me.configField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PricelistID() As Integer
            Get
                Return Me.pricelistIDField
            End Get
            Set
                Me.pricelistIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ContractID() As Integer
            Get
                Return Me.contractIDField
            End Get
            Set
                Me.contractIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum NetworkRoutingType
        
        '''<remarks/>
        Open
        
        '''<remarks/>
        OpenWithSenderValidation
        
        '''<remarks/>
        TradingPartnerPairs
        
        '''<remarks/>
        MultiNetwork
        
        '''<remarks/>
        ECGridOpen
        
        '''<remarks/>
        ECGridTradingPartnerPairs
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class NetworkLog
        
        Private logIDField As Integer
        
        Private logDateField As Date
        
        Private userIDField As Integer
        
        Private typeField As NetworkLogType
        
        Private statusField As NetworkLogStatus
        
        Private authLevelField As AuthLevel
        
        Private descriptionField As String
        
        '''<remarks/>
        Public Property LogID() As Integer
            Get
                Return Me.logIDField
            End Get
            Set
                Me.logIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LogDate() As Date
            Get
                Return Me.logDateField
            End Get
            Set
                Me.logDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As Integer
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Type() As NetworkLogType
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As NetworkLogStatus
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AuthLevel() As AuthLevel
            Get
                Return Me.authLevelField
            End Get
            Set
                Me.authLevelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum NetworkLogType
        
        '''<remarks/>
        SystemResponse
        
        '''<remarks/>
        SystemAutomated
        
        '''<remarks/>
        User
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum NetworkLogStatus
        
        '''<remarks/>
        Start
        
        '''<remarks/>
        CheckIn
        
        '''<remarks/>
        Access
        
        '''<remarks/>
        Pause
        
        '''<remarks/>
        Restart
        
        '''<remarks/>
        Shutdown
        
        '''<remarks/>
        StatusChange
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class NetworkIDInfo
        
        Private networkIDField As Integer
        
        Private nameField As String
        
        Private locationField As String
        
        Private adminContactField As String
        
        Private adminPhoneField As String
        
        Private adminEMailField As String
        
        Private lastContactField As Date
        
        Private typeField As NetworkType
        
        Private statusField As Status
        
        Private runStatusField As NetworkRunStatus
        
        Private networkStatusField As NetworkStatus
        
        Private eCGridAccountField As Boolean
        
        Private ownerUserIDField As Integer
        
        Private routingUserIDField As Integer
        
        Private errorsUserIDField As Integer
        
        Private interconnectsUserIDField As Integer
        
        Private noticesUserIDField As Integer
        
        Private reportsUserIDField As Integer
        
        Private accountingUserIDField As Integer
        
        Private customerServiceUserIDField As Integer
        
        Private homeWebsiteField As String
        
        Private supportWebsiteField As String
        
        Private loginWebsiteField As String
        
        Private createdField As Date
        
        Private modifiedField As Date
        
        Private lastLogField As NetworkLog
        
        Private ownerInfoField As NetworkOwnerInfo
        
        Private netOpsInfoField As NetworkNetOpsInfo
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Location() As String
            Get
                Return Me.locationField
            End Get
            Set
                Me.locationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AdminContact() As String
            Get
                Return Me.adminContactField
            End Get
            Set
                Me.adminContactField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AdminPhone() As String
            Get
                Return Me.adminPhoneField
            End Get
            Set
                Me.adminPhoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AdminEMail() As String
            Get
                Return Me.adminEMailField
            End Get
            Set
                Me.adminEMailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastContact() As Date
            Get
                Return Me.lastContactField
            End Get
            Set
                Me.lastContactField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Type() As NetworkType
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As Status
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RunStatus() As NetworkRunStatus
            Get
                Return Me.runStatusField
            End Get
            Set
                Me.runStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkStatus() As NetworkStatus
            Get
                Return Me.networkStatusField
            End Get
            Set
                Me.networkStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ECGridAccount() As Boolean
            Get
                Return Me.eCGridAccountField
            End Get
            Set
                Me.eCGridAccountField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OwnerUserID() As Integer
            Get
                Return Me.ownerUserIDField
            End Get
            Set
                Me.ownerUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RoutingUserID() As Integer
            Get
                Return Me.routingUserIDField
            End Get
            Set
                Me.routingUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorsUserID() As Integer
            Get
                Return Me.errorsUserIDField
            End Get
            Set
                Me.errorsUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InterconnectsUserID() As Integer
            Get
                Return Me.interconnectsUserIDField
            End Get
            Set
                Me.interconnectsUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NoticesUserID() As Integer
            Get
                Return Me.noticesUserIDField
            End Get
            Set
                Me.noticesUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReportsUserID() As Integer
            Get
                Return Me.reportsUserIDField
            End Get
            Set
                Me.reportsUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountingUserID() As Integer
            Get
                Return Me.accountingUserIDField
            End Get
            Set
                Me.accountingUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomerServiceUserID() As Integer
            Get
                Return Me.customerServiceUserIDField
            End Get
            Set
                Me.customerServiceUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HomeWebsite() As String
            Get
                Return Me.homeWebsiteField
            End Get
            Set
                Me.homeWebsiteField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SupportWebsite() As String
            Get
                Return Me.supportWebsiteField
            End Get
            Set
                Me.supportWebsiteField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LoginWebsite() As String
            Get
                Return Me.loginWebsiteField
            End Get
            Set
                Me.loginWebsiteField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Created() As Date
            Get
                Return Me.createdField
            End Get
            Set
                Me.createdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Modified() As Date
            Get
                Return Me.modifiedField
            End Get
            Set
                Me.modifiedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastLog() As NetworkLog
            Get
                Return Me.lastLogField
            End Get
            Set
                Me.lastLogField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OwnerInfo() As NetworkOwnerInfo
            Get
                Return Me.ownerInfoField
            End Get
            Set
                Me.ownerInfoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetOpsInfo() As NetworkNetOpsInfo
            Get
                Return Me.netOpsInfoField
            End Get
            Set
                Me.netOpsInfoField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum NetworkType
        
        '''<remarks/>
        Network
        
        '''<remarks/>
        Router
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum NetworkRunStatus
        
        '''<remarks/>
        Restart
        
        '''<remarks/>
        OffLine
        
        '''<remarks/>
        Active
        
        '''<remarks/>
        Sleeping
        
        '''<remarks/>
        Alert
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum NetworkStatus
        
        '''<remarks/>
        Redirected
        
        '''<remarks/>
        NormalOperation
        
        '''<remarks/>
        ECGridScheduledOutage
        
        '''<remarks/>
        ECGridUnscheduledOutage
        
        '''<remarks/>
        NetworkScheduledOutage
        
        '''<remarks/>
        NetworkUnscheduledOutage
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class Contract
        
        Private contractIDField As Integer
        
        Private descriptionField As String
        
        Private contractNumberField As String
        
        Private currentModField As Short
        
        Private dateField As Date
        
        Private effectiveField As Date
        
        Private expiresField As Date
        
        Private termField As Short
        
        Private renewalDaysField As Short
        
        Private optionTermsField As Short
        
        Private statusField As Status
        
        Private pONumberField As String
        
        Private aggregateNetworkTrafficField As Boolean
        
        Private addressField As String
        
        Private ownerField As UserIDInfo
        
        Private administratorUserField As UserIDInfo
        
        Private accountingUserField As UserIDInfo
        
        Private accountingCCUserField As UserIDInfo
        
        Private x12InvoiceECGridIDField As Integer
        
        Private networksField() As NetworkIDInfo
        
        Private mailboxesField() As MailboxIDInfo
        
        Private lastInvoiceNumberField As String
        
        Private lastInvoiceDateField As Date
        
        '''<remarks/>
        Public Property ContractID() As Integer
            Get
                Return Me.contractIDField
            End Get
            Set
                Me.contractIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ContractNumber() As String
            Get
                Return Me.contractNumberField
            End Get
            Set
                Me.contractNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CurrentMod() As Short
            Get
                Return Me.currentModField
            End Get
            Set
                Me.currentModField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property [Date]() As Date
            Get
                Return Me.dateField
            End Get
            Set
                Me.dateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Effective() As Date
            Get
                Return Me.effectiveField
            End Get
            Set
                Me.effectiveField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Expires() As Date
            Get
                Return Me.expiresField
            End Get
            Set
                Me.expiresField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Term() As Short
            Get
                Return Me.termField
            End Get
            Set
                Me.termField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RenewalDays() As Short
            Get
                Return Me.renewalDaysField
            End Get
            Set
                Me.renewalDaysField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OptionTerms() As Short
            Get
                Return Me.optionTermsField
            End Get
            Set
                Me.optionTermsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As Status
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PONumber() As String
            Get
                Return Me.pONumberField
            End Get
            Set
                Me.pONumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AggregateNetworkTraffic() As Boolean
            Get
                Return Me.aggregateNetworkTrafficField
            End Get
            Set
                Me.aggregateNetworkTrafficField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Address() As String
            Get
                Return Me.addressField
            End Get
            Set
                Me.addressField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Owner() As UserIDInfo
            Get
                Return Me.ownerField
            End Get
            Set
                Me.ownerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AdministratorUser() As UserIDInfo
            Get
                Return Me.administratorUserField
            End Get
            Set
                Me.administratorUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountingUser() As UserIDInfo
            Get
                Return Me.accountingUserField
            End Get
            Set
                Me.accountingUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountingCCUser() As UserIDInfo
            Get
                Return Me.accountingCCUserField
            End Get
            Set
                Me.accountingCCUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property X12InvoiceECGridID() As Integer
            Get
                Return Me.x12InvoiceECGridIDField
            End Get
            Set
                Me.x12InvoiceECGridIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Networks() As NetworkIDInfo()
            Get
                Return Me.networksField
            End Get
            Set
                Me.networksField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Mailboxes() As MailboxIDInfo()
            Get
                Return Me.mailboxesField
            End Get
            Set
                Me.mailboxesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastInvoiceNumber() As String
            Get
                Return Me.lastInvoiceNumberField
            End Get
            Set
                Me.lastInvoiceNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastInvoiceDate() As Date
            Get
                Return Me.lastInvoiceDateField
            End Get
            Set
                Me.lastInvoiceDateField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class Level
        
        Private level1Field As PricelistItemLevel
        
        Private nameField As String
        
        Private limitedMonthsField As Short
        
        Private schedulesField() As Schedule
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute("Level")>  _
        Public Property Level1() As PricelistItemLevel
            Get
                Return Me.level1Field
            End Get
            Set
                Me.level1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LimitedMonths() As Short
            Get
                Return Me.limitedMonthsField
            End Get
            Set
                Me.limitedMonthsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Schedules() As Schedule()
            Get
                Return Me.schedulesField
            End Get
            Set
                Me.schedulesField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class Pricelist
        
        Private pricelistIDField As Integer
        
        Private ownerField As UserIDInfo
        
        Private dateField As Date
        
        Private descriptionField As String
        
        Private modelField As PricelistModel
        
        Private statusField As Status
        
        Private levelsField() As Level
        
        '''<remarks/>
        Public Property PricelistID() As Integer
            Get
                Return Me.pricelistIDField
            End Get
            Set
                Me.pricelistIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Owner() As UserIDInfo
            Get
                Return Me.ownerField
            End Get
            Set
                Me.ownerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property [Date]() As Date
            Get
                Return Me.dateField
            End Get
            Set
                Me.dateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Model() As PricelistModel
            Get
                Return Me.modelField
            End Get
            Set
                Me.modelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As Status
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Levels() As Level()
            Get
                Return Me.levelsField
            End Get
            Set
                Me.levelsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class PGPKeyInfo
        
        Private certKeyIDField As Integer
        
        Private keyIDField As String
        
        Private userIDField As String
        
        Private typeField As CertificateType
        
        Private beginUsageField As Date
        
        Private endUsageField As Date
        
        Private expiresField As Date
        
        Private statusField As Status
        
        Private privateField As Boolean
        
        Private passwordField As String
        
        '''<remarks/>
        Public Property CertKeyID() As Integer
            Get
                Return Me.certKeyIDField
            End Get
            Set
                Me.certKeyIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property KeyID() As String
            Get
                Return Me.keyIDField
            End Get
            Set
                Me.keyIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Type() As CertificateType
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BeginUsage() As Date
            Get
                Return Me.beginUsageField
            End Get
            Set
                Me.beginUsageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EndUsage() As Date
            Get
                Return Me.endUsageField
            End Get
            Set
                Me.endUsageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Expires() As Date
            Get
                Return Me.expiresField
            End Get
            Set
                Me.expiresField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As Status
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property [Private]() As Boolean
            Get
                Return Me.privateField
            End Get
            Set
                Me.privateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum CertificateType
        
        '''<remarks/>
        X509
        
        '''<remarks/>
        PGP
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class GISBCommInfo
        
        Private commIDField As Integer
        
        Private identifierField As String
        
        Private userIDField As Integer
        
        Private networkIDField As Integer
        
        Private mailboxIDField As Integer
        
        Private useTypeField As UseType
        
        Private uRLField As String
        
        Private signDataField As Boolean
        
        Private encryptDataField As Boolean
        
        Private versionField As String
        
        Private statusField As Status
        
        Private receiptField As ReceiptType
        
        Private hTTPAuthenticationField As HTTPAuthInfo
        
        Private pGPKeysField() As PGPKeyInfo
        
        '''<remarks/>
        Public Property CommID() As Integer
            Get
                Return Me.commIDField
            End Get
            Set
                Me.commIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Identifier() As String
            Get
                Return Me.identifierField
            End Get
            Set
                Me.identifierField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As Integer
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxID() As Integer
            Get
                Return Me.mailboxIDField
            End Get
            Set
                Me.mailboxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UseType() As UseType
            Get
                Return Me.useTypeField
            End Get
            Set
                Me.useTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property URL() As String
            Get
                Return Me.uRLField
            End Get
            Set
                Me.uRLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SignData() As Boolean
            Get
                Return Me.signDataField
            End Get
            Set
                Me.signDataField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EncryptData() As Boolean
            Get
                Return Me.encryptDataField
            End Get
            Set
                Me.encryptDataField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Version() As String
            Get
                Return Me.versionField
            End Get
            Set
                Me.versionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As Status
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Receipt() As ReceiptType
            Get
                Return Me.receiptField
            End Get
            Set
                Me.receiptField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HTTPAuthentication() As HTTPAuthInfo
            Get
                Return Me.hTTPAuthenticationField
            End Get
            Set
                Me.hTTPAuthenticationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PGPKeys() As PGPKeyInfo()
            Get
                Return Me.pGPKeysField
            End Get
            Set
                Me.pGPKeysField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum ReceiptType
        
        '''<remarks/>
        None
        
        '''<remarks/>
        SynchronousUnsigned
        
        '''<remarks/>
        SynchronousSigned
        
        '''<remarks/>
        AsynchronousUnsigned
        
        '''<remarks/>
        AsynchronousSigned
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class CertificateRoot
        
        Private passwordField As String
        
        Private privatePFXField() As Byte
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property PrivatePFX() As Byte()
            Get
                Return Me.privatePFXField
            End Get
            Set
                Me.privatePFXField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class Certificate
        
        Private certKeyIDField As Integer
        
        Private partnerIDField As String
        
        Private partnerURLField As String
        
        Private typeField As CertificateType
        
        Private usageField As CertificateUsage
        
        Private secureHashAlgorithmField As String
        
        Private subjectField As String
        
        Private issuerField As String
        
        Private hasPrivateKeyField As Boolean
        
        Private publicCertificateField() As Byte
        
        Private beginUsageField As Date
        
        Private endUsageField As Date
        
        Private notBeforeField As Date
        
        Private notAfterField As Date
        
        Private serialNumberField As String
        
        Private thumbprintField As String
        
        Private statusField As Status
        
        Private rootInfoField As CertificateRoot
        
        '''<remarks/>
        Public Property CertKeyID() As Integer
            Get
                Return Me.certKeyIDField
            End Get
            Set
                Me.certKeyIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PartnerID() As String
            Get
                Return Me.partnerIDField
            End Get
            Set
                Me.partnerIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PartnerURL() As String
            Get
                Return Me.partnerURLField
            End Get
            Set
                Me.partnerURLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Type() As CertificateType
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Usage() As CertificateUsage
            Get
                Return Me.usageField
            End Get
            Set
                Me.usageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SecureHashAlgorithm() As String
            Get
                Return Me.secureHashAlgorithmField
            End Get
            Set
                Me.secureHashAlgorithmField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Subject() As String
            Get
                Return Me.subjectField
            End Get
            Set
                Me.subjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Issuer() As String
            Get
                Return Me.issuerField
            End Get
            Set
                Me.issuerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HasPrivateKey() As Boolean
            Get
                Return Me.hasPrivateKeyField
            End Get
            Set
                Me.hasPrivateKeyField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property PublicCertificate() As Byte()
            Get
                Return Me.publicCertificateField
            End Get
            Set
                Me.publicCertificateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BeginUsage() As Date
            Get
                Return Me.beginUsageField
            End Get
            Set
                Me.beginUsageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EndUsage() As Date
            Get
                Return Me.endUsageField
            End Get
            Set
                Me.endUsageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NotBefore() As Date
            Get
                Return Me.notBeforeField
            End Get
            Set
                Me.notBeforeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NotAfter() As Date
            Get
                Return Me.notAfterField
            End Get
            Set
                Me.notAfterField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SerialNumber() As String
            Get
                Return Me.serialNumberField
            End Get
            Set
                Me.serialNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Thumbprint() As String
            Get
                Return Me.thumbprintField
            End Get
            Set
                Me.thumbprintField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As Status
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RootInfo() As CertificateRoot
            Get
                Return Me.rootInfoField
            End Get
            Set
                Me.rootInfoField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum CertificateUsage
        
        '''<remarks/>
        SSL
        
        '''<remarks/>
        Encryption
        
        '''<remarks/>
        Signature
        
        '''<remarks/>
        EncryptionAndSignature
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class CommIDInfo
        
        Private commIDField As Integer
        
        Private typeField As NetworkGatewayCommChannel
        
        Private createdField As Date
        
        Private modifiedField As Date
        
        Private hostedField As Boolean
        
        Private identifierField As String
        
        Private ownerField As UserIDInfo
        
        Private networkIDField As Integer
        
        Private mailboxIDField As Integer
        
        Private useTypeField As UseType
        
        Private uRLField As String
        
        Private mimeTypeOverrideField As String
        
        Private signDataField As Boolean
        
        Private encryptDataField As Boolean
        
        Private compressDataField As Boolean
        
        Private beginUsageField As Date
        
        Private endUsageField As Date
        
        Private statusField As Status
        
        Private receiptField As ReceiptType
        
        Private sSLClientAuthenticationField As Boolean
        
        Private hTTPAuthenticationField As HTTPAuthInfo
        
        Private certificatesField() As Certificate
        
        '''<remarks/>
        Public Property CommID() As Integer
            Get
                Return Me.commIDField
            End Get
            Set
                Me.commIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Type() As NetworkGatewayCommChannel
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Created() As Date
            Get
                Return Me.createdField
            End Get
            Set
                Me.createdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Modified() As Date
            Get
                Return Me.modifiedField
            End Get
            Set
                Me.modifiedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Hosted() As Boolean
            Get
                Return Me.hostedField
            End Get
            Set
                Me.hostedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Identifier() As String
            Get
                Return Me.identifierField
            End Get
            Set
                Me.identifierField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Owner() As UserIDInfo
            Get
                Return Me.ownerField
            End Get
            Set
                Me.ownerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NetworkID() As Integer
            Get
                Return Me.networkIDField
            End Get
            Set
                Me.networkIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MailboxID() As Integer
            Get
                Return Me.mailboxIDField
            End Get
            Set
                Me.mailboxIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UseType() As UseType
            Get
                Return Me.useTypeField
            End Get
            Set
                Me.useTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property URL() As String
            Get
                Return Me.uRLField
            End Get
            Set
                Me.uRLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MimeTypeOverride() As String
            Get
                Return Me.mimeTypeOverrideField
            End Get
            Set
                Me.mimeTypeOverrideField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SignData() As Boolean
            Get
                Return Me.signDataField
            End Get
            Set
                Me.signDataField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EncryptData() As Boolean
            Get
                Return Me.encryptDataField
            End Get
            Set
                Me.encryptDataField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompressData() As Boolean
            Get
                Return Me.compressDataField
            End Get
            Set
                Me.compressDataField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BeginUsage() As Date
            Get
                Return Me.beginUsageField
            End Get
            Set
                Me.beginUsageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EndUsage() As Date
            Get
                Return Me.endUsageField
            End Get
            Set
                Me.endUsageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As Status
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Receipt() As ReceiptType
            Get
                Return Me.receiptField
            End Get
            Set
                Me.receiptField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SSLClientAuthentication() As Boolean
            Get
                Return Me.sSLClientAuthenticationField
            End Get
            Set
                Me.sSLClientAuthenticationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HTTPAuthentication() As HTTPAuthInfo
            Get
                Return Me.hTTPAuthenticationField
            End Get
            Set
                Me.hTTPAuthenticationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Certificates() As Certificate()
            Get
                Return Me.certificatesField
            End Get
            Set
                Me.certificatesField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class CertificateRootInfo
        
        Private passwordField As String
        
        Private privatePFXField() As Byte
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property PrivatePFX() As Byte()
            Get
                Return Me.privatePFXField
            End Get
            Set
                Me.privatePFXField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Partial Public Class CertificateInfo
        
        Private certKeyIDField As Integer
        
        Private partnerAS2IDField As String
        
        Private partnerURLField As String
        
        Private typeField As CertificateType
        
        Private usageField As CertificateUsage
        
        Private secureHashAlgorithmField As String
        
        Private subjectField As String
        
        Private issuerField As String
        
        Private hasPrivateKeyField As Boolean
        
        Private publicCertificateField() As Byte
        
        Private beginUsageField As Date
        
        Private endUsageField As Date
        
        Private notBeforeField As Date
        
        Private notAfterField As Date
        
        Private serialNumberField As String
        
        Private thumbprintField As String
        
        Private statusField As Status
        
        Private rootInfoField As CertificateRootInfo
        
        '''<remarks/>
        Public Property CertKeyID() As Integer
            Get
                Return Me.certKeyIDField
            End Get
            Set
                Me.certKeyIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PartnerAS2ID() As String
            Get
                Return Me.partnerAS2IDField
            End Get
            Set
                Me.partnerAS2IDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PartnerURL() As String
            Get
                Return Me.partnerURLField
            End Get
            Set
                Me.partnerURLField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Type() As CertificateType
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Usage() As CertificateUsage
            Get
                Return Me.usageField
            End Get
            Set
                Me.usageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SecureHashAlgorithm() As String
            Get
                Return Me.secureHashAlgorithmField
            End Get
            Set
                Me.secureHashAlgorithmField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Subject() As String
            Get
                Return Me.subjectField
            End Get
            Set
                Me.subjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Issuer() As String
            Get
                Return Me.issuerField
            End Get
            Set
                Me.issuerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HasPrivateKey() As Boolean
            Get
                Return Me.hasPrivateKeyField
            End Get
            Set
                Me.hasPrivateKeyField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property PublicCertificate() As Byte()
            Get
                Return Me.publicCertificateField
            End Get
            Set
                Me.publicCertificateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BeginUsage() As Date
            Get
                Return Me.beginUsageField
            End Get
            Set
                Me.beginUsageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EndUsage() As Date
            Get
                Return Me.endUsageField
            End Get
            Set
                Me.endUsageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NotBefore() As Date
            Get
                Return Me.notBeforeField
            End Get
            Set
                Me.notBeforeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NotAfter() As Date
            Get
                Return Me.notAfterField
            End Get
            Set
                Me.notAfterField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SerialNumber() As String
            Get
                Return Me.serialNumberField
            End Get
            Set
                Me.serialNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Thumbprint() As String
            Get
                Return Me.thumbprintField
            End Get
            Set
                Me.thumbprintField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As Status
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RootInfo() As CertificateRootInfo
            Get
                Return Me.rootInfoField
            End Get
            Set
                Me.rootInfoField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum CertificateSecureHashAlgorithm
        
        '''<remarks/>
        sha1
        
        '''<remarks/>
        sha2
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum InvoiceInclude
        
        '''<remarks/>
        AllCurrentCharges
        
        '''<remarks/>
        MonthlyItemsOnly
        
        '''<remarks/>
        SpecialChargesOnly
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum StatisticsPeriod
        
        '''<remarks/>
        Hour
        
        '''<remarks/>
        Day
        
        '''<remarks/>
        Week
        
        '''<remarks/>
        Month
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum ParcelStatus
        
        '''<remarks/>
        InBoxReady
        
        '''<remarks/>
        InBoxTransferred
        
        '''<remarks/>
        x1256Pending
        
        '''<remarks/>
        as2Receive
        
        '''<remarks/>
        as2MDNSent
        
        '''<remarks/>
        as2MDNPending
        
        '''<remarks/>
        as2MDNRejected
        
        '''<remarks/>
        as2MDNConfirmed
        
        '''<remarks/>
        as2Sent
        
        '''<remarks/>
        as2SendFailed
        
        '''<remarks/>
        gisbReceived
        
        '''<remarks/>
        gisbSent
        
        '''<remarks/>
        gisbSendFailed
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum NetworkContactType
        
        '''<remarks/>
        Owner
        
        '''<remarks/>
        Errors
        
        '''<remarks/>
        Interconnects
        
        '''<remarks/>
        Notices
        
        '''<remarks/>
        Reports
        
        '''<remarks/>
        Accounting
        
        '''<remarks/>
        CustomerService
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum EMailSystem
        
        '''<remarks/>
        smtp
        
        '''<remarks/>
        x400
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum EMailPayload
        
        '''<remarks/>
        Body
        
        '''<remarks/>
        Attachment
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum OrderBy
        
        '''<remarks/>
        Description
        
        '''<remarks/>
        QID
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum eMailTo
        
        '''<remarks/>
        NoEMail
        
        '''<remarks/>
        Requestor
        
        '''<remarks/>
        Network
        
        '''<remarks/>
        RequestorAndNetwork
        
        '''<remarks/>
        Other
        
        '''<remarks/>
        RequestorAndOther
        
        '''<remarks/>
        NetworkAndOther
        
        '''<remarks/>
        EMailAll
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum NetworkServiceType
        
        '''<remarks/>
        SVC
        
        '''<remarks/>
        VAN
        
        '''<remarks/>
        MBX
        
        '''<remarks/>
        NET
        
        '''<remarks/>
        APP
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ecgridos.net/")>  _
    Public Enum NetworkWebsiteType
        
        '''<remarks/>
        Home
        
        '''<remarks/>
        Support
        
        '''<remarks/>
        Login
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2PairCompletedEventHandler(ByVal sender As Object, ByVal e As AS2PairCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2PairCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As as2CommInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),as2CommInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2UpdateCompletedEventHandler(ByVal sender As Object, ByVal e As AS2UpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2UpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2ListCompletedEventHandler(ByVal sender As Object, ByVal e As AS2ListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2ListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As as2CommInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),as2CommInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2ListExCompletedEventHandler(ByVal sender As Object, ByVal e As AS2ListExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2ListExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As as2CommInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),as2CommInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2FindCompletedEventHandler(ByVal sender As Object, ByVal e As AS2FindCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2FindCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As as2CommInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),as2CommInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CommListCompletedEventHandler(ByVal sender As Object, ByVal e As CommListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CommListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CommIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CommIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CommListExCompletedEventHandler(ByVal sender As Object, ByVal e As CommListExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CommListExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CommIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CommIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CommFindCompletedEventHandler(ByVal sender As Object, ByVal e As CommFindCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CommFindCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CommIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CommIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2InfoCompletedEventHandler(ByVal sender As Object, ByVal e As AS2InfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2InfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As as2CommInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),as2CommInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CommInfoCompletedEventHandler(ByVal sender As Object, ByVal e As CommInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CommInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CommIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CommIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2SetStatusCompletedEventHandler(ByVal sender As Object, ByVal e As AS2SetStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2SetStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2TerminateCompletedEventHandler(ByVal sender As Object, ByVal e As AS2TerminateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2TerminateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2CertAddPublicCompletedEventHandler(ByVal sender As Object, ByVal e As AS2CertAddPublicCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2CertAddPublicCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As as2CommInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),as2CommInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2CertAddPrivateCompletedEventHandler(ByVal sender As Object, ByVal e As AS2CertAddPrivateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2CertAddPrivateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As as2CommInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),as2CommInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2CertCreatePrivateCompletedEventHandler(ByVal sender As Object, ByVal e As AS2CertCreatePrivateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2CertCreatePrivateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As as2CommInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),as2CommInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2CertTerminateCompletedEventHandler(ByVal sender As Object, ByVal e As AS2CertTerminateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2CertTerminateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2DefaultMailboxCompletedEventHandler(ByVal sender As Object, ByVal e As AS2DefaultMailboxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2DefaultMailboxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GISBListCompletedEventHandler(ByVal sender As Object, ByVal e As GISBListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GISBListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As GISBCommInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),GISBCommInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GISBListExCompletedEventHandler(ByVal sender As Object, ByVal e As GISBListExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GISBListExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As GISBCommInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),GISBCommInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GISBFindCompletedEventHandler(ByVal sender As Object, ByVal e As GISBFindCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GISBFindCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As GISBCommInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),GISBCommInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GISBInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GISBInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GISBInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As GISBCommInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),GISBCommInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NowUTCCompletedEventHandler(ByVal sender As Object, ByVal e As NowUTCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NowUTCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeDateCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub VersionCompletedEventHandler(ByVal sender As Object, ByVal e As VersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub X400FormatCompletedEventHandler(ByVal sender As Object, ByVal e As X400FormatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class X400FormatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub PricelistInfoCompletedEventHandler(ByVal sender As Object, ByVal e As PricelistInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PricelistInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Pricelist
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Pricelist)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ContractAddCompletedEventHandler(ByVal sender As Object, ByVal e As ContractAddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ContractAddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Contract
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Contract)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ContractListCompletedEventHandler(ByVal sender As Object, ByVal e As ContractListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ContractListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Contract()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Contract())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ContractInfoCompletedEventHandler(ByVal sender As Object, ByVal e As ContractInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ContractInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Contract
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Contract)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InvoiceInfoCompletedEventHandler(ByVal sender As Object, ByVal e As InvoiceInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InvoiceInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Invoice
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Invoice)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InvoiceCalculateCompletedEventHandler(ByVal sender As Object, ByVal e As InvoiceCalculateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InvoiceCalculateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Invoice
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Invoice)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InvoiceCalculateLineItemCompletedEventHandler(ByVal sender As Object, ByVal e As InvoiceCalculateLineItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InvoiceCalculateLineItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As LineItem
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LineItem)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InvoiceSetStatusCompletedEventHandler(ByVal sender As Object, ByVal e As InvoiceSetStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InvoiceSetStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InvoiceListCompletedEventHandler(ByVal sender As Object, ByVal e As InvoiceListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InvoiceListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Invoice()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Invoice())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeInBoxExCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeInBoxExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeInBoxExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeInBoxArchiveExCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeInBoxArchiveExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeInBoxArchiveExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeOutBoxCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeOutBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeOutBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeOutBoxArchiveCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeOutBoxArchiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeOutBoxArchiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeOutBoxExCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeOutBoxExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeOutBoxExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeOutBoxArchiveExCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeOutBoxArchiveExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeOutBoxArchiveExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeOutBoxPendingCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeOutBoxPendingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeOutBoxPendingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeOutBoxPendingExCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeOutBoxPendingExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeOutBoxPendingExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeInBoxPendingCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeInBoxPendingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeInBoxPendingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeInBoxPendingExCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeInBoxPendingExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeInBoxPendingExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeHeaderInfoCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeHeaderInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeHeaderInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeHeaderInfoBCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeHeaderInfoBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeHeaderInfoBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeOutBoxNoRouteCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeOutBoxNoRouteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeOutBoxNoRouteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeOutBoxNoRouteExCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeOutBoxNoRouteExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeOutBoxNoRouteExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeResendCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeResendCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeResendCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeCancelCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeCancelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeCancelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CallBackEventInfoCompletedEventHandler(ByVal sender As Object, ByVal e As CallBackEventInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallBackEventInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CallBackEventIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CallBackEventIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CallBackEventListExCompletedEventHandler(ByVal sender As Object, ByVal e As CallBackEventListExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallBackEventListExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CallBackEventIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CallBackEventIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CallBackAddExCompletedEventHandler(ByVal sender As Object, ByVal e As CallBackAddExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallBackAddExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CallBackEventIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CallBackEventIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CallBackQueueInfoCompletedEventHandler(ByVal sender As Object, ByVal e As CallBackQueueInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallBackQueueInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CallBackQueueIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CallBackQueueIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CallBackTestCompletedEventHandler(ByVal sender As Object, ByVal e As CallBackTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallBackTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CallBackQueueIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CallBackQueueIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CallBackInvokeCompletedEventHandler(ByVal sender As Object, ByVal e As CallBackInvokeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallBackInvokeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CallBackQueueIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CallBackQueueIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CallBackPendingListCompletedEventHandler(ByVal sender As Object, ByVal e As CallBackPendingListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallBackPendingListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CallBackQueueIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CallBackQueueIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CallBackPendingListExCompletedEventHandler(ByVal sender As Object, ByVal e As CallBackPendingListExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallBackPendingListExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CallBackQueueIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CallBackQueueIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CallBackFailedListCompletedEventHandler(ByVal sender As Object, ByVal e As CallBackFailedListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallBackFailedListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CallBackQueueIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CallBackQueueIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CallBackFailedListExCompletedEventHandler(ByVal sender As Object, ByVal e As CallBackFailedListExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallBackFailedListExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CallBackQueueIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CallBackQueueIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ReportMonthlyCompletedEventHandler(ByVal sender As Object, ByVal e As ReportMonthlyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReportMonthlyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ReportMonthlyExCompletedEventHandler(ByVal sender As Object, ByVal e As ReportMonthlyExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReportMonthlyExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ReportTrafficStatsCompletedEventHandler(ByVal sender As Object, ByVal e As ReportTrafficStatsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReportTrafficStatsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ReportTrafficStatsExCompletedEventHandler(ByVal sender As Object, ByVal e As ReportTrafficStatsExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReportTrafficStatsExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ReportTrafficStatsPublicCompletedEventHandler(ByVal sender As Object, ByVal e As ReportTrafficStatsPublicCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReportTrafficStatsPublicCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ReportInstantStatsCompletedEventHandler(ByVal sender As Object, ByVal e As ReportInstantStatsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReportInstantStatsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ReportInstantStatsExCompletedEventHandler(ByVal sender As Object, ByVal e As ReportInstantStatsExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReportInstantStatsExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2AddCompletedEventHandler(ByVal sender As Object, ByVal e As AS2AddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2AddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As as2CommInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),as2CommInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CommAddCompletedEventHandler(ByVal sender As Object, ByVal e As CommAddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CommAddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CommIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CommIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub AS2SetPairCompletedEventHandler(ByVal sender As Object, ByVal e As AS2SetPairCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AS2SetPairCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As as2CommInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),as2CommInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterconnectCountCompletedEventHandler(ByVal sender As Object, ByVal e As InterconnectCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterconnectCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterconnectCountExCompletedEventHandler(ByVal sender As Object, ByVal e As InterconnectCountExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterconnectCountExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CarbonCopyAddCompletedEventHandler(ByVal sender As Object, ByVal e As CarbonCopyAddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CarbonCopyAddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CarbonCopyAddExCompletedEventHandler(ByVal sender As Object, ByVal e As CarbonCopyAddExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CarbonCopyAddExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CarbonCopyActivateCompletedEventHandler(ByVal sender As Object, ByVal e As CarbonCopyActivateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CarbonCopyActivateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CarbonCopySuspendCompletedEventHandler(ByVal sender As Object, ByVal e As CarbonCopySuspendCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CarbonCopySuspendCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CarbonCopyTerminateCompletedEventHandler(ByVal sender As Object, ByVal e As CarbonCopyTerminateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CarbonCopyTerminateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CarbonCopyInfoCompletedEventHandler(ByVal sender As Object, ByVal e As CarbonCopyInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CarbonCopyInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CarbonCopyIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CarbonCopyIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CarbonCopyListCompletedEventHandler(ByVal sender As Object, ByVal e As CarbonCopyListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CarbonCopyListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CarbonCopyIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CarbonCopyIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub CarbonCopyListExCompletedEventHandler(ByVal sender As Object, ByVal e As CarbonCopyListExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CarbonCopyListExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CarbonCopyIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CarbonCopyIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelInBoxCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelInBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelInBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ParcelIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ParcelIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelInBoxExCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelInBoxExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelInBoxExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ParcelIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ParcelIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelInfoCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ParcelIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ParcelIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelDownloadCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelDownloadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelDownloadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FileInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FileInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelDownloadNoUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelDownloadNoUpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelDownloadNoUpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FileInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FileInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelDownloadGZipCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelDownloadGZipCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelDownloadGZipCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FileInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FileInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelDownloadInnerCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelDownloadInnerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelDownloadInnerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FileInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FileInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelDownloadConfirmCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelDownloadConfirmCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelDownloadConfirmCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelAcknowledgmentNoteCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelAcknowledgmentNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelAcknowledgmentNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelDownloadCancelCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelDownloadCancelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelDownloadCancelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelDownloadConfirmPendingAckCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelDownloadConfirmPendingAckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelDownloadConfirmPendingAckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelDownloadResetCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelDownloadResetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelDownloadResetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelResendCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelResendCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelResendCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelUploadCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelUploadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelUploadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelUploadExACompletedEventHandler(ByVal sender As Object, ByVal e As ParcelUploadExACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelUploadExACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelUploadGZipCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelUploadGZipCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelUploadGZipCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelUpdateStatusCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelUpdateStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelUpdateStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelUpdateLocalStatusCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelUpdateLocalStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelUpdateLocalStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelUploadExCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelUploadExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelUploadExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelUploadDirectedCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelUploadDirectedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelUploadDirectedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelUploadGZipExCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelUploadGZipExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelUploadGZipExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelUploadDirectedGZipCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelUploadDirectedGZipCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelUploadDirectedGZipCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelTestCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelSetMailbagControlIDCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelSetMailbagControlIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelSetMailbagControlIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelManifestCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelManifestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelManifestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ManifestInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ManifestInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelInterchangeManifestCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelInterchangeManifestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelInterchangeManifestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ManifestInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ManifestInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeManifestCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeManifestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeManifestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ManifestInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ManifestInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelNoteListCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelNoteListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelNoteListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ParcelNote()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ParcelNote())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelInBoxArchiveCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelInBoxArchiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelInBoxArchiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ParcelIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ParcelIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelInBoxArchiveExCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelInBoxArchiveExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelInBoxArchiveExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ParcelIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ParcelIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelOutBoxArchiveCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelOutBoxArchiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelOutBoxArchiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ParcelIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ParcelIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelOutBoxArchiveExCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelOutBoxArchiveExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelOutBoxArchiveExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ParcelIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ParcelIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelOutBoxErrorCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelOutBoxErrorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelOutBoxErrorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ParcelIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ParcelIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelOutBoxErrorExCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelOutBoxErrorExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelOutBoxErrorExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ParcelIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ParcelIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelOutBoxInProcessCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelOutBoxInProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelOutBoxInProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ParcelIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ParcelIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ParcelOutBoxInProcessExCompletedEventHandler(ByVal sender As Object, ByVal e As ParcelOutBoxInProcessExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParcelOutBoxInProcessExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ParcelIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ParcelIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeInfoCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeInBoxCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeInBoxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeInBoxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterchangeInBoxArchiveCompletedEventHandler(ByVal sender As Object, ByVal e As InterchangeInBoxArchiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterchangeInBoxArchiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterchangeIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterchangeIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkBackupAllConfigsCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkBackupAllConfigsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkBackupAllConfigsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxAddCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxAddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxAddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxAddExCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxAddExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxAddExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxActivateCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxActivateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxActivateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxSuspendCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxSuspendCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxSuspendCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxTerminateCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxTerminateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxTerminateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxManagedCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxManagedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxManagedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxInfoCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As MailboxIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MailboxIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxNameCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxSetContactCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxSetContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxSetContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxOwnerContactCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxOwnerContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxOwnerContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxErrorsContactCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxErrorsContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxErrorsContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxInterconnectsContactCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxInterconnectsContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxInterconnectsContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxNoticesContactCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxNoticesContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxNoticesContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxX12DelimitersCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxX12DelimitersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxX12DelimitersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxInBoxTimeoutCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxInBoxTimeoutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxInBoxTimeoutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxDescriptionCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxDescriptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxDescriptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxUseCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxUseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxUseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxListCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As MailboxIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MailboxIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub MailboxListExCompletedEventHandler(ByVal sender As Object, ByVal e As MailboxListExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MailboxListExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As MailboxIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MailboxIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPAddCompletedEventHandler(ByVal sender As Object, ByVal e As TPAddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPAddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPAddVANCompletedEventHandler(ByVal sender As Object, ByVal e As TPAddVANCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPAddVANCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPAddExCompletedEventHandler(ByVal sender As Object, ByVal e As TPAddExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPAddExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPMoveCompletedEventHandler(ByVal sender As Object, ByVal e As TPMoveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPMoveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPMoveMailboxCompletedEventHandler(ByVal sender As Object, ByVal e As TPMoveMailboxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPMoveMailboxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPMoveExCompletedEventHandler(ByVal sender As Object, ByVal e As TPMoveExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPMoveExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPUpdateDescriptionCompletedEventHandler(ByVal sender As Object, ByVal e As TPUpdateDescriptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPUpdateDescriptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPUpdateDataEMailCompletedEventHandler(ByVal sender As Object, ByVal e As TPUpdateDataEMailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPUpdateDataEMailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPActivateCompletedEventHandler(ByVal sender As Object, ByVal e As TPActivateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPActivateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPSuspendCompletedEventHandler(ByVal sender As Object, ByVal e As TPSuspendCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPSuspendCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPTerminateCompletedEventHandler(ByVal sender As Object, ByVal e As TPTerminateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPTerminateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPSetRoutingGroupCompletedEventHandler(ByVal sender As Object, ByVal e As TPSetRoutingGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPSetRoutingGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPInfoCompletedEventHandler(ByVal sender As Object, ByVal e As TPInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ECGridIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ECGridIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPSearchCompletedEventHandler(ByVal sender As Object, ByVal e As TPSearchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPSearchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ECGridIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ECGridIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPSearchExCompletedEventHandler(ByVal sender As Object, ByVal e As TPSearchExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPSearchExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ECGridIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ECGridIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPListCompletedEventHandler(ByVal sender As Object, ByVal e As TPListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ECGridIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ECGridIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPListExCompletedEventHandler(ByVal sender As Object, ByVal e As TPListExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPListExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ECGridIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ECGridIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPListExPagedCompletedEventHandler(ByVal sender As Object, ByVal e As TPListExPagedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPListExPagedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ECGridIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ECGridIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPListByOwnerCompletedEventHandler(ByVal sender As Object, ByVal e As TPListByOwnerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPListByOwnerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ECGridIDInfoCollection
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ECGridIDInfoCollection)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPFindExCompletedEventHandler(ByVal sender As Object, ByVal e As TPFindExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPFindExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ECGridIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ECGridIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPGetMailboxDefaultCompletedEventHandler(ByVal sender As Object, ByVal e As TPGetMailboxDefaultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPGetMailboxDefaultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ECGridIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ECGridIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPSetMailboxDefaultCompletedEventHandler(ByVal sender As Object, ByVal e As TPSetMailboxDefaultCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPSetMailboxDefaultCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub TPSetOwnerCompletedEventHandler(ByVal sender As Object, ByVal e As TPSetOwnerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TPSetOwnerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterconnectAddCompletedEventHandler(ByVal sender As Object, ByVal e As InterconnectAddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterconnectAddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterconnectIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterconnectIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterconnectUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As InterconnectUpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterconnectUpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterconnectNoteCompletedEventHandler(ByVal sender As Object, ByVal e As InterconnectNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterconnectNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterconnectCancelCompletedEventHandler(ByVal sender As Object, ByVal e As InterconnectCancelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterconnectCancelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterconnectInfoCompletedEventHandler(ByVal sender As Object, ByVal e As InterconnectInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterconnectInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterconnectIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterconnectIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterconnectInfoGUIDCompletedEventHandler(ByVal sender As Object, ByVal e As InterconnectInfoGUIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterconnectInfoGUIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterconnectIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterconnectIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterconnectNoteListCompletedEventHandler(ByVal sender As Object, ByVal e As InterconnectNoteListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterconnectNoteListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterconnectNote()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterconnectNote())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterconnectListByECGridIDCompletedEventHandler(ByVal sender As Object, ByVal e As InterconnectListByECGridIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterconnectListByECGridIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterconnectIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterconnectIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterconnectListByStatusCompletedEventHandler(ByVal sender As Object, ByVal e As InterconnectListByStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterconnectListByStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterconnectIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterconnectIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterconnectListByStatusExCompletedEventHandler(ByVal sender As Object, ByVal e As InterconnectListByStatusExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterconnectListByStatusExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As InterconnectIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),InterconnectIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub InterconnectAssignNetOpsCompletedEventHandler(ByVal sender As Object, ByVal e As InterconnectAssignNetOpsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InterconnectAssignNetOpsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub LoginCompletedEventHandler(ByVal sender As Object, ByVal e As LoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GenerateAPIKeyCompletedEventHandler(ByVal sender As Object, ByVal e As GenerateAPIKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GenerateAPIKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub GeneratePasswordCompletedEventHandler(ByVal sender As Object, ByVal e As GeneratePasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GeneratePasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub LogoutCompletedEventHandler(ByVal sender As Object, ByVal e As LogoutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogoutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub ChangePasswordCompletedEventHandler(ByVal sender As Object, ByVal e As ChangePasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangePasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub WhoAmICompletedEventHandler(ByVal sender As Object, ByVal e As WhoAmICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WhoAmICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SessionInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SessionInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub JSONWhoAmICompletedEventHandler(ByVal sender As Object, ByVal e As JSONWhoAmICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class JSONWhoAmICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserAddCompletedEventHandler(ByVal sender As Object, ByVal e As UserAddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserAddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserAddExCompletedEventHandler(ByVal sender As Object, ByVal e As UserAddExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserAddExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As UserIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),UserIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As UserUpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserUpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As UserPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserActivateCompletedEventHandler(ByVal sender As Object, ByVal e As UserActivateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserActivateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserSuspendCompletedEventHandler(ByVal sender As Object, ByVal e As UserSuspendCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserSuspendCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserTerminateCompletedEventHandler(ByVal sender As Object, ByVal e As UserTerminateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserTerminateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserSendSMSCompletedEventHandler(ByVal sender As Object, ByVal e As UserSendSMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserSendSMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserResetCompletedEventHandler(ByVal sender As Object, ByVal e As UserResetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserResetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserResetAllCompletedEventHandler(ByVal sender As Object, ByVal e As UserResetAllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserResetAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Short
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Short)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserListCompletedEventHandler(ByVal sender As Object, ByVal e As UserListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As UserIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),UserIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserListExCompletedEventHandler(ByVal sender As Object, ByVal e As UserListExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserListExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As UserIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),UserIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserListLockedOutCompletedEventHandler(ByVal sender As Object, ByVal e As UserListLockedOutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserListLockedOutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As UserIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),UserIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserListLockedOutExCompletedEventHandler(ByVal sender As Object, ByVal e As UserListLockedOutExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserListLockedOutExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As UserIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),UserIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserSetNetworkMailboxCompletedEventHandler(ByVal sender As Object, ByVal e As UserSetNetworkMailboxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserSetNetworkMailboxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserSetAuthLevelCompletedEventHandler(ByVal sender As Object, ByVal e As UserSetAuthLevelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserSetAuthLevelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub UserGetAPIKeyCompletedEventHandler(ByVal sender As Object, ByVal e As UserGetAPIKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserGetAPIKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SessionLogCurrentCompletedEventHandler(ByVal sender As Object, ByVal e As SessionLogCurrentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SessionLogCurrentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SessionLogInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SessionLogInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SessionLogCompletedEventHandler(ByVal sender As Object, ByVal e As SessionLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SessionLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SessionLogInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SessionLogInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub SessionLogExCompletedEventHandler(ByVal sender As Object, ByVal e As SessionLogExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SessionLogExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SessionLogInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SessionLogInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub KeyGetCompletedEventHandler(ByVal sender As Object, ByVal e As KeyGetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class KeyGetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As KeyValue
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),KeyValue)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub KeyListCompletedEventHandler(ByVal sender As Object, ByVal e As KeyListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class KeyListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As KeyValue()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),KeyValue())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub KeySetCompletedEventHandler(ByVal sender As Object, ByVal e As KeySetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class KeySetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub KeyRemoveCompletedEventHandler(ByVal sender As Object, ByVal e As KeyRemoveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class KeyRemoveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkInfoCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As NetworkIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),NetworkIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkInfoWithLogCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkInfoWithLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkInfoWithLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As NetworkIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),NetworkIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkListCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As NetworkIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),NetworkIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkStatusSummaryCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkStatusSummaryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkStatusSummaryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkOutageListCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkOutageListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkOutageListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As NetworkIDInfo()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),NetworkIDInfo())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkStartCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkStartCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkStartCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkStopCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkStopCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkStopCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkRestartCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkRestartCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkRestartCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkSetStatusCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkSetStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkSetStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkAddCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkAddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkAddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkSetContactCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkSetContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkSetContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkGetContactCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkGetContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkGetContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As UserIDInfo
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),UserIDInfo)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkOwnerContactCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkOwnerContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkOwnerContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkErrorsContactCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkErrorsContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkErrorsContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkInterconnectsContactCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkInterconnectsContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkInterconnectsContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkNoticesContactCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkNoticesContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkNoticesContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkBillingContactCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkBillingContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkBillingContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkReportsContactCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkReportsContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkReportsContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")>  _
    Public Delegate Sub NetworkSetWebsiteCompletedEventHandler(ByVal sender As Object, ByVal e As NetworkSetWebsiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NetworkSetWebsiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
